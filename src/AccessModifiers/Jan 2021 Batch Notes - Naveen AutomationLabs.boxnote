{"head":28400,"savepointDataFileId":"782302685155","savepointListObject":{},"lastEditTimestamp":1614721311007,"diffChangeset":"Z:1m1p>0|t6=qsm=c*ra*o1*o1=3$","invalidDiffChangeset":false,"authorList":{"15071375008":{"authorName":"Simantika Datta","authorCustomAvatarUrl":"/users/15071375008/avatar"}},"diffAuthorList":{"15071375008":true},"shouldCreateSavepointBeforeApplyingNextRevision":false,"firstKeyRevision":5,"atext":{"text":" \nlength()\n\nThe length of a string is referred to as the total number of characters it contains.\nThe return type of the length() method is int.\nSpaces count as characters.\n\npublic class LengthExample{  \npublic static void main(String args[]){  \nString s1=\"testing\";  \nSystem.out.println(\"string length is: \"+s1.length());//07 is the length of testing string  \n}} \n@Priyanka\n\n\n\n\n\n\n@KeyurMakwana\nSplit()\nThe string split() method breaks a given string around matches of the given regular expression\nreturn type: string[]\n\nnote- if splitting a string from the start value, then 0th index value will be blank\nEx - String test = \"xXtestingxXXjavaXxXseleniumxXxpython\"\nString myTest[] = test.split(\"xX\");\nhere split string is xX, which is at the starting position, so \nSystem.out.println(myTest[0]); will give blank value\n@Sudha\n\n\n@shraddhagoel\n\n\n\n\n@shraddhagoel\nindexOf()\nreturns the position of the first occurrence of specified character(s) in a string.\nreturn type: integer value\n@shraddhagoel\nint indexOf(int ch, int fromIndex)\nIt returns the index of first occurrence of character ch in the given string after the specified index “fromIndex”. For example, if the indexOf() method is called like this str.indexOf(‘A’, 20) then it would start looking for the character ‘A’ in string str after the index 20.\n@Priyanka\n\nAll the above variations returns -1 if the specified char/substring is not found in the particular String.\n\n\ncharAt(int index)\nreturns the character at the specified index in a string\nThe index value that we pass in this method should be between 0 and (length of string-1). \n charAt method throws IndexOutOfBoundsException, if the index value passed in the charAt() method is less than zero or greater than or equal to the length of the string (index<0|| index>=length()).\n@Priyanka\ntoUpperCase()\nThis method converts a string to upper case letters.\n\ntoLowerCase()\nThis method converts a string to lower case letters.\n\ntrim()\nThis removes whitespace from both ends of a string.\n\n\nequals()\n method compares two strings\nIt is case sensitive comparison\nReturns:        A boolean value: \ntrue - if the strings are equal \nfalse - if the strings are not equal\n@Priyanka\nequalsIgnoreCase()\nmethod compares two strings, ignoring lower case and upper case differences.\nThis method returns true if the strings are equal, and false if not.\n\ncontains()\nmethod checks whether a string contains a sequence of characters.\nReturns true if the characters exist and false if not.\n\nconcat()\nmethod appends (concatenate) a string to the end of another string.\nReturns:        A String, representing the text of the combined strings\nString a=\"testing\"\nString b=\"selenium\"\nint x=100;\nint y= 200\nSystem.out.println(a+b+x+y)\noutput will be- testingselenium100200\nthis is concatanation operation\nSystem.out.println(a.concat(b))\noutput-testingselenium\nconcat()  can only concat strings\n\n\n\n\n\nShort Cut Key to Copy the line in Eclipse\nPut the cursor on the line and Press Ctrl+Alt+Down Arrow Key \nIt will copy the same line. \n\nSubstring\nString substring() : This method has two variants and returns a new string that is a substring of this string. The substring begins with the character at the specified index and extends to the end of this string.\nSyntax : public String substring(int begIndex)Parameters : begIndex : the begin index, inclusive.Return Value : \nThe specified substring.\n\nExample : //Substring; gives small section of big string\n                String m=\"This is test 12345 \";\n       Result:     is is test 12345 \n System.out.println(m.substring(2));\nResult:      is is test 1  \n                System.out.println(m.substring(2, 14));\n@Sudha\nprintStackTrace()\nThe printStackTrace() method in Java is a tool used to handle exceptions and errors. It is a method of Java's throwable class which prints the throwable along with other details like the line number and class name where the exception occurred. printStackTrace() is very useful in diagnosing exceptions.\n\n\n\n\n\nException  Hierarchy\nThrowable is superclass of Exception and Error.\nException is the superclass of all the exceptions.\nIf we don't know the exact exception then we can just write Exception.\n\nPriyanka\n\n\n\nThrows keyword\nThrows keyword is to pass exception from one method to another\nPriyanka\nThrow keyword\nThrow keyword is used to create custom made exception\nPriyanka\nTry and  catch\nException handling is done by try and catch block.\nThe try statement allows you to define a block of code to be tested for errors while it is being executed.\nThe catch statement allows you to define a block of code to be executed, if an error occurs in the try block.\nThe try and catch keywords come in pairs:\ntry {\n  //  Block of code to try} catch(Exception e) {\n  //  Block of code to handle errors}\nPriyanka\nFinally keyword\nThe finally statement lets you execute code, after try...catch, regardless of the result:\nFinally will override the actual method returns.\nuse case: close the database connection\nPriyanka\n\n-\nInterface :\n*no method body\n*only method declaration\n*only method prototype\n*will not give u business logic\n5 . override is mandatory here \n6. cannot create the object of interface\n7.we cannot create constructor of interface\n8. can also define variables too, by default static and final\n9. can have static method in interface with body\n\nexample : \npublic void orthoservices();\n\npublic int test(int a);\n@Sudha\nAbstraction:\n\n\n\n\nRelationship between classes and Interfaces \nAbstract class in Java \nA class which is declared with the abstract keyword is known as an abstract class in Java. It can have abstract and non-abstract methods (method with the body).\n\nThere are two ways to achieve abstraction in java\n*Abstract class (0 to 100%)\n*Interface (100%)\n*\n@Sudha\nInterfaces\nAn interface in Java is a blueprint of a class. It has static constants and abstract methods.\nThe interface in Java is a mechanism to achieve abstraction. There can be only abstract methods in the Java interface, not method body. It is used to achieve abstraction and multiple inheritance in Java.\n\nAn interface is declared by using the interface keyword. It provides total abstraction; means all the methods in an interface are declared with the empty body, and all the fields are public, static and final by default. A class that implements an interface must implement all the methods declared in the interface.\n\n\n\n@Sudha\n\n\nDifference between Abstract and Interface \nAbstract class:\n\n1) Abstract class can have abstract and non-abstract methods.\n\n2) Abstract class doesn't support multiple inheritance.\n\n3) Abstract class can have final, non-final, static and non-static variables.\n\n4) The abstract keyword is used to declare abstract class.\n\n5)An abstract class can extend another Java class and implement multiple Java interfaces.\n\n6)An abstract class can be extended using keyword \"extends\".\n\n abstract class achieves partial abstraction\n\nInterface: \n\nInterface can have only abstract methods. Since Java 8, it can have default and static methods also.\n\nInterface supports multiple inheritance. \n\n\nInterface has only static and final variables.\n\nThe interface keyword is used to declare interface.\n\nAn interface can extend another Java interface only.\n\n\nAn interface can be implemented using keyword \"implements\".\n\n\nwhereas interface achieves fully abstraction (100%)\n\nOOPS Concept\n\n\n1.Java is class based Object oriented programming language that is built around the concept of objects. OOP concepts intend to improve code readability and reusability by defining how to structure a java program efficiently.\n2. Four basic/pillers OOPs concept are:\nAbstract, Encapsulation, Polymorphism, Inheritance\n\n@Raji\nClass: Collection of objects is called class.It is a logical entity and also defined as Blueprint from which we can create an individual object.\nObject: An object is defined as instance of a class.\nInheritance: Basic concept of OOPS in which one object acquires the properties and behaviors of the parent object.It is creating parent-child relationship between two classes.\nEncapsulation: Encapsulation is a mechanism where we can bind the data and code together as a single unit.\n*k\n\n\n\n\n\n\nOOPs concept- Inheritance\n\nReference Type check \nwhen object is from child class and reference is coming from parent class, then when security check happens, the inherited methods and overriding methods pass through the security check , but the independent method will fail.This Security Check is  called as reference type check.\nEX: //top casting//upcasting(Reference is from PArent class and object is from child class , U1 is parent and NIIT is child & DayScholar Method is Independent to Child class NIIT, the Reference check fails)\n           University U1=new NIIT();\n           U1.Admission();\n           U1.Employees();\n           U1.Scholarship();\n           U1.DayScholar();\n        }\n@Sudha\nDown Casting \nReverse the Top casting is down Casting where parent class object is created and refered to the child class .Gives an exeption (Class Cast Exception) at runtime but not at compile time as the object state is changed. \n\n\nExample : where car is parent class and BMW is child class\nwhere it is casted to child class\nBMW b1= (BMW)new Car();\n\n//Down Casting with GrandParent also throws execption at Runtime\n            NIIT N1 = (NIIT) new CentralUniversity();\n@Sudha\nFinal Keyword \n whenever a class is declared with a final keyword,that class cannot become a parent now.it is used to prevent inheritence\nExample: \nfinal class University extends CentralUniversity (declared in parent class University, then we cannot extend the properties of the parent to the classes(NIIT,BITS,KITS)\n\nWhenever a Methos is declared final then this method cannot be inherited\n\nExample: public final Void start() from parent class (University)cannot be extended(NIIT/BITS/KITS) to the child class\n\n@Sudha\n\n\n\n\nWhat is Inheritance?\nInheritance is Oops concept where child class can inherit the properties and behavior from parent class using extends keyword.\nInheritance possibilities:\n*Single child class can inherit parent class.\n*Multiple child classes can inherit one parent class.\n*Multi-level inheritance is possible. Ex. child inherit parent and parent inherit grandparent class. Vehicle is grandparent class, Car is parent and BMW is child class. Then BMW can inherit properties and method sfrom grandparent class too.\n*Top/Up casting is possible. Ex. Car c=new BMW();\n*Down casting gives an error. Ex. BMW b=new Car();\n*Multiple inheritance is not possible here. Ex. child class cannot inherit multiple parent class. \n@Disha\nMethod Overriding\nWhen you have method in parent class and same method name  with the same parameter, same return type in child class then methods can be overridden.\n*Only non-static methods can be overriden.\n*Method overriding - is called Run Time Polymorphism\n@Disha\n\nIt is a good practise to mention @Override annotation if method is override.\n\nTop/Up casting\nIf parent gives the reference name to the child object.\nEx. Car c= new BMW(); Here BMW-child, Car- parent.\nIf c.(all common method options and parent class method options coming but if any method is only available in child class it won't show up).\nEx. Car class has start(), stop() methods and BMW class has start(), autoPilot() method then in option only start() and stop() options available. \nc.start(); -> Output - BMW method called.\nc.stop(); ->Output- Car method called.\n@Disha\nextends Keyword\nPublic class BMW extends Car {}\nHere BMW is a child or sub class and Car is a Super or parent class\n@Amita\n\n\n\nOOPs concept- Encapsulation\n\nWhat is Encapsulation?\nEncapsulation is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit. Declare the variables of a class as private. Provide public setter and getter methods to modify and view the variables values.\nHiding the internal implementation of methods using Encapsulation.\n@Disha\nAdvantages \nEncapsulation protects an object from unwanted access by clients.\nEncapsulation allows access to a level without revealing the complex details below that level.\n@Disha\nCall By Value\nWhen ever you call a method with a value it is Call By Value. Below Change method is calling value 500.\n\nExample: \nclass Operation{  \n int data=50;  \nvoid change(int data){  \n data=data+100;\n }  \n public static void main(String args[]){  \n Operation op=new Operation();  \n   op.change(500);  \n@Sudha\nEncapsulation \n     & \n    Steps \nTo restrict the access on certain variables we declare as Private and these variables declared as private  cant be accessed from outside the class, then we can acheive this by Getter & Setter Method, Method Chaining & Using Constructors(using just getter or not using both getter and setter).It has Private Variables and public methods\n*Declare field/variable as private. \n*Create a public getter method for each private variables. \n*Create a public setter method for each private variables and declare the parameter.\n*Create another class \n*Create an object of  using the new keyword.\n*Call getter method to read the value of variable. \n*Print the output\n\nNote:- Its not mandatory to create Getter and Setter for Encapsulation\n\nPage Object Model is designed using Encapsulation\n@Sudha\n\nThis Keyword\n\"this\" is a reference variable that refers to the current object.[[-\n\n\nthis() can be used to invoke current class constructor.\n\nusing \"this\" u can access class variables without creating an object\nthis.classvariable name=local variable\n@Sudha\nConstructor\nconstructor --- constructor will called when you create the object. And will never have business logic.\n@Sudha\nBuilder Pattern Concept\nThe builder pattern is a design pattern that allows for the step-by-step creation of complex objects using the correct sequence of actions\n@Sudha\n\nConstructor syntax: \n\n\nPublic class company {\n \n           public company(){\n           System.out.println(\"Default const...\");\n       }\n}\nName should be same as the class name\nCan not return anything, it means no return type ( if we add void it will behave like a function/method)\nIt is not a function - ( even though it look like a function)\nWe will never use the void and return keywords for the constructor as well\nConstructor will never return a value and will never have any return type\nConst.. Will help to create the objects with diff types of class vars\nConst.. Will be called when you create the object of the class..\nConst.. can be overloaded\n@Amita\n@Shraddha Goel\n\nConstructor Vs Methods\n1.Constructors must be named with same name as the class name. It cannot return anything.\nMethods can be declared to return something.\n2.Constructors invoke implicitly where as methods invoke explicitly(Programmer)\n3.They both have parameters.\n4.A Constructor is a block of code that initializes newly created object.\nMethod is collection of statements which returns a value upon its execution.\n5.Methods and Constructors can be overloaded\n6.Constructor is not a function.\n7.Constructors has no business logic but Methods/functions has business logic.\n8.Constructor has special keyword this and super is used to call Constructor explicitly where as Method has its own name which can be used to call them.\n\n\nMethod Chaining\nMethod Chaining is the practice of calling different methods in a single line instead of calling different methods with the same object reference separately. create one object and call one method from another like chain\n\nExample:\npublic void m1(){\nSystem.out.println(\"m1 method\");\nm2();\n}\npublic void m2(){\nSystem.out.println(\"m2 method\");\nm3();\n}\npublic void m3(){\nSystem.out.println(\"m3 method\");\n}\npublic static void main{string[] args){\nMethodchaining ob1=new Methodchaining();\nob1.m1();\n(result prints all 3)\n\nMethod chaining works for both static and non static methods\nstatic should be called  directly.\nExample:\npublic static void t1(){\nt2();\n}\npublic static void t2(){\nt3();\n}\npublic static void t3(){\nSystem.out.println(\"t3 method\");\n}\npublic static void main(String[] args){\nMethodchaining ob1=new Methodchaing();\nt1();\n\nif we are calling from different class, then use \nclass.method();\n\nAdvantages:\nMemory Allocation is performed correctly and \nDeclaring the Static Methods, static variables  with a value assignment is applied to all objects.\n\n\n\n@Sudha\nhow to call static variables and methods\n1.no need for object creation of the class , can be directly called within the same class\n2.should be called by classname.\nwhereas we need to create objects for non static.\n@Sudha\nReason Main Method is Static\nMain method is static because , JVM calls this method without creating the object.\n\n@Sudha\n\nMethod Overloading: \n\nTopic Name \nImportant Notes\nWritten By\n\nMethod Overloading \n* Both Static and Non Static methods can be overloaded\n* In the same class when we have different methods with the same name and different types of parameters with different sequence of the parameters, is called Method Overloading.\n* Main() method can be overloaded, but JVM will check only main() method with right signature.\n* Method Overloading - is called Compile Time Polymorphism\n* We don't have any operator overloading in Java\n*Return type doesnt count for Method Overloading.\n\n@NaveenAutomationLabs\nMethod Overloading Examples for Interview:\nlogin(long ph, int otp);\nlogin(String username, String password);\nlogin(String username, String password, String role);\nlogin(String username, String password, long ph);\n================================\nsearch(); //default search\nsearch(String productName);\nsearch(String productName, int price);\nsearch(String productName, int price, String color);\nsearch(String productName, String sellerName);\n==================================\ndoPayment(String UPI);\ndoPayment(String UPI, int otp);\ndoPayment(long CCNumber, String username, String password);\n@NaveenAutomationLabs\n\n\n\nStatic vs Non Static: \n Static method\n Non Static method \n \nTo call the class methods, no need to create object of the class\nTo call all the class methods ( non static ) we have to create the object of the class\n @Amita\nA static method is a method that belongs to a class, but it does not belong to an instance of that class and this method can be called without the instance or object of that class. \n  \n  \n  \nEvery method in java defaults to a non-static method without static keyword preceding it . Non-static methods can access any static method and static variable, without creating an instance of the object.\n\n  @Amita\n  \nIn static method, The memory of a static method is fixed in the ram, for this reason we don’t need the object of a class in which the static method is defined to call the static method. To call the method we need to write the name of the method followed by the class name. \n  \n Class Java{\n Public static void learn(){\n }\n }\n // calling\n Java.learn();\nIn non-static method, the memory of non-static method is not fixed in the ram, so we need class object to call a non-static method. To call the method we need to write the name of the method followed by the class object name. \n  \n Class Java{\n Public static void learn(){\n }\n }\n // creating object\n Java j = new Java();\n J.learn();\n@Amita\nIn static method, the method use compile time or early binding. For this reason we can access static method without creation a instance.    \nIn non-static method, the method use runtime or dynamic binding. So that we cannot access a non-static method without creation a instance. \n@Amita\n  \n  \nIn static method, memory allocation happens only once, because the static keyword fixed a particular memory for that method in ram. So when the method is called every time in a program, each time that particular memory is used. For that reason the less memory is allocated.\n  \n  \nIn non-static method, here memory allocation happens when the method is invoked and the memory is allocated every time when the method is called. So much memory is used here.\n\n@Amita\n\n\n Methods/Functions:\n\nWhat is Method?\nA method is a block of code which only runs when it is called. You can pass data, known as parameters, into a method. Methods are used to perform certain actions, and they are also known as functions. Methods can be called once or multiple times but it can return only one value.\n*User cannot create one method inside another method.(Nested Method/Method within Method)\nEx. public void testMethod(){\n}\n@Disha\nHow to call methods?\nTo call Non-static method, we have to create a object of the class then method should be called.\nEx. public class TestClass{\n                      public void testMethod(){\n         }      \n         public static void main(String[] args){\n                    TestClass test= new TestClass();\n                     test.testMethod();\n        }\n}\n@Disha\nReturn values\nvoid : void cannot return anything.\nString: String return String.\nInt: int return integer value.\n\nSome Input and some Return\npublic int addMethod(int a, int b){\n            int z=a+b;\n            return z;\n}\n@Disha\nWhat is difference b/w parameters and arguments?\nA parameter is what appears in the definition of the method, declared within parentheses following the method/function.\nAn argument is the instance or value passed to the method during runtime. Please see example below\n@Thrishna\nWhat is the difference between parameter and argument - example\npublic class Calculator{\n       public int addMethod(int a, int b){\n            int z=a+b;\n            return z;\n}\n        public static void main (String[] args){\n            Calculator cal= new Calculator();\n            int s= cal.add(10,15); \n} }\nHere, addMethod(int a, int b) -> int a, int b are parameters.\ncal.add(10,15) -> 10,15 are arguments.\n@Disha\nMain method:\npublic static void main (String[] args){\n}\nMain method cannot return anything so it always a void.\nAlso static method cannot be called that's why main method is static\n@Disha\n\n\n@ShraddhaGoel\n*--\n\nMethods/Functions\n\n\n\n\n\n\n\n\n\n\n\nArguments\n\n\nParamenter\nA Pgm which can be reused again and again is called as method/Function\n\nA Method/Fuction can be called Multiple times\n\nA Method/Function Cannot return Multiple Values at the sametime\n\n\nstatic void myMethod('Sam','25')\nactual value u r passing (10,20) in a function/Method\n\nstatic void myMethod(String fname, int age)\n\nwe use static when we have common property value\n\nStatic methods and static variables photocopy  are never given to object\n\nThere is a seperate memory allocation for static methods and static variable in common memory Allocation/permanent generation before jdk1.8 it was metaspace.\n\n@Sudha\nTypes of Functions:\n\n*No input and no return :  means this function do not take and any input and cannot return any value.\nEx: public Void test(){\nSystem.out.println(\"test method...\");\n\n2. No Input but some return\n\nReturn type: Int\n\npublic int getnumber(){\nSystem.out.println(\"get number\");\nint a=100;\nint b=200;\nint c=a+b+500;\nreturn c;\n\n3.Some Input and some Return type\npublic int add(int a, intb)\n{\nsystem.out.println(\"add method \")\nint z=a+b;\nreturn z;\n\npublic static void main( string[] args)\nMethodconcept obj=new Methodconcept;\n{\nobj.add(10,20);\n}\n@Sudha\n\nA method must be declared within a class\n\nTo call a method :  write the method's name followed by two parentheses () and a semicolon;\nEX: MethodConcept obj=new MethodsConcept();\nex:-obj.test()\n\nTo call all the call Method, we have to create an Object of the class \nobj.test();\n\nThese Methods are called non static Methods\n\nA method can also be called multiple times\n@Sudha\n\nPublic static void main(string arg[])\nvoid means that this method does not have a return value\n\n\nMethod Concept\n\n\n                                        \n                                 \nBasic Rules to create a method\n\nMethod can also be called as function\n\n1.  We cannot create a function inside main method.\n2.  Function cannot return multiple values the same time.\n3.  We cannot create duplicate functions inside a class.\n4.  Function name should be written as \na) If single word -Start name with first small letter\n       e.g public void test()\n  b) If muliple words-  1st name should start with small letter and others in caps(camelCasing)\n         e.g public void testSelenium()\n@Mohini\n\nArray Concepts:\n\n\n1.What is the difference between Array and Array List.\n1.The main difference between Array and Array List is that the former is static and the later is dynamic. We cannot change the size of the Array once created . \n2.ArrayList can grow and increase its size automatically. It grows its size to accommodate new elements and shrinks the size when elements removed.\n3.Java ArrayList allows duplicate and null values.\n4.Array allows both primitive data types and Objects but ArrayList supports only Objects.\n5.Since ArrayList cannot be created for primitive datatypes, members of ArrayList are aways references to objects at different memory locations.\n6.Therefore,in ArrayList actual objects are never stored at contiguous locations only references of the actual objects are stored at contiguous locations.\n8.Array elements are always not in order, were as the arraylist will follow always the order for storing the elements in the list.\n9.To use the arraylist you need to import it from java libraries, were as you can use array directly by specifying the datatype and arraysize.\n\n@RAJI\n\n7.Length of the ArrayList is provided by the size() method while each object has length variable which returns the length of the array.\n10.We can insert elements in array list object using add() method while in array we insert using assignment operators.\n@RAJI\nArguments and Parameters\nArguments are the values passed to a function (where ever it is invoked).\nParameters are the signatures of the function.\nMethods can be called multiple times.\n\n\n@Raji\n\n\nArray basics \n@Abhineet\nArrays :\nArrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.\nArray is a collection of similar types of data.\nEx: storing marks of 5 students:\nint [] marks=new int[5]; =>[data Type[] ArrName;]\nint[] marks={100,70,80,90,35} - \n\nArray length:\nArray have a length property which gives the length of the array:\nusing for loop we can find out the length of the array:\nfor(int i=0;i<marks.length;i++)\n                 {\n                   System.out.println(marks[i]);\n                   }\n for -each loop in java:\nArray elements can also be traversed as follows:\n                   for(int element:Arr)\n             {\n                 System (element);\n             }                - print all the elements.\n                      \n\n1.  Fixed length: Once an array is created, we cannot change its size. So consider using arrays when the numbers of elements are known and fixed. Otherwise, we should consider using another dynamic container such as ArrayList.\n2.      Fast access: It’s very fast to access any elements in an array (by index of the elements) in constant time: accessing the 1st element takes same time as accessing the last element. So performance is another factor when choosing arrays.\n3.      An array can hold primitives or objects.\n4.      An array of primitives stores values of the primitives.\n5.      An array of objects stores only the references to the objects.\n6.      In Java, the position of an element is specified by index which is zero-based. That means the first element is at index 0, the second element at index 1, and so on.\n7.      An array itself is actually an object.\n              \n\nConcept\nDescription\nExample\nArrayList\nIt is a dynamic array for storing the elements. It is like an array, but there is no size limit. We can add or remove elements anytime.\n@Padma\nnon-generic arraylist  \nArrayList student=new ArrayList();\nstudent.add(123);\nstudent.add(“Shiva”);\nstudent.add(25000.00);\nstudent.add(false);\n\ngeneric arraylist\nArrayList<String> color=new ArrayList<String>();\ncolor.add(\"white\");        color.add(\"black\");   \n color.add(\"yellow\");    \n color.add(\"green\");    \n\nPrinting the arraylist object   \nSystem.out.println(color);  \n\nTraversing list through the foreach loop \nfor(String color2:color)  {\n        System.out.println(color2); \n} \n\nUsing the get method and the  for loop\nfor (int i = 0; i < al.size(); i++) { \n  \n            System.out.print(al.get(i) + \" \"); \n        } \n\nadd(int index, Object element)\nThis method is used to insert a specific element at a specific position index in a list.\ncolor.add(0, \"Green\");\nadd(Object o)\nThis method is used to append a specific element to the end of a list.\n\n\ncolor.add(\"Red\");\nget(int index)\nReturns the element at the specified position in this list.\ncolor.get(3)\nsize()\nReturns the number of elements in this list.\ncolor.size();\nclear()\nThis method is used to remove all the elements from any list.\ncolor.clear();\ncontains(Object o)\nReturns true if this list contains the specified element.\nboolean b = color.contains(\"Black\");\n if (b)\n   System.out.println(\"ele exists\");\n  else\n System.out.println(\" no such ele exists\");\nset(int index, E element)\nReplaces the element at the specified position in this list with the specified element.\ncolor.set(0, \"Yellow\");\nremove(Object o)\nRemoves the first occurrence of the specified element from this list, if it is present.\ncolor.remove(2);\nCollections.swap(aL,fromIndex,ToIndex)\nTo swap\nCollections.swap(color, 1, 2);\nCollections.sort(aL)\nTo sort arraylist in ascending order\nCollections.sort(color);\n\nCollections.reverse(aL)\nTo sort arraylist in decending order\nCollections.reverse(color);\nsubList?(int fromIndex, int toIndex)\nReturns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.\nList<String> c3 = color.subList(0, 3);\ntrimToSize()\nThis method is used to trim the capacity of the instance of the ArrayList to the list’s current size.\ncolor.trimToSize();\n\nShort Cut key:\n\ncontrol+shift+F\nformatting\n@NaveenAutomationLabs\n select and ctrl+/\n\nselect and ctrl+shift+/\nfor comment //\n\nfor comment/*neelam*/\n@NaveenAutomationLabs\n\nctrl+space\n\nright click -source\nfor constructor to choose\nsystem.out.println\nto generate constructor\n@NaveenAutomationLabs\n\nctrl+shift+o\nto import packages\n@NaveenAutomationLabs\n\nfunction f6 \nto execute debug step\n@NaveenAutomationLabs\n\n/** enter\nto add documentation for customized method\n*that description will reflect when we mouse hover the method(when it is called)\n@NaveenAutomationLabs\n\n\n\n\n\nArray\n*An array is a collection of similar types of data which stores a fixed-size \n*It can be primitive data types like int, char, double, byte, etc. or Java objects\n@nidhi\nCreating Array Variables\nSpecify the type of array the variable can reference: \n\n*Int Array:\n       int i[]  = new int[10];\n*Double array: \n       double i[]  = new double[10];\n*Char Array: \n       char i[]  = new char[10];\n*String Array:\n       String i[]= new String[10];\n\n*We can also create an array with values in the same line:\n      int[] i = {1, 2, 3, 4, 5};\n@nidhi\nHow to find length of array\nSystem.out.println(i.length);\n@nidhi\nHow to Access Elements of an Array in Java?\ni[0]= 1;\n@nidhi\nStatic Array \n*1 Dimensional Array: \n         - single dimensional array java.\n*2 Dimensional Array:\n         -  Data stored in Rows and Columns\n         - Used in testNg with data provider with         \n            selenium +  Datadriven Testing\n         - 2D array can be printed with the help of      \n            Nested For Loops\n*Object Array \n       - stores an array of object\n       - Stores diff types of data with static array\n       - to use diff types data, we need to use Object  \n          static array:\n@nidhi\nCreating Array Variables for Static Array\nExamples:\n*Dimensional Array: \n       int i[]= new int[10];\n*2 Dimensional Array:\n        int i[] []= new int[10][10];\n*Object Array:\n       Object ob[]= new Object[5];\n       \n@nidhi\nStatic Array limitations\n*We need to mention the size of the array. Fixed length.\n*Chance of memory wastage.\n*To delete an element in an array we need to traverse through out the array so this will reduce performance.\n@nidhi\nStatic Array Advantage\n*We can access any element randomly by using indexes provided by arrays.\n*Array can store many number of elements at a time\n@nidhi\nTime Complexity\n*The amount of time taken by an algorithm to run\n*How much time in terms of performance the code will take to execute \n@nidhi\nTypes of time complexities in Big O notation \n\n*\n1. Constant time – O (1)\n     - the runtime will always be the same.\n2. Linear time – O (n)\n     - when the running time increases linearly with  \n        the length of the input\n     - Single loop come \n3. Logarithmic time – O (log n)\n     - Best use in binary search or data structures \n     - Its always better in terms of performance \n4. Quadratic time – O (n^2)\n     - the running time increases non-linearly (n^2)    \n        with the length of the input.\n     - Generally, nested loops come under this time \n       complexity\n\n@nidhi\n\n\n\n\n\nArray\nArrayList\n\nSize\nArray is static in size.\nArrayList is dynamic in size.\n@Padma\nDeclaration\n  dataType arr[]= \n new datatype[size]; \nex:int arr[] = new int[10] \nArrayList<Type> arrL = new ArrayList<Type>();\nEx: ArrayList<String> aL= new ArrayList<String>();\n@Padma\nSize specification\n        \n\n \nIt is mandatory to provide the size of an array while initializing \n        \nArrayList  can be created without specifying its size.\n@Padma\nThey can hold\nAn array can store both objects and primitives type.\nWe cannot store primitive type in ArrayList. It automatically converts primitive type to object.\n@Padma\nGenerics\nWe cannot use generics along with array\nString s[]=new String[4];\ns[0]=”ram”;\ns[1]=”sri”\nArrayList allows us Generics\nArrayList<String> ar= new ArrayList<String>();\nar.add(“sai”);\n@Padma\nHow to get size?\nlength variable used to denote the length of an array.\nsize() method to determine the size \n@Padma\nHow to add elements?\nadd elements in an array by using the assignment operator.\nadd() method to add elements in the ArrayList.\n@Padma\nType safe?\nOnly allows similar data type \nint arr[] = new int[10] \nint arr[1]=10; //allowed\nint arr[2]=”Ram”//not allowed\nAllows similar as well as different data types\nArrayList ar = new ArrayList();\nar.add(100); //allowed\nar.add(”Ram”);\n//allowed\n@Padma\nIndex\n Lowest index=0\nHighest Index=length-1\nLowest index=0\nHighest Index=size-1\n@Padma\nPrinting\nArray elements  cannot be printed directly by using follow Sytem.Out.Println(arr)\nOP:address of arr\nArrayList elements  can be printed directly by using follow Sytem.Out.Println(arrList)\n@Padma\nIteration\nFor loop or forEach can be used to iterate elements\nFor loop or forEach can be used to iterate elements\n@Padma\n\n\nClass\n\n\nIs a collection of Objects \nBlueprint or template to create an Object\n@Sudha\n\nObject\n\n\nResiding on the Right Hand Side\nemployee e1=new employee();\neg:new employee()\ne1 is Object Reference\n\"without object reference also we can declare the object\" but it's not a good practise\n\nObject is always created inside Heap Memory\nObject Reference is always stored inside stack memory\n\nVariables photo copy in the class template is given to  Object in Heap Memory\n\nObjects are created in Main Method\n@Sudha\nNull reference \n\n\nif object is pointing to null - then  null pointer exception is thrown\nWe should never create an object without reference\n@Sudha\nGarbage Collector\n\n\nIt clears the objects inside heap memory having no reference and null reference  from the memory\n\nGC cannot take decision by its own, JVM will monitor and calls the GC sends instruction to GC and then GC will destroy the Objects with no references and Null References.\n\nCall GC Explicity - System.GC(), but cannot take decision. GC will take instruction from JVM if it can delete the objects with no Reference and Null References.\n\nGC destroys only the HEAP Memory\n\nStructure - 3 sections of HEAP Memory\nYoung Generation(objects are created here, and increased depending on number of objects,when this gets full.. then will be moved to Surviour 1 and Suvivor 2)\nSurvivor 1\nSurvivor 2\n\n\n@Sudha\nArrayList Concept:\n\nWhat is ArrayList?\nArrayList is a class which is uses the dynamic array to store an element. It is like an array but no size defined. Default size of ArrayList is 10 but it can be extendible. It is more flexible then static array.  It is default class which is available in Java.util package.\nThe ArrayList class is similar to an array, but it automatically adjusts its capacity as you add and remove elements, without your needing to write any code.\nIt maintains the indexing(order)\nHow can we define? --- .This is an example of raw-Arraylist.                     \nArrayList ar=new ArrayList();\nWhen we create an object of a class at that time Vc(Virtual capacity)-10 created by default and when we add any value in the list that will be Pc(Physical capacity)\n@Disha\nHow can we check current size of ArrayList?\nArrayList ar=new ArrayList();\nar.add(5); ar.add(10);ar.add(20);\nar.size(); \nIn static array,  length shows current length of an array and in ArrayList size shows current size of the ArrayList.\n@Disha\nGenerics in Arraylist\nParameter pass  as per data types.\nEx. ArrayList<Integer> marks= new ArrayList<Integer>();\nArrayList<String> countries= new ArrayList<String>();\nArrayList<Double> salary= new ArrayList<Double>();\n@Disha\nBlank list in ArrayList\nArrayList<String> countries= new ArrayList<String>();\nSystem.out.println(countries);\nOutput: []\n@Disha\nBasic ArrayList and then Inserting,swaping, removing, updating an element\nBasic ArrayList:\nArrayList<String> countries= new ArrayList<String>();\ncountries.add(\"USA\");\ncountries.add(\"India\");\ncountries.add(\"Mexico\");\n\nInsert element on 2nd Index:\ncountries.add(2, \"Nepal\"); O/P: [USA, India, Nepal, Mexico]\nUpdate element Mexico to Russia:\ncountries.set(3, \"Russia\"); O/P :[USA, India, Nepal, Russia]\nSwaping element for USA to Nepal\nCollections.swap(countries, 0, 2); O/P:[Nepal, India, USA, Russia]\nRemoving an element Nepal:\ncountries.remove(0); O/P:[India, USA, Russia]\n@Disha\nWhen element not present in arraylist and try to get it?\nException : INDEXOUTOFBOUNDException occurs\n*Ex. ArrayList<String> countries= new ArrayList<String>();\n*countries.add(\"USA\");\n*countries.add(\"India\");\n*countries.add(\"Mexico\");\n*If... countries.get(4); then exception\n*\n@Disha\nWhat is Array literals?\nWhen we have fixed array elements/values whcih won't be changed that time we can use Array Literals.\nEx. int marks[]={65,73,45,24,78};\n@Disha\n\n2D Array Concept:\n2D Array Syntax:\n   int dd [] [] = new int [3] [4]; \n // Here, 3 indicates length of Row, 4 indicates length of column //\n  \n Ex: 00 01 02 03\n      10 11 12 13\n      11 12 13 14\n  \n For (int row=0;row<dd.length;row++){         // Rows always increase\n          For(int col=0;col<dd[0].length;col++) // Columns are always constant  \n }\n   // Columns are always constant \n Always add [0] rows when try to get the length of column because 0 the row will always present in any equation. There may be chance of first or second rows not present \n Rows are always constant so we can provide [10] 10 th row as well if it is present \nLength method use to check the length of the array\n- Indexes are based on rows and columns\n     For Loop \n   For (int row = 0; row<=3;row++){  // outer loop \n For(int col =0; col<=4,col++) // inner loop \n System.out.print(row+\"\"+col+\" \");\n }\n System.out.println();\nFor Row = 0, inner loop will be executed for 4 times ( Once inner loop executed entirely then the value of row will be increased to 1 )\n  \n Row = 0 =00\n                =01\n                =02\n                =03\n  \n @Amita \n      \nString x[][] = new String[3][5];\n System.out.println(x.length);// 3 -- total no. of rows = 3\n System.out.println(x[0].length); //5 --total no. of columns = 5 \n    \n@Amita \n   \n\n\n\n     Time Complexity\nMeans how much time in terms of performance your code will take\n  \n Int i=10; // 0(1)\n System.out.println(i);\n  \n Int j=20; //0(1)\n System.out.println(i+j); //0(1)\n  \n Int n =10;\n For (int i==1,i<=10;I++){\n System.out.println(p);\n }\n //1+ n+n+n ==1+3n == 3n ==n====0(n) \n //1+3n is a linear equation\n  \n  \n  \n   How many time this line of code will be executes - It will be executed only once\n //0(1)  -- BIG 0 Notation-- time complexity\n  \n  \n  \n  \n   // n means total number of execution \n //0(n) -- \n  \nSingle for loop always represent linear graph which is 0(n)\n  \n@Amita  \n      \nfor(int h = 0; h<=9; h++) {\n    for(int g =0; g<=9; g++) {\n System.out.print(h+\"\"+g+\" \");\n  \n //(1+n+n)(1+n+n+n)+n\n //(1+2n)(1+3n)+n== 1+3n+2n+6n^2+n ==6n^2+6n+1 ==6(n^2+n) ==n^2+n\n //n(n+1) == n^2 = 0(n2)\n //quadratic equation\n  \nTwo Inner loops will always represent \n 0(n2)\n  \n  \n@Amita    \n \n  \n      \n   for(int h = 0; h<=9; h++) {\n for(int g =0; g<=9; g++) {\n      for (int u=0;u<=9,u++){\n System.out.print(h+\"\"+g+\"\"+u+\" \");\n  \n //(1+n)(1+n)(1+n) ==> 1+n+n^3 ==> n^3 --> O(n^3)\n  \nThree inner loops will always represent \n 0(n3)\n@Amita\n  \n\n\nArray Concept:\n\nStatic Array : Features\n*To store similar type of data\n*Size of the array is fixed\n*Index based\n*Lowest Index will be 0 always\n*i.length => Gives Array Size\n*Negative index is not possible in Java\n*When value is assigned more than array size, java will throw \"ArrayIndexOutOfBounds Exception\"\n*When no value assigned to any PRIMITIVE datatype array variable, default value of the datatype will be printed\n*When no value assigned to any NON-PRIMITIVE datatypes, NULL value will be printed\n@Monisha\nStatic Array : Limitations\n*If size is more and data is less, Wastage of memory\n*If size is less and data is more, Not enough memory\n*Stores only similar datatypes\n@Monisha\nObject Array : Features\n*To store different type of data\n*Size of object array is fixed\n@Monisha\nTwo Dimensional Array : Features\n*Data stored in Rows and Columns\n*Used in Datadriven Testing\n*2D array can be printed with the help of Nested For Loops\n\nExamples : \nStatic Array:\nint i[] = new int[3]; //Syntax\ni[0] = 10; // Assigning Values\ni[1] = 20;\ni[2] = 30;\n\nObject Array:\nObject ob[] = new Object[3]; //Syntax\nob[0] = \"Tom\";\nob[1] = 25;\nob[2] = 'M';\n\n2D Array:\nint dd [] [] = new int [3] [4]; \n// Here, 3 indicates length of Row, 4 indicates length of column //\n\n@Monisha\n\nPrimitive Datatypes : Default Value\n*byte => 0\n*short => 0\n*int => 0\n*long => 0l\n*float => 0.0f\n*double => 0.0\n*boolean => False\n*Char =>  [Space]\n\n@Monisha\nNon Primitive Datatypes : Default Value\nNULL\n@Monisha\n\n\nTopic: ARRAY   \nAuthor:Shibani P.   \n\n                   Explanation\n  @Shibani\n*Arrays  are linear data Structure \nArray holds data in  contiguous memory location.\n*Int Array needs 4 byte for each value in memory.\n*Char Array takes 2b each and so on.\n\n*\n\n*Array contains elements of  same data type \n*Array of integer can contain ONLY int\n*Array of char  can contain ONLY char etc.\n*Array of double CANNOT hold int.  \n@Shibani\n*Array declaration  \n int[] arr = new int[5]; \n int arr[];\n*We can declare size of an array during declaration\n*or we can create an empty array and add values later to it \n*\n \n\n*Arrays are ALWAYS fixed sized. \n\n*We can not add or delete memory allocation of an array set it to default value \n*When element is deleted it stores default value in its place ,but index remains same \n@Shibani\n*Array stores elements at 'Index'es .\n*Start index is always 0 \n*Last index +1 = length of Array\nExample :\n*\n\n\n\n*Array  can be of Objects  \n*String is a class\n*Array of String is also an array of objects of String class\nClass TestArry{\nPublic static void main(String args[]){\nTestArry obj1=new TestArry();\nTestArry obj2=new TestArry();\nTestArry obj3=new TestArry();\n\n TestArry arr[]= new TestArry[3];\n  arr[0]= obj1;\n  arr[1]= obj2;\n   arr[2]= obj3;\n}  \n    }\n@Shibani\n\nString arr[]= new String[3];\narr[0]=\"This\" ;\narr[1]=\"is\" ;\narr[2]=\"Shibani's Notes.\" ;\n\n\n*length : returns size of array\n\n\n@Shibani\n*To iterate Array use for loop \n(Other loops can be used , but most effective is for-loop)\nWhen we know the no.of iterations/pattern  FOR-LOOP is used. \nWithin method\n-----------------------------\nfor(int i=0;i<arr.length;i++)\n{System.out.println(arr[i]);\n}\n\n*Use for-each/enhanced-FOR loop to iterate\nint arr[]= new int[4];\nfor(int i: arr){\nSystem.out.println(i);\n}\n\n*When tried to iterate beyond boundary throws  'ArrayIndexOutOfBound exception'\n\n\n*Advantages of Array\n*Index are fixed hence Random access  is faster.\n\n\n\n\n\nStatic Array:\n\nWhy Array  concept is used in Java?\nArrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.\n@Disha\nHow to declare array?\nint i[]= new int[4];\nor\nint[] i=new int[4]; or int i[4]={10,20,20,40};\nWhere my length of array is 4. But array index always starts from 0. So, lowest index(Li) is i[0] and Hi is 3.  Array always starts from 0. No negative indeximg is allowed.\nlength of array = Hi+1. In this case 3+1= 4\n@Disha\nHow to provide array values?\nint i[]=new i[4];\ni[0]=10; i[1]=20; i[2]= 30; i[3]= 40;\n@Disha\nWhat exception will you receive when integer index is not available?\nEx. System.out.println(\"Print \" +i[4]);\nIt will throw ArrayIndexOutOfBoundsException\n@Disha\nHow can we use for loop for print all array values?\nfor(int k=0;k< i.length;k++){\n               System.out.println(i[k]);\n}\n@Disha\nCan we create array for all primitive and non-primitive data types?\nYes we can create array for all data types. Ex. below\ndouble d[]= new double[4];\nchar c[] = new char[2];\nString lang[]= new String[];\n@Disha\nArray limitations\n*Array size is fixed.\n*If you have more segments but data is less then wastage of memory.\n*If you have less segments and data is more then no segments to add the data.\n*It can store only similar types of data.\n@Disha\nHow can we create an array of different data types with static array?\nEx. Emp details: Name,age,'M/F', 34.33, true;\nObject ob[]= new Object[5];\nob[0]=\"Joan\"; ob[1]=32; ob[2]='M', ob[3]=34.33; ob[4]=true;\n@Disha\nHow can we use for loop for print all this array values?\nfor(ob n=0; n<ob.length;n++){\n             System.out.println(ob[n]);\n}\n @Disha\nWhat will you receive when boolean, char, String index is not available?\n        \nFor boolean-> if index not available then default value will be false.\nFor Char-> if index not available then default value will be blank\nFor String/any non-primitive-> if index not available then default value will be Null\n@Disha\n\n\nFor loop and For each loop:\n\nFor loop example\nfor(i=0;i<=10;i++){\n           System.out.println(i);\n}\nor\nfor(int p=0;p<lang.length;p++){\n            System.out.println(lang[p]);\n}\n@Disha\nFor each loop\nfor(int i:10){\n        System.out.println(i);\n}\nor\nfor(int p:lang){\n        System.out.println(lang[p]);\n}\n@Disha\n\n       Topics\n           Details\n       Written by\nData Types\n\n\n\n\n\n\nNote:- \n-> Everything in Java is object.\n->references can not be duplicate in a class..,\nvalues can be... \n*Two type of data types\n*Primitive and non primitive\n*Primitive - defined by the programming language\n*Non primitive - defined by the programmer, called as reference variables as well.\n*Primitive data types\n(i) Boolean type : \nSyntax : boolean  = true/false\nDefault value =false.\n(ii) Numeric type : \nIntegral type:\n*-> Integer : byte, short, int, long\n*byte: \nSyntax : byte reference = number;\nSize : 1 byte = 8 bits\nrange : -128 to 127\n2.  Short:\nSyntax: short reference = number;\nSize : 2 byte = 16 bits\nrange : -32768 to +32767\n3. int:\nSyntax: int reference = number;\nSize : 4 byte = 32 bits\nrange : -2147483648 to 2147483647\n4. long:\nSyntax: long reference = number;\nSize: 8 bytes = 64 bits\nrange : -2^63 to +2^63-1\nFloating type : float, double\n*Float : \nSyntax: float reference = \nnumber f;\nSize: 4 bytes = 32 bits\nrange: after . can take up to 7 digits.\n2. Double: \nSyntax: double reference = number;\nSize: 8 bytes = 64 bits\nrange: after . can take up to 16 digits.\n (iii) character type.\nSyntax: char  reference = ' -' ;\nnote:- char should be written in single quotes.\nchar is a keyword.\nSize: 2 bytes = 16 bits.\n@ShraddhaGoel\n\n\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n               @Anusha\n\nString \n\n\n\n\n\n\n\nString Concatenation\n\nTo remember:-\nexecution always happen from left to right \n\n\n\nArithmetic Operators:-\n\naddition  +\nSubtraction  -\nMultiplication  *\nDivision  /\nModular   % (remainder after division)\n-> string is not a data type.,\nstring is a class, which is already available in Java (pre-defined class) \n-> String S = \"  \" \nalways to be written in double quotes only.\nand default value of string is Null.\n->  add two values\n             or\n      merge two values\nex:- String x = \"Hello\";\n       String y = \"Selenium\";\nSystem.out.println(x+y);\no/p:- HelloSelenium\n\nwhenever we are doing arithmetic operators in character we want to follow the ASCII values.\nASCII TABLE:-\na to z -> 97 - 122\nA to Z -> 65 - 90\n0 to 9 -> 48 - 57\n\n\n\n\n\n\n\n\n\n\n\n               @Anusha\nIncrement & Decrement Operators\n\n\n\n\n\n\n\n\n\n\n\nByte Concept:-\n\n\nByte gives octal value if it starts with 0\n1.Post increment:-   i++\nassigning the value, then increase the value by 1 \n2. Post decrement:-   i--\nassigning the value, then\ndecrease the value by 1 \n 3. Pre increment:-    ++i\nincrease the value by 1, then assign the value\n4. Pre decrement:-   --i\ndecrease the value by 1, then assign the value\n\nfor example:-\nbyte b =065;\nthen print the o/p value:- 53\n->here 0 is octal number \nso that we want to convert it in to octal to decimal :-\n065 = \n(0*8^2)+(6*8^1)+(5*8^0) = 53\n\n\n\n\n\n\n\n\n\n\n\n                   @Anusha\nConditional Operators\n== -> equal to equal to\n< -> less than\n > -> greater than \n <= -> less than equal to \n >= -> greater than equal to \n !=  -> not equal to\n\n\n\n\n\n                @Anusha\nLoops Concept\n*Whileloop:-\nSyntax:-\nwhile(condition) //checks the condition first \n{ \nstatements; //if the condition is satisfied, statement will be executed\n}\n\n2. Dowhileloop:-\nSyntax:-\ndo \n{\nstatements; //Executes the statement first and then checks the condition.\n}while(condition);\n\n3. Forloop:-\nSyntax:-\nfor(Initialization or Declaration ; condition; incre/decre) //checks the condition and when met, it passes the value to statement and then increments the value.\n{ \nstatements; \n}\n           \n\n\n\n\n\n\n*\n\n              @Anusha\n*\n@manisha     Operator    \noperator\n\nUSe\nArithmetic     \n+ ,-,*. /,%\n\nrelational(comparison or conditional)\n,<,>,<=,>=,!=\n== ,.equal()\n        \n\n\nboolean   and numeric ==     ,int a=1;int b=1;\n                                                  Syso(a==b);\nString      .equal()         s1=\"maya\" ,s2= =\"name\"\n                                          Syso( s1.equal(s2)\nlogical\n&&(short shortcircuit) , \n|| ; !\n\nincremental/decremental(pre/post)\n++ ,--\n\nconcatenate\n+\nString .:-  join 2 string        String s1=\"my\"\n                                               String s2=\"  name\"\n                                               Syso(s1+s2)\n                                               o/p :-my name\ninteger:- addition         int  a=2; int b=3;\n                                      Syso(a+b);  o/p:-5;\nAssignment \n\n\n\n\nIMPORTANT NOTES\nWRITTEN BY\nJava is case-sensitive\n@Raji\nComment does not occupy any space\n@Raji\nDefault values of Primitive data types:\nInteger     0\nBoolean   false\nCharacter Blank/Empty\nDouble  0.0\nDefault value of non-primitive: Null like Object,String\n\n@Raji\nLimitations of Arrays\nArrays are static:Size is fixed,Possible memory wastage.\n@Raji\nArrayIndexOutOfBoundException:\nThe array index is either negative or grater than or equal to the size of the array.\n@Raji\nIn array we can store only similar type of data\n@Raji\n\n*Data Types:\n*\n*Topic Name       \n*Important Notes\n*Written By\n*primitive Datatype\n*\n*Boolean\n*Numeric type\n*      1.Char\n*      2. Integral\n*            1. Integer: (byte, short, Int, long).\n*             2. Floating-Point: (float, double).\n*boolean~1bit Default value is false\n*char=2 bytes because it supports UNICODE(Unicode Standard provides a unique number for every character, no matter what platform, device, application or language) and Language....default value is blank\n*1 byte=8 bits (-126->127)\n*short=2 byte\n*int=4 byte\n*long=8byte\n*float=4 byte(prefix (float) or suffix f)\n*double=8byte\n*\n*Character\n*if character used in any operational expression ex..+=/*..ascii value of the character is counted.\n*a-z=97-122\n*A-Z=65-90\n*0-9=30-39\n*\n*Non-primitive\n*String,  class , interfaces , Object ( where you needs to work with objects) Object is Parents class of all the classes which comes in Java.lang package which is by default package in Java.\n*\n*Default Value for any reference Variable is null.\n\n\n*@Vasanth J\n*\n*\n*\n*\n*Topic Names\n*Notes\n*Written By\n*Data Types\n*Primitive data types:\n*Boolean type: boolean \n*Numeric Type: \n*Character Type: char\n*@nidhi\n*\n*Boolean Type: Stores true or false values\n*      Size : ~ 1 bit = 1 bit ( around 1 bit )\n*@nidhi\n*\n*Integral type:           \n*       -> Integer  Type :\n*           - byte:  Stores whole numbers from -128 to 127\n*              Size: 1 byte = 8 bits\n*           - short:  Stores whole numbers from -32,768 to 32,767\n*               Size:  2 bytes = 16 bits\n*           - int: Stores whole numbers from -2,147,483,648 to         \n*                    2,147,483,647\n*              Size: 4 bytes = 32 bits\n*           - long: Stores whole numbers from   \n*                        -9,223,372,036,854,775,808 to \n*                          9,223,372,036,854,775,807   \n*\n*       -> Floating Type: \n*            - float: Stores fractional numbers take up-to 7 digits \n*               Size: 4 bytes = 32 bits\n*            - double: Stores fractional numbers take up-to 16 digits\n*               Size: 8 bytes = 64 bits\n*@nidhi\n*\n*Character Type: Stores a single digit (ASCII Value)\n*       Size: 2 bytes \n*\n*@nidhi\n*\n*Java Operators:\n*\n*Arithmetic Operator\n*Notes\n*Example\n\n*Basic operators \n*+ , - , * , /\n*Addition, subtraction, Multiplication, Division\n*x + y, x-y, x*y, x/y\n@Tony.\n*%  - Modulus\n*Modulus - Returns the division remainder\n*x % y\n@Tony.\n*++  (Increment)\n*Increases the value by 1\n*There are two increments :- pre increment and post increment.\n*\n*++x : Increments the value by 1 and then uses the variable. \n*\n*x++ uses the value and then increments the value by 1\n*x++, ++x\n*\n*ex: if x =1\n*sysout(x++); = 1\n*after out putting the value of x, the value of x is increased by 1. Hence the value of x is now 2. \n*\n*sysout(++x)=3 // here the out put is 3 as the value of x was 2 and then it was incremented by 1 before printing it out. \n*\n@Tony.\n*--  (Decrement)\n*Decrease the value of a variable by 1. There are two decrements :- pre decrement and post decrement.\n*\n*--x : Decreases the value by 1 and then uses the variable. \n*\n*x--: uses the value and then Decreases the value by 1\n*--x , x--\n*\n@Tony.\n*\nData Types:   \n*Data type specifies the size and type of the data.\n*                     Data types are divided in to two types.\n*                     1. Primitive Data Type: includes byte, short, int, long, float, double, boolean, and char.\n*                     2. Non-Primitive Data Type.\n*1.Primitive Data type: Primitive data type specifies the size and type of variable values. There are eight primitive data types.\nData Types\nDefault Value\n Size\n*Description\nWritten By\nbyte\n*0\n 1 byte\n*stores whole numbers from -128 to 127\n@Jyothi\n@Vasanth J\nshort\n*0\n  2 byte\n*stores whole numbers from  -32,768 to 32,767\n@Jyothi\n@Vasanth J\nint\n*0\n  4 bytes\n*Stores whole numbers from -2,147,483,648 to 2,147,483,647\n@Jyothi\n@Vasanth J\nlong\n*0L\n  8 bytes\n*Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807.  \n@Jyothi\n@Vasanth J\nfloat\n*0.0f\n 4 bytes\n*Stores fractional numbers.\n*Sufficient for storing 6 to 7 decimal or digit\n@Jyothi\n@Vasanth J\ndouble\n*0.0d\n 8 bytes\n*Stores fractional numbers Sufficient for storing 15 decimal or digit\n@Jyothi\n@Vasanth J\nboolean\n*false\n 1 bit\n*A boolean data type is declared with boolean keyword and can only take true or false values.\n@Jyothi\n@Vasanth J\nchar\nBlank/Empty\n 2 bytes\n*Stores a single character/letter or ASCII values. Character must be surrounded by single quotes like 'A' or 'C'\n*char is one digit value\n*char = 'aa' is not allowed\n*Why 2 bytes are given to char? - because it supports unicodes also that's why 2 bytes given to it.\n*Arithmetic operations on characters will be done on their 'ASCII' value\n@Jyothi\n@Vasanth J\n*\nIf else statement\n*     If(condition){\n* //code if condition is true\n* }\n* else{\n* //code if condition is false\n* }\n@Amita\nIf else if statement\n*     if (condition1){\n* //code to be executed if condition1 is true\n* }\n* else if (condition 2){\n* //code to be executed if condition2 is true\n* }\n* else if (condition3){\n* //code to be executed if condition3 is true\n* }\n* else{\n* //code to be executed if all the conditions are false\n* }\n@Amita\nSwitch Statement\n*     switch ( expression){\n* case value1:\n*  //code to be executed;\n* break;\n*  case value2:\n* //code to be executed;\n*  break;\n*  default:\n* code to be executed if all cases are not matched;\n* }\n@Amita\n\nJava_04_LoopsConcepts_For_While_DoWhile.mp4\nFor Loop \nFor(initialize; condition; increment/decrement)\n {\n Code here/ Logic here\n }\n    \n@Amita\nWhile Loop\nWhile(condition)\n {\n //logic here\n //increment or decrement\n }\nWhile loop will only execute if condition is true\nDisadvantage of while loop : It will generate infinite loop if you don't give incremental/decremental part\n@Amita\nDo.. while loop\n do\n {\n  \n// increment/decrement \n }while(condition)\nIt is same as while loop but in this loop code or logic will execute at least once. If the condition match then it will execute until condition met.\n@Amita\n  \n\n*\n*\n*String Concatenation - when it is required to join 2 or more strings.\n*String s1 = \"Hello\", s2 = \"  Selenium\";\n*System.out.println (s1+s2);\n*the result will be the concatenated string.\n*output will be  - Hello Selenium\n*Concatenation is possible with Strings,char,integer. Whether integer is concatenated or addition is performed depends on the placement of integer values with the next value. (Refer Note below)\n*NOTE - Execution happens always from left to right.\n* \n*Difference between == and .equals\n*== used for primitive comparison and .equals is used for non-primitive comparison\n*Ex. int a=5; int b=5;  Here we have to use == . Like a==b\n*Name n1= \"Peter\";\n*Name n2= \"Angela\"; Here we have to use .equals. Like n1.equals(n2); Which in this case return false.\n*Written By: @Disha\n*\n*2nd Feb 2021\n*Understanding BYTE concept\n*byte b = 65  \n*System.out.println (b)--------------(output= 65)\n*byte b = 065 \n*System.out.println (b)--------------(output = 53)\n*Note - Byte gives octal value if it starts with 0\n*065 = (0*8^2)+(6*8^1)+(5*8^0) = 53\n*Byte doesn't give ASCII value. ASCII value is only for datatype CHAR.\n*\n*Conditional Operators\n* int a = 10;\n* int b = 20;\n* System.out.println(a == b);\n*if (a == b) {\n*        System.out.println (\"Both are equal\");\n*}\n*Ques - What is dead code?\n*if (true) {\n*System.out.println(\"Hi\");\n*}\n*else(false) {\n*System.out.println(\"Bye.....\");\n*}\n*In above example, else code will not get executed. This is unreachable code. we are not giving any condition here for comparison. So always if condition will get executed. This code will not generate compile time error. But when we execute it, it will give a warning. This code is called as dead code.\n*\n*== is conditional operator; Strings cannot be compared with  == operator.\n*.equals is used to compare strings.\n*//WAP to compare two strings\n*        String s1 = \"Automation\";\n*        String s2 = \"Automation\";\n*        if (s1.equals(s2)) {\n*                System.out.println(\"Both are equal\");\n*        }\n*        else {\n*                System.out.println(\"Both are not equal\");\n*        }\n*\n*\n*-----------------------------------------------------------\n*another program try\n*public class StringCase {\n*\n*        public static void main(String[] args) {\n*                // TODO Auto-generated method stub\n*                \n*                String s=\"Selenium\";\n*                String s1=\"Selenium \";\n*                s.trim();\n*                if(s.equalsIgnoreCase(s1))\n*                {\n*                        System.out.println(\"Both are equals\");\n*                        \n*                }\n*                else\n*                        System.out.println(\"both are not equals\");\n*2]        }\n*\n*}\n*-------------------------------------------------------------------------------------------------------------------------------\n*if and if-else-if statements        \n*Using so many if statements in program is bad practice.\n*Using so many if-else-if statements is also considered as bad practice, because if there are 20 conditions for comparison and requirement matches on last condition, compiler will execute all above 19 if-else conditions unnecessarily. That's why Switch-Case statement is recommended.\n*\n*If case will check for each and every condition, though true condition is met.\n*If-Else will check for each and every condition until true condition is met. \n*Switch will check and pick only the true condition directly. We have break and default keywords used along with Switch.\n*----------------------------------------------------------------------------------------------------------------------------\n*Note - we cannot give boolean condition in switch statement.\n*boolean flag = true\n*switch(flag) ----------------------it is not allowed.\n*\n*Ques - write a program, to print browser is chrome when it is passed in any case (uppper, lower- should be case insensitive search)\n*Using if-else-if statement\n*public static void main(String[] args) {\n*                String browser = \"cHrOme\";\n*                if(browser.equalsIgnoreCase(\"chrome\")) {\n*                        System.out.println(\"Browser is Chrome\");\n*                }\n*                else if (browser.equalsIgnoreCase(\"IE\")) {\n*                        System.out.println(\"Browser is IE\");\n*                }\n*                else if (browser.equalsIgnoreCase(\"Safari\")) {\n*                        System.out.println(\"Browser is Safari\");\n*                }\n*        }\n*Write a program to ignore case in key using switch case statement\n*Stringbrowser = \"CHROME\";\n*switch (browser.toLowerCase()) {            \n*case \"chrome\":                  \n*System.out.println(\"Browser is Chrome\");                  \n*break;            \n*case \"ie\":                  \n*System.out.println(\"Browser is IE\");                  \n*break;            \n*case \"safari\":                  \n*System.out.println(\"Browser is Safari\");                  \n*break;             \n*default:                  \n*System.out.println(\"Browser not found\");                  \n*break;            }\n*\n*****************************************************************************************************************\n*Different conditional operators\n*&& - AND operator\n*II - OR\n*Both && and | | are called short-circuit operators because they don't evaluate the right-hand side if it isn't necessary. Evaluation of a logical expression exit in between before complete evaluation. && and II are also called Logical Operators.\n*Below are Equality and Relational Operators\n*< -less than\n*> - greater than \n*< = - less than or equal to\n*> = - greater than or equal to\n*! = - not equal to\n*\n Operators in java\nDetails\nWritten by\n Arithmetic Operators  : \n+(addition)  ,  - (Subtract) ,  *(Multiplication)  , / (Division) ,  % is called Modulus sign(remainder)\n@sejal\nRelational or Comparison Operators : \n==  ,   < , > ,    <=  , >=  , != \nIt always show Boolean Value while comparing two variable values : true or false\n@sejal\nLogical Operators :  \n|| (or) ,  && (and .It is also called Short Circuit operator) ,  ! (not negation)\n It is comparing between two Boolean values.\n&& = Both should be true then it's give true or vice a versa. If one true & other false then it gives false  \n || = Both true then it's give true or vice a versa. If one true & other false then it gives True  \n ! = it gives opposite Boolean value which original value assign to that variable.\neg: A = True then Answer = false\n      A = false them Answer = true\n@sejal\n   A                 B    (T= True , F = False)\nA && B      A || B      !A(look only A value not B for Ans)  !B\n                                 (!B Look only B Value not A )\n@sejal\n   TRUE       TRUE   \n  T                T             F(Look only A Value)                        F\n@sejal\n   TRUE       FALSE\n  F                T             F                                                        T\n@sejal\n   FALSE      TRUE\n  F                T            T                                                         F\n@sejal\n   FALSE     FALSE\n  F                F            T                                                         T\n@sejal\nIncrement & decrement Operators : \n++(add 1 in value)   ,  -- (less 1 in value)\n@sejal\nPre Increment : first increase by 1 then assign value to that variable\n   a=10; //11\n   b=++a; //11\n@sejal\nPost Increment : first assign value then increase the value by 1\n  a=10; //11\n  b=a++; //10\n@sejal\nPre Decrement : first decrease by 1 then assign value to that variable\n  a=10 ; //9\n  b=--a ; //9\n@sejal\nPost Decrement : first assign value then decrease the value  by 1 \n\na=10; //9\nb=a--//10\n@sejal\nAssignment operators : \n =  (This will use to assign value to variable)\n@sejal\n Note : please make changes if anything wrong.\n\n\n\nConditional Operators\nif ()\nelse\nif( only condition eg. x == y\n but Not allowed like  x=30 (it will show only boolean Value)){\nstatement;\n}\nelse{\nStatement;\n}\n\n@sejal\nDead code means\nif condition is true then condition is always satisfied and it execute if statement and not else or vice a versa.\nIf (true){              if(false){\nStatement;         Statement\n}                            }\nelse {                   else {\nStatememt;         Statememt;\n}                            }\n@sejal\nboolean flag =true;\nwe can write variable name in condition bz condition is depend on variable(not directly on value) and in future variable value might be change so it not give any error like dead code.\nif(flag){\nStatement\n}\nelse{\nStatement;\n}\n@sejal\nCompare String value \nCompare  Numeric value\nname mismatch with lower and uppercase\nuse .equals\nuse   ==\nuse .equalsIgnoreCase (this will not work when space given in value after or before. \n@sejal\nJava is Case Sensitive language\nWhile comparing value of two variables has minor difference like space , lowercase, uppercase, then it fail the condition & execute else condition.\n@sejal\n\n\n\n\n\n\n\nData Types\n\nTitle\n Explanation\n Written by\nSummery\n In Java, every variable and every expression has some type. Each and every datatype is clearly defined. \n Java is not considered as pure object oriented programming language because several OOP features are not satisfied by Java. Moreover we are depending on primitive datatypes which are non objects.\n There are total 8 primitive datatypes in Java from which 6 are numeric data types and 2 are non numeric. \n Numeric datatypes: \n 1. byte\n 2. short\n 3. int\n 4. long\n 5. float\n 6. double\n \n Non numeric datatypes: \n 1. char\n 2. boolean\n \n Except boolean & char, remaining datatypes are considered as 'Signed datatypes' because we can represent both positive & negative numbers using those datatypes.\n  @OmkarJoshi\nbyte\n Size: 1 byte (8 bits)\n Max value: +127\n Min value: -128\n Range: -128 to 127\n \n Syntax: \n byte b = 10; \n\nbyte is a best choice if we want to handle data in terms of streams either from file or from Network \n \n@OmkarJoshi\n short\n Size: 2 bytes (16 bits)\n Max value: 32767\n Min value: -32768\n Range: -32768 to 32767\n \n Syntax: \n short sh =100;\n @OmkarJoshi\nint\n Size: 4 bytes (32 bits)\n Max value: 2147483647\n Min value: -2147483648\n Range: -2147483648 to 2147483647\n \n Syntax: \n int i = 1000;\n \nint is most commonly used datatype in Java\n  @OmkarJoshi\nlong\n Size: 8 bytes (64 bits)\n Range: -2^63 to (2^63)-1\n \n Syntax:\nlong l = 100000; \n @OmkarJoshi\nfloat\n float is a floating point datatype. If we want 5 to 6 decimal places of accuracy then we should go for float. \n \n Size: 4 bytes\n Range: -3.4e38 to 3.4e38 (after . can take upto 7 digits)\n \n Syntax:\n float f = 12.33f;\n float f1 = (float)34.55; \nfloat f2 = 100;\n  @OmkarJoshi\ndouble\n double is a floating point datatype. If we want 14 to 15 decimal places of accuracy then we should go for double. \n \n Size: 8 bytes\n Range: -1.7e308 to 1.7e308 (after . can take upto 16 digits)\n \n Syntax:\n double d = 12.33;\ndouble d1 = 1.1;\n   @OmkarJoshi\nchar\n char always accept one digit value. \n char ch = 'a'; is allowed but, char ch = 'abc'; is not allowed.\n \n Size: 2 bytes (16 bits)\n Range: 0 to 65535\n  @OmkarJoshi\nboolean\nSize: N/A (Approx. 1 bit but it depends on Virtual Machine) \nRange: N/A but allowed values are 'true' & 'false'\n\nSyntax: \nboolean b = true;\n @OmkarJoshi\n \nClass and Objects:\nTopic Name        \nImportant Notes       \nWritten By\nClass\n*A class can be defined as a template/blueprint/category that describes the behaviour/state that the object of its type. \n*Example: Car is a class (blueprint) which can be used to create multiple Objects.\n*A class is a blueprint for the object. Before we create an object, we first need to define the class template. \n*class contains 3 class numbers objects, variables, methods, constructors also. \n@NaveenAutomationLabs\nObject\n*Object is an instance of a class.\nCar is a class having different properties: name, color, price etc..\n*With this Car class, multiple Objects can be created like Sedan, SUV etc..\n\n@NaveenAutomationLabs\nObject Creation\n*In order to create the Object, we need to use new keyword.\n*Ex: Car obj = new Car();\n*Car - Class Name\n*obj - Object Reference Name (Not the Object)\n*new Car() - is the Object\nNote: Object is always created inside the Heap Memory.\n@NaveenAutomationLabs\n\n\nArrayList \n\nTopic Name\nExplanation \nWritten by\nWhat is ArrayList ? \nArrayList is a class, which can be found in the java.util package. \n@OmkarJoshi\nSyntax\nWe can declare ArrayList as: \nArrayList arr = new ArrayList();\n\nBut this is not a best practice. Eclipse will show you warning that 'ArrayList is a raw type. References to generic type ArrayList<E> should be parameterized' so we need to write generic type for ArrayList\n\nSo syntax will be:\n\n//int data in arraylist\nArrayList<Integer> marks = new ArrayList<Integer>();\n\n//String arraylist\nArrayList<String> namesList = new ArrayList<String>();\n\n//double ArrayList\nArrayList<Double> salary = new ArrayList<Double>();\n\n//Object ArrayList : we can use it in case of mix type of data (int, String, double, boolean)\nArrayList<Object> ar = new ArrayList<Object>();\n@OmkarJoshi\nHow ArrayList behaves with respect to memory in Java?\n*For ArrayList, internally java manage static array of 10 virtual segments.\n*When you declare an ArrayList, java will allocated 10 virtual segments to ArrayList where physical segments = 0 \n*When you add first number/value in ArrayList then physical segment will increase by 1 and virtual segment will decrease by 1 \n*If we fill all values (10) then physical segments will become 10 but what will be the virtual segments? - Java will add 5 more segments in virtual segments for ArrayList.\n*If user pass 20 as parameter in ArrayList while declaring ArrayList, then after 20 values java will add 10 more virtual segments for that ArrayList.\n*If we print blank ArrayList, then it will always be 0. Virtual segments will never be considered for any methods operated on ArrayList. All methods of ArrayList works on physical segments.\n@OmkarJoshi\nHow to add values into ArrayList?\n//int data in ArrayList\nArrayList<Integer> marks = new ArrayList<Integer>();\nmarks.add(100);\n\n//String data in ArrayList\nArrayList<String> namesList = new ArrayList<String>();\nnamesList.add(\"tom\");\nnamesList.add(\"Tony\");\n\n//double data in ArrayList\nArrayList<Double> salary = new\nArrayList<Double>();\nsalary.add(10.22);\nsalary.add(200.00);\n@OmkarJoshi\nHow to get value at particular index from ArrayList? \nFor this we need to use get(index) method of ArrayList\n\nArrayList<Integer> marks = new ArrayList<Integer>();\nmarks.add(100);//0\n\nSystem.out.println(marks.get(0));\n\nif we write marks.get(1) then java will throw 'Index out of bounds' exception as there is no record added at position 1 so physical memory is not allocated to that position in ArrayList. \n@OmkarJoshi\nHow to remove value at particular index from ArrayList?\nFor this we need to use remove(index) method of ArrayList\n\nArrayList<String> linksList = new ArrayList<String>(5);\nlinksList.add(\"Home\");//0\nlinksList.add(\"Login\");//1\nlinksList.add(\"Contact us\");//2\nSystem.out.println(linksList);\nlinksList.remove(1);\nSystem.out.println(linksList);\n\nFinal output: [Home, Contact us]\n@OmkarJoshi\nHow to traverse ArrayList?\nWe can traverse ArrayList using for loop, for each loop, etc. \nex. : \nUsing for loop: \nArrayList<String> namesList = new ArrayList<String>();\nnamesList.add(\"tom\");\nnamesList.add(\"peter\");\nnamesList.add(\"naveen\");\n//traverse the arraylist : loop\nfor(int i=0; i<namesList.size();i++) {                      System.out.println(namesList.get(i));\n  }\n\nUsing for each loop: \nfor(String e : namesList) {\n         System.out.println(e);\n    }                    \n\n\n@OmkarJoshi\nHow to sort ArrayList?\nWe can sort ArrayList using Collections class of Java.\n\nArrayList<Integer> numlist = new ArrayList<Integer>();\nnumlist.add(40);//0\nnumlist.add(45);//1\nnumlist.add(20);//2\nnumlist.add(25);//3\nnumlist.add(50);//4\nCollections.sort(numlist);\nSystem.out.println(numlist);\n\nOutput: [20, 25, 40, 45, 50]\n@OmkarJoshi\n\nMemory Management in Java\n\nTopic Name\nExplanation\nWritten by\nWhat is the garbage collector? and how it works?\n*In C/C++, programmer is responsible for both creation and destruction of objects. But in Java, the programmer need not to care for all those objects which are no longer in use. Garbage collector destroys these objects.\n*GC do not start collecting garbage itself, JVM will always keep checking heap size. If heap gets full then JVM will call GC, and then GC will come into heap and destroy objects having no reference and having null reference. \n*Though GC destroys objects which have no reference and having null reference, we can call GC explicitly using System.gc(); method.\n*Calling the gc method suggests that the Java Virtual Machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for reuse by the Java Virtual Machine. When control returns from the method call, the Java Virtual Machine has made a best effort to reclaim space from all unused objects. There is no guarantee that this effort will recycle any of unused objects, reclaim any particular amount of space, or complete at any particular time, if at all, before the method returns or ever. \n* The call System.gc() is effectively equivalent to thecall: Runtime.getRuntime().gc(); \n*gc() method cannot take a decision, it will ask for permission to JVM.\n*Before destroying any object if we want to perform any action on object then we can use finalize() method. \n\n@OmkarJoshi\nWhat is Heap memory? \n*Heap memory is the run time data area from which the memory for all java class instances and arrays is allocated.\n*Heap memory has 3 sections-         \n*Young generation \n*Survivor 1        \n*Survivor 2 \n*All objects will get created in YG, once YG getting full then it will move to S1, some of them will get moved to S2 \n@OmkarJoshi\n\n\n","attribs":"*m4*5*6+1*lr|1+1*lr*qq*6+8*lr*qj*qk|1+1*8t*qj*qk|1+1*lr*qr*6+g*lr*qr*qq*6+6*lr*qr*6+1q*lr*ql*qk|1+1*lr*qr*6+16*lr*qq*6+3*lr*qr*6+1*lr*ql*qk|1+1*lr*6+r*lr*ql*qk|1+1*h3*ql*qk|1+1*h3+t*h3*ql*qk|1+1*h3+15*h3*ql*qk|1+1*h3+m*h3*ql*qk|1+1*h3+1j*h3*5*6+2*h3+i*h3*5*6+8*h3+8*h3*ql*qk|1+1*h3+3*h3*ql*qk|1+1*lr+9*lr*qm*qk|1+1*h3*qm*qk|6+6*h3*5*6+d*h3*qm*qk|1+1*gv*5*6+7*qj*r2|1+1*gv*2x*6+2m*ql*r2|1+1*19*2x*6+l*19*ql*r2|2+2*19*5*6+2c*19*ql*r2|1+1*19*5*6+1l*19*ql*r2|1+1*19+z*19*ql*r2|1+1*19*5*6+1r*19*ql*r2|1+1*19+t*19*5*6+n*19*ql*r2|1+1*gv*5*6+6*qm*r2|1+1*19*qm*r2|2+2*19*5*6+d*19*qm*r2|5+5*19*5*6+d*19*qm*r2|1+1*lr*qs*6+9*lr*qj*qn|1+1*lr*5+2b*lr*ql*qn|1+1*19*5*6+q*lr*ql*qn|1+1*19*5*6+d*lr*qm*qn|1+1*lr*qt*6+y*lr*qj*qo|1+1*lr*qt*6+7p*lr*ql*qo|1+1*lr*5*6+9*lr*qm*qo|1+1*lr*qj*qp|1+1*lr*qt*6+2y*lr*ql*qp|1+1*lr*qm*qp|1+1*lr|1+1*lr*qt*6+h*lr*qu*qv|1+1*lr*qt*6+1k*lr*qw*qv|1+1*lr*qt*6+2i*lr*qw*qv|1+1*lr*qt*6+m*lr*6*r1+p*lr*qt*6+46*lr*qw*qv|1+1*lr*5*6+9*lr*qx*qv|1+1*lr*qs*6+d*lr*qu*qy|1+1*lr*5*6+5*lr*6+1b*lr*qw*qy|1+1*lr*qx*qy|1+1*lr*qs*6+d*lr*qu*qz|1+1*lr*5*6+5*lr*6+1b*lr*qw*qz|1+1*lr*qx*qz|1+1*lr*qs*6+6*lr*qu*r0|1+1*lr*5*6+5*lr*6+1a*lr*qw*r0|1+1*lr*qx*r0|1+1*lr|1+1*lr*qs*6+8*lr*r3*r4|1+1*lr*5+s*lr*r5*r4|1+1*lr*5*6+7*lr*6+o*lr*r5*r4|1+1*lr+x*lr*r5*r4|1+1*lr+w*lr*r5*r4|1+1*lr+10*lr*r5*r4|1+1*lr*5*6+9*lr*r6*r4|1+1*lr*qs*6+i*lr*r3*r7|1+1*lr*5+24*lr*r5*r7|1+1*lr*5+1w*lr*r5*r7|1+1*lr*r6*r7|1+1*lr*qs*6+a*lr*r3*r8|1+1*lr*5+1t*lr*r5*r8|1+1*lr*5+8*lr*6+4*lr*5+t*lr*6+5*lr*5+8*lr*r5*r8|1+1*lr*r6*r8|1+1*lr*qs*6+8*lr*r3*r9|1+1*lr*5+1v*lr*r5*r9|1+1*lr+1z*lr*r5*r9|1+1*lr*5*6+i*lr*r5*r9|1+1*lr*5*6+j*lr*r5*r9|1+1*lr*5*6+a*lr*r5*r9|1+1*lr*5*6+a*lr*r5*r9|1+1*lr*5*6+r*lr*r5*r9|1+1*lr*5*6+11*lr*r5*r9|1+1*lr*5*6+v*lr*r5*r9|1+1*lr+i*lr*5*6+d*lr*r5*r9|1+1*lr*5*6+m*lr*r5*r9|1+1*lr*qs+8*lr*qs*6+p*lr*r5*r9|3+3*lr*r6*r9|2+2*qb|1+1*qb*5*6+15*qb*qc*qd|1+1*qb*5*6+1p*qb*qe*qd|1+1*qb*5*6+s*qb*qe*qd|1+1*qb*qf*qd|1+1*gv*5*6+9*qb*qc*qg|1+1*gv*1a*2x*6+l*gv*2x*6+w*gv*1a*2x*6+8*gv*2x*6+1*gv*1a*2x*6+c*gv*2x*6+3u*gv*qe*qg|1+1*gv*1a*97*6+1y*gv*97*6+r*gv*1a*97*6+f*gv*qe*qg|1+1*gv*97*6+o*qb*qe*qg|1+1*gv*qe*qg|1+1*gv*5*6+a*gv*6+1a*gv*qe*qg|1+1*gv+1b*gv*qe*qg|1+1*gv+7*gv*5*6+7*gv+5*gv*6+h*gv*qe*qg|1+1*gv+10*gv*qe*qg|1+1*gv*5*6+d*gv*6+e*gv*qe*qg|1+1*gv+1j*gv*qe*qg|1+1*gv*5*6+6*qb*qf*qg|1+1*gv*1a*2m*6+f*gv*2m*6+2*qb*qc*qh|1+1*gv*2m*6+4*gv*1a*2m*6+f*gv*2m*6+d*gv*1a*2m*6+4*gv*2m*6+1v*gv*1a*2m*6+6*gv*2m*6+3r*gv*1a*2m*6+f*gv*2m*6+17*qb*qe*qh|1+1*qb*qf*qh|1+1*qb*qc*qi|1+1*qb*qe*qi|1+1*qb*qf*qi|1+1*lr|1+1*lr*5*6+k*lr*pg*ph|1+1*lr*5*6+1b*lr*pi*ph|1+1*lr*5*6+1e*lr*pi*ph|1+1*lr*5*6+1y*lr*pi*ph|2+2*lr*5*6+8*2e*pj*ph|1+1*2e*pg*pk|1+1*2e*pi*pk|1+1*2e*pj*pk|1+1*lr*5*6+e*lr*pg*pl|1+1*lr*5*6+1q*lr*pi*pl|1+1*lr+8*lr*pj*pl|1+1*lr*5*6+d*lr*pg*pm|1+1*lr*5*6+1h*lr*pi*pm|1+1*lr+8*lr*pj*pm|1+1*lr*5*6+e*pg*pn|1+1*lr*1a*5*6+1e*pi*pn|1+1*lr*5+4*lr*5*6+3*lr*5+2r*lr*pi*pn|1+1*lr*5+4*lr*5*6+5*lr*5+2s*lr*pi*pn|1+1*lr*5+4*lr*5*6+3*lr*5+5*lr*5*6+5*lr*5+o*lr*pi*pn|1+1*lr*6+5*lr*pi*pn|1+1*lr*6+6*lr*6*37+k*lr*6+1*lr*5*6+1*lr*6+g*lr*6*37+1*lr*6+3*lr*pi*pn|1+1*lr*6+6*lr*6*37+u*lr*6+1*lr*pi*pn|1+1*lr+8*pj*pn|1+1*lr*5*6+f*pg*po|1+1*lr*5+4*lr*6+7*lr*5+14*lr*6+b*lr*5+r*pi*po|1+1*lr*5*6+1c*lr*pi*po|1+1*lr*5*6+13*lr*pi*po|1+1*lr+8*pj*po|1+1*lr|1+1*8t*5*6+1*gv|1+1*gv*5*6+b*gv*p6*p7|1+1*gv*2*9*3*a+1*gv+e*gv*p8*p7|1+1*gv*2*9*3+1*gv+n*gv*p8*p7|1+1*gv*2*9*3+1*gv+l*gv*p8*p7|1+1*gv*2*9*3+1*gv+q*gv*5*6+1*gv+3*gv*p8*p7|1+1*gv*5*6+4*gv+r*gv*p8*p7|1+1*gv*5*6+3*gv+11*gv*p8*p7|1+1*gv*5*6+2*gv+15*gv*p8*p7|1+1*gv*5*6+3*gv+1m*gv*p8*p7|1+1*gv*5*6+3*gv+19*gv*p8*p7|2+2*gv*6+a*gv*p8*p7|1+1*gv*6+s*gv*p8*p7|2+2*gv*6+n*gv*p8*p7|1+1*gv*5*6+6*gv*p9*p7|1+1*gv*5*6+c*gv*p6*pa|5+5*gv*5*6+18*gv*p6*pa|1+1*gv+n*gv*p8*pa|1+1*gv+4g*gv*p8*pa|2+2*gv*5*6+1d*gv*p8*pa|1+1*gv*2*9*3*a+1*gv*5*6+q*gv*p8*pa|1+1*gv*2*9*3*b+1*gv*5*6+g*gv*p8*pa|1+1*gv*pd+1*gv*p8*pa|1+1*gv*5*6+6*gv*p9*pa|1+1*gv*5*6+a*gv*p6*pb|1+1*gv*5*6+3*gv*1a*5*6+h*gv*5*6+21*gv*p8*pb|1+1*gv*5*6+p*gv*5*6*37+n*gv*5*6*37*pe+b*gv*5*6+3g*gv*5*6*pf+j*gv*5*6+1*gv*p8*pb|2+2*gv*5*6+8q*gv*p8*pb|2+2*gv*p9*pb|1+1*gv*p6*pc|1+1*gv*5*6+6*gv*p6*pc|3+3*gv+16*gv*p6*pc|1+1*gv+e*gv*5*6+1*gv*p8*pc|2+2*gv*5*6+m*gv*1a*5*6+u*gv*5*6+9*gv*p8*pc|2+2*gv*5*6+i*gv*1a*5*6+10*gv*5*6+1*gv*p8*pc|2+2*gv*5*6+i*gv*1a*5*6+1m*gv*5*6+1*gv*p8*pc|2+2*gv*5*6+2*gv*6+5*gv*1a*5*6+g*gv*5*6+z*gv*p8*pc|2+2*gv*5*6+2*gv*6+3*gv*1a*5*6+e*gv*5*6+1y*gv*p8*pc|2+2*gv*5*6+2*gv*6+3*gv*1a*5*6+e*gv*5*6+15*gv*p8*pc|2+2*gv*5*6+18*gv*p8*pc|2+2*gv+9*gv*5*6+2*gv*p9*pc|2+2*gv*5*6+j*gv*1a*5*6+d*gv*5*6+10*gv*1a*5*6+q*gv*5*6+6*gv*p9*pc|2+2*gv*5*6+a*gv*1a*5*6+t*gv*5*6+2*gv*p9*pc|3+3*gv*5*6+e*gv*1a*5*6+v*gv*5*6+1*gv*p9*pc|2+2*gv*5*6+4*gv*1a*5*6+h*gv*5*6+u*gv*p9*pc|2+2*gv*5*6+3*gv*1a*5*6+9*gv*5*6+14*gv*p9*pc|3+3*gv*5*6+3*gv*1a*5*6+9*gv*5*6+1b*gv*p9*pc|3+3*gv*5*6+1f*gv*p9*pc|1+1*76|1+1*76*1a*5*6+c*76*dc*oy*ox|1+1*p5*ox|1+1*76*bk*oz*ox|1+1*76*5*6+2n*76*1a*5*6+8*19*1a*5*6+1*76*5*6+3c*76*dc*oy*p0|1+1*76*5*6+13*76*dc*oy*p0|1+1*76*5*6+9*19*5*6+1*76*5*6+e*19*5*6+1*76*5*6+d*19*5*6+1*76*5*6+b*76*dc*oy*p0|2+2*76*5*6+5*p5*p0|1+1*76*1a*5*6+6*19*1a*5*6+1*76*5*6+3t*76*bk*oz*p0|1+1*76*1a*5*6+7*19*1a*5*6+1*76*5*6+18*76*bk*oz*p0|1+1*76*5*6+c*19*5*6+1*76*5*6+4i*76*bk*oz*p0|1+1*76*1a*5*6+e*19*1a*5*6+1*76*5*6+2j*76*bk*oz*p0|1+1*8t*2*9k*3*a+1*8t*1a*5*6+1*8t*bk*oz*p0|1+1*8t*dc*oy*p1|1+1*8t*p5*p1|1+1*8t*bk*oz*p1|1+1*76*dc*oy*p2|1+1*p5*p2|1+1*76*bk*oz*p2|1+1*2f*5*6+p*2f|1+1*gv|1+1*gv*5*6+l*2f*4g*oh*oi|1+1*gv+f*gv*5*6+5*gv+j*lr*5*6+1*gv+26*lr*5*6+1*gv+32*gv*5*6+j*gv+8*gv*5*6+3*gv+l*2f*be*oj*oi|1+1*gv*5*6+4*gv*6+2e*gv*5*6+37*gv*6+1*2f*be*oj*oi|1+1*gv*6+10*2f*be*oj*oi|1+1*gv*6+q*2f*be*oj*oi|1+1*gv*6+q*2f*be*oj*oi|1+1*gv*6+s*2f*be*oj*oi|1+1*gv*6+r*2f*be*oj*oi|1+1*gv*6+9*2f*be*oj*oi|1+1*gv*5*6+6*2f*6w*ok*oi|1+1*gv*5*6+d*2f*4g*oh*ol|1+1*gv+v*gv*5*6+9*gv+1v*gv*5*6+2*gv*6+i*gv*5*6+n*gv*6+1t*gv*5*6+1*gv*6+1*2f*be*oj*ol|3+3*gv*5*6+a*gv+1c*2f*be*oj*ol|1+1*gv+x*2f*be*oj*ol|1+1*gv+n*2f*be*oj*ol|2+2*gv*6+v*gv*5*6+x*2f*be*oj*ol|1+1*gv*6+1h*2f*be*oj*ol|1+1*gv*5*6+6*2f*6w*ok*ol|1+1*gv*5*6+e*2f*4g*oh*om|1+1*gv*6+3e*2f*be*oj*om|1+1*gv*5*6+9*2f*be*oj*om|1+1*gv*5*6+6*gv*6+16*gv*5*6+3c*2f*be*oj*om|2+2*gv*5*6+20*2f*be*oj*om|2+2*gv*5*6+3a*2f*be*oj*om|2+2*gv*5*6+6*2f*6w*ok*om|1+1*2f*4g*oh*on|1+1*2f*be*oj*on|1+1*2f*6w*ok*on|1+1*2f|1+1*2f*5*6+k*2f*5x*o9*oa|1+1*2f*5*6+3i*2f*lp*ob*oa|1+1*2f*5*6+q*2f*lp*ob*oa|1+1*2f*2*20*3+1*2f*5*6+18*2f*lp*ob*oa|1+1*2f*2*20*3+1*2f*5*6+1g*2f*lp*ob*oa|1+1*2f*2*20*3+1*2f*5*6+6n*2f*lp*ob*oa|1+1*2f*2*20*3+1*2f*5*6+1c*2f*lp*ob*oa|1+1*2f*2*20*3+1*2f*5*6+1d*2f*lp*ob*oa|1+1*2f*2*20*3+1*2f*5*6+2p*2f*lp*ob*oa|1+1*2f*5*6+6*2f*6g*oc*oa|1+1*2f*5*6+h*2f*5x*o9*od|1+1*2f*5*6+43*2f*lp*ob*od|1+1*2f*2*20*3+1*2f*5*6+15*2f*lp*ob*od|1+1*2f*2*20*3+1*2f*6+7*2f*5*6+a*2f*6+d*2f*5*6+3*2f*6+i*2f*lp*ob*od|1+1*2f*5*6+6*2f*6g*oc*od|1+1*2f*5x*o9*oe|1+1*2f*5*6+24*2f*lp*ob*oe|1+1*2f*6g*oc*oe|1+1*2f*5*6+e*2f*5x*o9*of|1+1*2f*5*6+1j*2f*lp*ob*of|1+1*2f*5*6+1e*2f*lp*ob*of|1+1*2f*5*6+3w*2f*lp*ob*of|1+1*2f*5*6+42*2f*lp*ob*of|1+1*2f*5*6+15*2f*lp*ob*of|1+1*2f*5*6+12*2f*lp*ob*of|1+1*2f*5*6+6*2f*6g*oc*of|1+1*1e*5*6+f*5x*o9*ov|1+1*1e*6+v*1e*lp*ob*ov|1+1*1e*6+1v*lp*ob*ov|1+1*1e*5*6+6*6g*oc*ov|1+1*2f|3+3*2f*5*6+r*gv|1+1*2f|1+1*2f*5*6+m*gv*6n*ns*nt|1+1*2f*1a*2m*6+e*2f*2m*6+6n*gv*9x*nu*nt|1+1*2f*2m*6+1u*gv*9x*nu*nt|1+1*2f*5*6+6*2f*nv*nt|1+1*2f*5*6+b*gv*6n*ns*nw|1+1*2f*6+1t*gv*9x*nu*nw|1+1*2f*6+2m*gv*9x*nu*nw|1+1*2f*5*6+6*2f*nv*nw|1+1*gv*5*6+d*gv*6n*ns*nx|1+1*gv*5*6+2v*gv*9x*nu*nx|2+2*gv*5*6+9*gv*9x*nu*nx|1+1*gv*6+i*gv*9x*nu*nx|1+1*gv*6+f*gv*9x*nu*nx|1+1*gv*6+o*gv*9x*nu*nx|1+1*gv*6+f*gv*9x*nu*nx|1+1*gv*6+4*gv*9x*nu*nx|1+1*gv*6+16*gv*9x*nu*nx|1+1*gv*6+w*gv*9x*nu*nx|1+1*gv*6+k*gv*9x*nu*nx|1+1*gv*5*6+6*2f*nv*nx|1+1*gv*5*6+e*gv*6n*ns*ny|1+1*gv*5*6+7*gv*6n*ns*ny|1+1*gv*5*6+a*gv*6n*ns*ny|1+1*gv*5*6+25*gv+s*gv*5*6+1*gv+6*gv*5*6+3*gv+6*gv*5*6+2*gv+6*gv*5*6+b*gv+6*gv*5*6+59*gv*9x*nu*ny|1+1*gv*2*9*3*a+1*gv*nz*6+z*gv*9x*nu*ny|1+1*gv*2*9*3+1*gv*nz*6+1m*gv*9x*nu*ny|1+1*gv*2*9*3+1*gv*nz*6+2b*gv*9x*nu*ny|1+1*gv*2*9*3+1*gv*nz*6+l*gv*9x*nu*ny|1+1*gv*2*9*3+1*gv*nz*6+17*gv*9x*nu*ny|1+1*gv*2*9*3+1*gv*nz*6+1e*gv*9x*nu*ny|1+1*gv*2*9*3+1*gv*nz*6+g*gv*9x*nu*ny|2+2*gv*5*6+1y*gv*9x*nu*ny|2+2*gv*5*6+1d*gv*9x*nu*ny|1+1*gv*5*6+6*2f*nv*ny|1+1*2f|1+1*gv*5*6+c*gv*m6*m7|1+1*gv*5*6+c*gv*1a*5*6+i*gv*5*6+z*fk*5*6+3*gv*m8*m7|1+1*fk*m8*m7|1+1*gv*m8*m7|1+1*gv*6+1j*gv*m8*m7|2+2*gv+6*gv*5*6+2*gv+3*gv*5*6+1*gv+1k*gv*m8*m7|1+1*gv+i*1d*5*6+1*gv+j*gv*m8*m7|1+1*gv*5*6+6*gv*m9*m7|1+1*gv*5*6+b*gv*m6*ma|1+1*gv*6+1v*gv*5*6+1*gv*6+z*gv*m8*ma|1+1*gv*5*6+6*gv*m9*ma|1+1*gv*5*6+n*gv*m6*mb|1+1*gv*2m*6+4*gv*1a*2m*6+f*gv*2m*6+d*gv*1a*2m*6+7*gv*2m*6+2r*gv*m8*mb|1+1*gv*5*6+6*gv*m9*mb|1+1*1e*m6*mc|1+1*1e+b*1e*5*6+9*1e*m6*mc|3+3*1e*6+m*1e*m6*mc|1+1*1e*6+1*1e*m6*mc|1+1*1e*6+1*1e*5*6+a*1e*6+h*1e*m6*mc|1+1*1e*5*6+b*1e*6+13*1e*m6*mc|1+1*1e*5*6+7*1e*6+1*1e*m6*mc|1+1*1e*6+1*gv*m6*mc|1+1*1e*6+11*1e*m8*mc|1+1*1e*6+2w*1e*m8*mc|1+1*1e*6+p*1e*5*6+c*1e*6+o*1e*m8*mc|1+1*1e*6+r*19*5*6+k*1e*6+r*1e*m8*mc|1+1*1e*6+21*1e*m8*mc|1+1*1e*6+14*1e*5*6+5*1e*6+o*1e*m8*mc|1+1*1e*6+1s*gv*m8*mc|1+1*1e*5*6+p*1e*m8*mc|1+1*1e*5*6+6*gv*m9*mc|1+1*19*5*6+e*19*m9*mc|1+1*76|1+1*76*5*6+m*76*lx*ly|1+1*76*5*6+2*76*1a*5*6+c*76*5*6+1c*h3*5*6+1*76*5*6+q*76*lz*ly|1+1*76*5*6+8*2k*5*6+3*76*5*6+x*76*lz*ly|1+1*76*5*6+27*76*lz*ly|1+1*76*5*6+s*76*lz*ly|1+1*76*5*6+21*76*lz*ly|1+1*76*5*6+24*76*lz*ly|1+1*76*5*6+18*76*lz*ly|1+1*76*5*6+w*76*lz*ly|1+1*76*5*6+26*76*lz*ly|1+1*76*5*6+48*76*lz*ly|2+2*76*m0*ly|1+1*gv*5*6+f*76*lx*m1|1+1*gv*97*2x*6+f*gv*2x*6+12*gv*6*m5+7*gv*2x*6+4f*76*lz*m1|1+1*gv*lz*m1|1+1*gv*5*6+8*gv*lz*m1|1+1*gv+h*gv*lz*m1|1+1*gv+m*gv*5*6+1*gv+9*gv*lz*m1|1+1*gv+5*gv*lz*m1|1+1*gv+1*gv*lz*m1|1+1*gv+h*gv*lz*m1|1+1*gv+w*gv*lz*m1|1+1*gv+5*gv*lz*m1|1+1*gv+1*gv*lz*m1|1+1*gv+h*gv*lz*m1|1+1*gv+w*gv*lz*m1|1+1*gv+1*gv*lz*m1|1+1*gv+13*gv*lz*m1|1+1*gv+14*gv*lz*m1|1+1*gv+9*gv*lz*m1|1+1*gv*5*6+l*gv*lz*m1|2+2*gv*6+1o*gv*lz*m1|1+1*gv*6+y*gv*lz*m1|1+1*gv*5*6+8*gv*lz*m1|1+1*gv*6+n*gv*5*6+1*gv*lz*m1|1+1*gv*6+5*gv*lz*m1|1+1*gv*6+1*gv*lz*m1|1+1*gv*6+o*gv*lz*m1|1+1*gv*6+5*gv*lz*m1|1+1*gv*6+1*gv*lz*m1|1+1*gv*6+o*gv*lz*m1|1+1*gv*6+w*gv*lz*m1|1+1*gv*6+1*gv*lz*m1|1+1*gv*6+13*gv*lz*m1|1+1*gv*6+12*gv*lz*m1|1+1*gv*6+5*gv*lz*m1|2+2*gv*6+1d*gv*lz*m1|1+1*gv*6+f*gv*lz*m1|2+2*gv*5*6+b*gv*lz*m1|1+1*gv*5*6+19*gv*lz*m1|1+1*gv*5*6+2q*gv*lz*m1|4+4*gv*5*6+6*76*m0*m1|1+1*gv*6+14*76*lx*m2|1+1*gv+16*gv*5*6+3*gv+c*h3+2*gv+u*gv*lz*m2|1+1*gv+w*gv*lz*m2|1+1*gv+1d*76*lz*m2|1+1*gv*5*6+6*76*m0*m2|1+1*gv*5*6+s*76*lx*m3|1+1*gv+16*gv*5*6+5*gv+z*gv*lz*m3|1+1*76*lz*m3|1+1*gv*5*6+6*76*m0*m3|1+1*1e|1+1*4*1a*5*6+i*4*5*6+2*4|1+1*1e*1s*o0*nm|1+1*1e*5*6+a*1e*6+1*1e*1s*o0*nm|1+1*4*1a*5*6+f*1e*6i*nn*nm|1+1*4*1a*5*6+a*1e*6w*no*nm|1+1*1e*1s*o0*nr|1+1*1e*6+j*1e*1s*o0*nr|1+1*1e*2*20*3+1*1e+1*1e*6+1g*1e*6i*nn*nr|1+1*1e*2*20*3+1*1e+1*1e*6+4u*1e*6i*nn*nr|1+1*1e*2*20*3+1*1e+1*1e*6+2k*1e*6i*nn*nr|1+1*1e*2*20*3+1*1e+1*1e*6+1k*1e*6i*nn*nr|1+1*1e*2*20*3+1*1e+1*1e*6+1a*2k*6i*nn*nr|1+1*2k*2*20*3+1*2k*5*6+1c*1e*6i*nn*nr|2+2*1e*6+l*1e*6w*no*nr|1+1*1e*6+16*1e*1s*o0*o6|1+1*1e*6+o*1e*6i*nn*o6|1+1*1e*6+14*1e*6i*nn*o6|1+1*1e*6+1h*1e*6i*nn*o6|1+1*1e*6+1d*1e*6i*nn*o6|1+1*1e*6+w*1e*6i*nn*o6|1+1*1e*6+q*1e*6i*nn*o6|1+1*1e*6+r*1e*6i*nn*o6|1+1*1e*6+12*1e*6i*nn*o6|1+1*1e*6+1g*1e*6i*nn*o6|1+1*1e*6+1a*1e*6i*nn*o6|1+1*1e*6+y*1e*6i*nn*o6|1+1*1e*6+m*1e*6i*nn*o6|1+1*1e*6+v*1e*6i*nn*o6|1+1*1e*6+1n*1e*6i*nn*o6|1+1*1e+l*1e*6w*no*o6|1+1*4*9h|1+1*4|2+2*1e*1a*5*6+m*1e|1+1*1e+1*1e*1a*6+d*1e*bk*mv*mw|1+1*1e*1a*6+j*1e*5m*n7*mw|1+1*1e+1*1e*bc*mx*mw|1+1*1e*5*6+r*2k*5*6+2*1e*6+u*1e*5*6+5*1e*bk*mv*my|1+1*1e*6+2e*1e*5m*n7*my|1+1*1e+1*1e*5*6+6*1e*bc*mx*my|1+1*1e*6+2*1e*2x*6+d*1e*6+4m*1e*bk*mv*mz|1+1*1e+1*1e*6+1*1e*bk*mv*mz|1+1*1e+1*1e*n0*fm+1*1e*bk*mv*mz|1+1*1e+1*1e*6+1*1e*bk*mv*mz|1+1*1e*6+1p*1e*2x*6+6*1e*6+o*1e*2x*6+a*1e*6+o*1e*2x*6+6*1e*6+c*1e*2x*6+6*1e*6+1i*1e*5m*n7*mz|1+1*1e*bc*mx*mz|1+1*1e+1*1e*n0*fm+7*1e*bc*mx*mz|1+1*1e+1*1e*6+1*1e*bc*mx*mz|1+1*1e*6+3*1e*2x*6+6*1e*6+7c*1e*bk*mv*n1|1+1*1e+1*1e*6+1*1e*bk*mv*n1|1+1*1e+1*1e*n0*fm+b*1e*bk*mv*n1|1+1*1e+1*1e*6+r*1e*bk*mv*n1|1+1*1e+1*1e*6+1*1e*bk*mv*n1|1+1*1e+1*1e*n0*fm+1*1e*bk*mv*n1|1+1*1e+1*1e*6+a*1e*bk*mv*n1|1+1*1e+1*1e*6+d*1e*bk*mv*n1|1+1*1e*6+3*1e*2x*6+a*1e*6+5x*1e*5m*n7*n1|1+1*1e*6+2*1e*5m*n7*n1|1+1*1e*6+1*1e*n0*fm+b*1e*5m*n7*n1|1+1*1e*6+s*1e*5m*n7*n1|1+1*1e*6+2*1e*5m*n7*n1|1+1*1e*6+1*1e*n0*fm+1*1e*5m*n7*n1|1+1*1e*6+j*1e*5m*n7*n1|1+1*1e*6+l*1e*5m*n7*n1|1+1*1e*6+b*1e*5m*n7*n1|1+1*1e*5*6+6*1e*bc*mx*n1|1+1*1e*2x*6+3s*1e+2*1e*6+2*1e*bk*mv*n2|1+1*1e*6+3*1e*2x*6+a*1e*6+3i*1e*5m*n7*n2|1+1*1e*5*6+6*1e*bc*mx*n2|1+1*1e+1*1e*6+1*1e*bc*mx*n2|1+1*1e+1*1e*6+1*1e*bc*mx*n2|1+1*1e*6+3*1e*2x*6+6*1e*6+7c*1e*bk*mv*n3|1+1*1e+1*1e*6+1*1e*bk*mv*n3|1+1*1e+1*1e*6+1*1e*bk*mv*n3|1+1*1e*2x*6+4u*1e*5m*n7*n3|2+2*1e*5*6+6*1e*bc*mx*n3|1+1*1e|2+2*1d*5*6+1*2f*5*6+i*gv|1+1*2f|1+1*2f*5*6+f*2f*6x*lf*lg|1+1*2f*2r*6+2j*2f*2q*6+a*2f*2r*6+34*2k*2r*6+3*2f*2r*6+4*2k*2r*6+2*2f*2r*6+3*2k*2r*6+2*2f*2r*6+1g*2f*lp*lh*lg|1+1*2f*2*20*3+1*2f*5*6+1g*2k*5*6+10*2f*lp*lh*lg|1+1*2f*2r*6+t*2f*lp*lh*lg|1+1*2f*2r*6+1*2f*lp*lh*lg|1+1*2f*5*6+6*2f*7e*li*lg|1+1*2f*5*6+k*2f*6x*lf*lj|1+1*2f*5*6+2o*2f*lp*lh*lj|1+1*2f*5*6+r*2f*lp*lh*lj|1+1*2f*5*6+1b*2f*lp*lh*lj|1+1*2f*5*6+g*2f*lp*lh*lj|1+1*2f*5*6+1c*2f*lp*lh*lj|1+1*2f*5*6+1g*2f*lp*lh*lj|1+1*2f*5*6+13*2f*lp*lh*lj|1+1*2f*5*6+9*2f*lp*lh*lj|1+1*2f*5*6+1*2f*lp*lh*lj|1+1*2f*5*6+6*2f*7e*li*lj|1+1*2f*5*6+d*2f*6x*lf*lk|1+1*2f*5*6+z*2f*lp*lh*lk|1+1*2f*5*6+t*2f*lp*lh*lk|1+1*2f*5*6+u*2f*lp*lh*lk|2+2*2f*6+q*2f*lp*lh*lk|1+1*2f*5*6+z*2f*lp*lh*lk|1+1*2f*5*6+m*2f*lp*lh*lk|1+1*2f*5*6+l*2f*lp*lh*lk|1+1*2f*5*6+1*2f*lp*lh*lk|1+1*2f*5*6+6*2f*7e*li*lk|1+1*1c*5*6+1c*6x*lf*lq|1+1*1c*2w*6+1y*1c*6+1c*1c*5*6+1*lp*lh*lq|1+1*1c*2w*6+2q*1c*lp*lh*lq|1+1*1c*5*6+9*7e*li*lq|1+1*2f*5*6+1h*1c*5*6+a*2f*6x*lf*ll|1+1*2f*5*6+o*2f*lp*lh*ll|1+1*2f*5*6+16*2f*lp*lh*ll|1+1*2f*5*6+m*2f*lp*lh*ll|1+1*2f*5*6+l*2f*lp*lh*ll|1+1*2f*5*6+1*2f*lp*lh*ll|1+1*2f*5*6+1c*2f*lp*lh*ll|1+1*2f*5*6+19*2f*lp*lh*ll|1+1*2f*5*6+z*2f*lp*lh*ll|1+1*2f*5*6+3*2f*lp*lh*ll|1+1*2f*5*6+6*2f*6+n*2f*5*6+w*2f*lp*lh*ll|1+1*2f*6+e*2f*5*6+o*2f*lp*lh*ll|1+1*2f*5*6+6*2f*7e*li*ll|1+1*2f*5*6+c*2f*6x*lf*lo|1+1*2f*6+14*2f*lp*lh*lo|1+1*2f*5*6+1*2f*lp*lh*lo|1+1*2f*5*6+1j*2f*lp*lh*lo|1+1*19*5*6+1w*19*lp*lh*lo|1+1*2f*5*6+6*7e*li*lo|1+1*19*7e*li*lo|2+2*19*5*6+d*19*7e*li*lo|1+1*2f*2*lm*3+1*m4*5*6+2*2f|2+2*gv*5*6+h*gv*l8*l9|c+c*gv*5*6+9*gv*l8*l9|3+3*gv*5*6+a*gv*l8*l9|1+1*gv*5*6+2*gv*6+16*gv*5*6+a*gv*6+g*gv*la*l9|2+2*gv*5*6+19*gv*la*l9|2+2*gv*5*6+1r*gv*la*l9|3+3*gv*6+l*gv*5*6+a*gv*6+1*gv*la*l9|1+1*gv*6+w*gv*5*6+l*gv*la*l9|2+2*gv*6+6*gv*5*6+1*gv*6+4*gv*5*6+1*gv*6+f*gv*5*6+6*gv*6+1*gv*5*6+1*gv*6+3*gv*5*6+4*gv*6+1*gv*la*l9|2+2*gv*6+1c*gv*la*l9|2+2*gv*5*6+1*gv*6+1z*gv*la*l9|2+2*gv*6+9*gv*5*6+2*gv*6+36*gv*5*6+1*gv*6+v*gv*la*l9|2+2*gv*5*6+6*gv*lb*l9|1+1*gv+j*gv*l8*lc|1+1*gv*la*lc|1+1*gv*2*9*3*a+1*gv*6+m*gv*5*6+26*gv*la*lc|1+1*gv*5*6+4*gv+j*gv*la*lc|1+1*gv+11*gv*la*lc|2+2*gv*5*6+1*gv*6+q*gv*la*lc|2+2*gv+g*gv*la*lc|2+2*gv+n*gv*la*lc|1+1*gv+x*gv*la*lc|1+1*gv+a*gv*la*lc|1+1*gv+a*gv*la*lc|1+1*gv+e*gv*la*lc|1+1*gv+9*gv*la*lc|2+2*gv*5*6+x*gv*la*lc|1+1*gv*5*6+r*gv*la*lc|1+1*gv*5*6+1*gv*la*lc|1+1*gv*5*6+x*gv*la*lc|1+1*gv*5*6+a*gv*la*lc|1+1*gv*5*6+9*gv*la*lc|2+2*gv*5*6+13*gv*la*lc|1+1*gv*5*6+10*gv*la*lc|1+1*gv*5*6+1*gv*la*lc|1+1*gv*5*6+f*gv*la*lc|1+1*gv*5*6+1*gv*la*lc|1+1*gv*5*6+6*gv*lb*lc|1+1*gv*l8*ld|1+1*gv*5+14*gv*la*ld|2+2*gv*5+h*gv*5*6+2*gv*5+20*gv*la*ld|1+1*gv*5*6+4*gv*6+13*gv*la*ld|1+1*gv*6+e*gv*la*ld|2+2*gv*5*6+1y*gv*la*ld|1+1*gv*5*6+b*gv*la*ld|2+2*gv*5*6+17*gv*la*ld|2+2*gv*5+16*gv*la*ld|1+1*gv*5*6+6*gv*lb*ld|1+1*gv*l8*le|1+1*gv*5*6+11*gv*la*le|1+1*gv*6+4*gv*5+1g*gv*la*le|1+1*gv*lb*le|1+1*ki|1+1*ki+e*ki*kr*kp|3+3*ki+14*ki*kr*kp|1+1*ki+x*ki*kr*kp|1+1*ki*6+u*ki*bb*kt*kp|2+2*ki*6+11*ki*bb*kt*kp|2+2*ki*6+1f*ki*bb*kt*kp|1+1*ki*6+t*ki*5*6+1*ki*6+r*ki*bb*kt*kp|1+1*ki*6+1k*ki*bb*kt*kp|1+1*ki*6+13*ki*bb*kt*kp|1+1*ki*6+1h*ki*bb*kt*kp|1+1*ki*6+t*ki*bb*kt*kp|1+1*ki*6+3*ki*5*6+1*ki*6+26*2k*5*6+d*ki*bb*kt*kp|1+1*ki*6+13*ki*bb*kt*kp|1+1*ki*5*6+7*ki*d7*ks*kp|1+1*76|1+1*76*5*6+f*76*5u*ka*kb|1+1*76*5m*kc*kb|1+1*76*kd*kb|1+1*76*5*6+1i*76*5u*ka*ke|1+1*76*5*6+2x*lr*5*6+1*76*5*6+1i*76*5m*kc*ke|1+1*76*5*6+1l*lr*5*6+1*76*5*6+2h*76*5m*kc*ke|1+1*76*5*6+1e*76*5m*kc*ke|1+1*76*5*6+2h*76*5m*kc*ke|1+1*76*5*6+40*76*5m*kc*ke|1+1*76*5*6+1o*76*2x*6+2m*76*5m*kc*ke|1+1*bp*2x*6+3m*bp*5m*kc*ke|1+1*bp*2x*6+3y*bp*5m*kc*ke|1+1*76*5m*kc*ke|1+1*76*5*6+5*76*kd*ke|1+1*76*5u*ka*kf|1+1*76*5*6+3r*76*5m*kc*kf|1+1*76*5*6+3a*76*5m*kc*kf|1+1*76*5*6+5*76*kd*kf|1+1*76*5*6+o*76*5u*ka*kg|1+1*76*5*6+21*76*5m*kc*kg|1+1*76*5*6+1a*76*5m*kc*kg|1+1*76*5*6+11*76*5m*kc*kg|3+3*76*5*6+5*76*kd*kg|1+1*jg|2+2*jg*5*6+d*jh*jw|1+1*jg*5*6+9*jk*jw|1+1*jg*5*fm+8*jg*jh*jl|1+1*jg+3a*jg*jh*jl|1+1*jg+1b*jg*jh*jl|1+1*jg+w*jg*jh*jl|1+1*jg*5*6+1*jg+1c*jg*jh*jl|1+1*jg*5*6+w*jg*jh*jl|2+2*jg*5*6+d*jg*jh*jl|1+1*jg*5*6+1t*jg*jh*jl|1+1*jg*5*6+1j*jg*jh*jl|1+1*jg*5*6+v*jg*jh*jl|1+1*jg*5*6+i*jg*jh*jl|1+1*jg*2y*6+1c*jg*jh*jl|1+1*jg*2y*6+k*jg*jh*jl|1+1*jg*6*fm+1*jg*5*6+n*jg*jh*jl|1+1*jg*2y*6+1c*jg*jh*jl|1+1*jg*2y*6+13*jg*jh*jl|1+1*jg*2y*6+e*jg*jh*jl|1+1*jg*2y*6+y*jg*jh*jl|1+1*jg*2y*6+1j*jg*jh*jl|1+1*jg*2y*6+m*jg*jh*jl|1+1*jg*jk*jl|1+1*jg*2y*6+2*jg*2y*6*fm+2*jg*2y*6+66*jg*jk*jl|1+1*jg*2y*6+2*jg*2y*6*fm+6*jg*2y*6+6j*jg*jk*jl|1+1*jg*2y*6+2*jg*2y*6*fm+6*jg*2y*6+14*jg*jk*jl|1+1*jg*2y*6+2*jg*2y*6*fm+6*jg*2y*6+1j*jg*jk*jl|1+1*jg*2y*6+2*jg*2y*6*fm+6*jg*2y*6+1q*jg*jk*jl|1+1*jg*2y*6+2*jg*2y*6*fm+6*jg*2y*6+4k*jg*jk*jl|1+1*jg*2y*6+2*jg*2y*6*fm+6*jg*2y*6+12*jg*jk*jl|1+1*jg*6+e*jg*jk*jl|1+1*2p|1+1*2p*5*6+7*2p*if*ig|1+1*2p*6+b*2p*ih*ig|1+1*2p*6+7*2p*ii*ig|1+1*2p*6+9*if*is|1+1*2p*6+e*2p*5*6+2*2p*5*6*it+5*2p*5*6+1*2p*6+1o*2p+1h*ih*is|1+1*2p*5*6+6*ii*is|1+1*2p+n*if*ir|1+1*2p+y*2p*ih*ir|1+1*2p+h*2p*ih*ir|1+1*2p+l*2p*ih*ir|1+1*2p+m*2p*ih*ir|1+1*2p+j*ih*ir|1+1*ii*ir|1+1*2p+h*if*iq|1+1*2p+1c*2p*ih*iq|1+1*lw*5*6+5*2p+m*lw*5*6+5*2p+h*2p*ih*iq|1+1*2p+1*lw*5*6+5*2p+j*2p*ih*iq|1+1*2p+1*lw*5*6+5*2p+i*ih*iq|1+1*ii*iq|1+1*2p+w*if*ip|1+1*2p*6+j*2p*5*6+5*2p*6+4*ih*ip|1+1*ii*ip|1+1*2p*6+15*if*io|1+1*2p+q*2p*5*6+1*2p*ih*io|1+1*2p*fm+4*2p+w*2p*ih*io|1+1*2p*5*6+1*2p+1*ih*io|1+1*ii*io|1+1*2p*6+a*2p*5*6+1*2p*6+r*2p*if*ij|1+1*2p+12*2p*ih*ij|1+1*2p+2*2p*ih*ij|1+1*2p+1b*2p*ih*ij|1+1*2p+a*2p*ih*ij|1+1*2p*ii*ij|1+1*2p*1a*5*6*iu+u*2p*if*ik|1+1*2p*6+2g*2p*ih*ik|1+1*2p*6+m*2p*ii*ik|1+1*2p*1a*5*6*iz+d*2p*if*il|1+1*2p*6+1y*2p*ih*il|3+3*2p*6+h*2p*ii*il|1+1*2p*1a*5*6*j0+e*if*im|1+1*2p*6+1n*ih*im|1+1*2p*6+c*ii*im|1+1*2p*1a*5*6*j1+6*if*in|1+1*2p*6+18*ih*in|1+1*2p*6+d*ii*in|1+1*2p*1a*5*6*j2+7*if*ix|1+1*2p*6+1p*ih*ix|1+1*2p*6+e*ii*ix|1+1*2p*1a*5*6*j3+i*if*iy|1+1*2p*6+1l*ih*iy|1+1*2p+10*2p*ii*iy|1+1*2p+7*2p*ii*iy|1+1*2p+10*2p*ii*iy|1+1*2p+6*2p*ii*iy|1+1*2p*6+17*ii*iy|1+1*2p*1a*5*6*j6+p*if*iv|1+1*2p*6+2f*ih*iv|1+1*2p*6+n*ii*iv|1+1*2p*1a*5*6*j7+g*if*j5|1+1*2p*6+2f*ih*j5|1+1*2p*6+g*ii*j5|1+1*2p*6+12*if*j4|1+1*2p*6+7*ih*j4|1+1*2p*6+u*ii*j4|1+1*2p*6+k*if*ja|1+1*2p*6+10*ih*ja|1+1*2p*6+o*ii*ja|1+1*2p*ii*ja|1+1*2p*6+n*if*j9|1+1*2p*6+10*ih*j9|1+1*2p*6+r*ii*j9|1+1*2p*1a*5*6*jb+10*if*j8|1+1*2p*6+32*ih*j8|1+1*2p*6+12*ii*j8|1+1*2p*1a*5*6*jf+c*if*je|1+1*2p*6+2t*ih*je|1+1*2p*6+j*ii*je|1+1*2p|1+1*4*1a*5*6+e*4|2+2*4*5*6+f*4*i6*i7|1+1*4*5*6+a*4*i8*i7|1+1*4*5*6+l*4*i9*i7|1+1*4*6+i*4*i6*ia|2+2*4*5*6+n*4*i6*ia|1+1*4*5*6+e*4*i8*ia|2+2*4*5*6+l*4*i8*ia|1+1*4+l*4*i9*ia|2+2*4*5*6+a*4*i6*ib|2+2*4*5*6+j*4*i6*ib|1+1*4*5*6+p*4*i8*ib|1+1*4*5*6+i*4*i8*ib|1+1*4*5*6+n*4*i8*ib|1+1*4+l*4*i9*ib|2+2*4*5*6+c*4*i6*ic|1+1*4*5*6+i*4*i8*ic|1+1*4*5*6+l*4*i9*ic|2+2*4*5*6+c*4*i6*id|1+1*4*5*6+l*4*i8*id|1+1*4+l*4*i9*id|2+2*4*5*6+9*4*i6*ie|1+1*4*5*6+16*4*i8*ie|1+1*4*2*20*3+1*4*5*6+14*2k*5*6+1*4*5*6+12*4*i8*ie|1+1*4+l*4*i9*ie|2+2*4|2+2*1q|2+2*1q*5*6+5*1q*1x*md*me|1+1*1q*2*20*3+1*1q*mf*6+1e*1q*6+q*1q*7g*mg*me|1+1*1q*2*20*3+1*1q*5*6+29*1q*7g*mg*me|1+1*1q*5*6+6*1q*6x*mh*me|1+1*1q*5*6+o*1q*1x*md*mi|1+1*1q*5*6+1i*1q*7g*mg*mi|2+2*1q*2*20*3+1*1q*5*6+a*1q*7g*mg*mi|1+1*1q*5*6+u*1q*7g*mg*mi|1+1*1q*2*20*3+1*1q*5*6+e*1q*7g*mg*mi|1+1*1q*5*6+d*1q*6+c*1q*5*6+6*1q*6+5*1q*7g*mg*mi|1+1*1q*2*20*3+1*1q*5*6+c*1q*7g*mg*mi|1+1*1q*5*6+b*1q*6+c*1q*5*6+4*1q*6+5*1q*7g*mg*mi|1+1*1q*2*20*3+1*1q*5*6+d*1q*7g*mg*mi|1+1*1q*5*6+y*1q*7g*mg*mi|2+2*1q*2*9k*3+1*1q*mj*6+1l*1q*7g*mg*mi|1+1*1q*5*6+6*1q*6+5*1q*5*6+3*1q*6+1*1q*5*6+1*1q*6+3*1q*5*6+1*1q*6+2*1q*5*6+1*1q*6+2*1q*5*6+1*1q*6+2*1q*5*6+1*1q*6+3*1q*7g*mg*mi|1+1*1q*6+6*1q*6x*mh*mi|1+1*1q*5*6+r*1q*1x*md*mk|1+1*1q*6+j*1q*5*6+1*1q*6+9*1q*7g*mg*mk|1+1*1q*6+6*1q*6x*mh*mk|1+1*1q*6+17*1q*1x*md*ml|1+1*1q*mf*6+8*1q*7g*mg*ml|1+1*1q*6+6*1q*6x*mh*ml|1+1*1q*5*6+d*1q*1x*md*mm|1+1*1q*2*9k*3+1*1q*5*6+l*1q*7g*mg*mm|1+1*1q*5*6+b*1q*mn*6+u*1q*7g*mg*mm|1+1*1q*2*9k*3+1*1q*5*6+k*1q*7g*mg*mm|1+1*1q*5*6+17*1q*7g*mg*mm|1+1*1q*5*6+1m*1q*7g*mg*mm|1+1*1q*5*6+16*1q*7g*mg*mm|1+1*1q*5*6+1l*1q*7g*mg*mm|1+1*1q*5*6+s*1q*7g*mg*mm|1+1*1q*2*9k*3+1*1q*6+d*1q*7g*mg*mm|1+1*1q*5*6+9*1q*6+a*1q*1a*6+f*1q*7g*mg*mm|1+1*1q*1a*5*6+7*1q*5*6+19*1q*7g*mg*mm|1+1*1q*5*6+1k*1q*7g*mg*mm|1+1*1q*5*6+n*1q*7g*mg*mm|1+1*1q*6+6*1q*6x*mh*mm|1+1*1q*6+o*1q*5*6+h*1q*1x*md*mo|1+1*1q*5*6+9*1q*7g*mg*mo|1+1*1q*2*9k*3+1*1q*6+j*1q*7g*mg*mo|1+1*1q*5*6+a*1q*6+a*1q*5*6+3*1q*6+5*1q*7g*mg*mo|1+1*1q*2*9k*3+1*1q*5*6+k*1q*7g*mg*mo|1+1*1q*5*6+b*1q*6+4*1q*5*6+3*1q*6+6*1q*5*6+3*1q*6+4*1q*5*6+4*1q*6+1*1q*7g*mg*mo|1+1*1q*2*9k*3+1*1q*5*6+d*1q*7g*mg*mo|1+1*1q*5*6+7*1q*6+r*1q*7g*mg*mo|1+1*1q*5*6+7*1q*7g*mg*mo|1+1*1q*6+6*1q*6x*mh*mo|1+1*1q*5*6+7*1q*6+h*1q*1x*md*mp|1+1*1q*2*20*3+1*1q*6+1j*1q*7g*mg*mp|1+1*1q*2*20*3+1*1q*5*6+1*1q*6+o*1q*7g*mg*mp|1+1*1q*2*20*3+1*1q*6+2z*1q*7g*mg*mp|1+1*1q*6+6*1q*6x*mh*mp|1+1*1q*5*6+m*1q*1x*md*mq|1+1*1q*2*20*3+1*1q*5*6+1z*1q*7g*mg*mq|1+1*1q*2*20*3+1*1q*5*6+1d*1q*7g*mg*mq|1+1*1q*6+6*1q*6x*mh*mq|1+1*1q*5*6+f*1q*1x*md*mr|1+1*1q*2*20*3+1*1q*5*6+1b*1q*7g*mg*mr|1+1*1q*2*20*3+1*1q*5*6+1w*1q*7g*mg*mr|1+1*1q*6+6*1q*6x*mh*mr|1+1*1q*5*6+19*1q*1x*md*ms|2+2*1q*6*mt+1*1q*1x*md*ms|1+1*1q*1a*5*6+o*1q*7g*mg*ms|1+1*1q*1a*5*6+7*1q*6+10*1q*7g*mg*ms|1+1*1q*1a*5*6+m*1q*7g*mg*ms|1+1*1q*1a*5*6+7*1q*6+19*1q*5*6+2*1q*7g*mg*ms|1+1*1q*5*6+8*1q*6+n*1q*7g*mg*ms|1+1*1q*5*6+o*1q*7g*mg*ms|1+1*1q*1a*5*6+v*1q*7g*mg*ms|1+1*1q*1a*5*6+7*1q*5*6+19*1q*7g*mg*ms|1+1*1q*5*6+1d*1q*7g*mg*ms|1+1*1q*1a*5*6+r*1q*7g*mg*ms|1+1*1q*1a*5*6+7*1q*6+1a*1q*5*6+3*1q*7g*mg*ms|1+1*1q*5*6+8*1q*6+t*1q*7g*mg*ms|1+1*1q*5*6+7*1q*6+19*1q*7g*mg*ms|1+1*1q*5*6+8*1q*6+9*1q*7g*mg*ms|2+2*1q*6+6*1q*6x*mh*ms|1+1*1q*5p|3+3*4|1+1*hl*hf|1+1*2p*1a*5*6+5*2p*he*hf|1+1*2p*1a*5*6+9*2p*hg*hf|1+1*2p*hh*hf|1+1*2p*6+4*hl*hi|1+1*2p*6+9*2p+f*2p*he*hi|1+1*2p*6+d*2p+g*2p*hg*hi|1+1*2p*5*6+6*2p*hh*hi|1+1*2p*6+b*hl*hj|1+1*2p*6*fm+2*2p*6+g*2p*he*hj|1+1*2p*6+l*2p*he*hj|1+1*2p*6+r*2p*he*hj|1+1*2p*6+19*2p*hg*hj|1+1*2p*6+1e*2p*hg*hj|1+1*2p*6+6*2p*hh*hj|1+1*2p+i*2p*hl*hn|1+1*2p+8*2p*hl*hn|2+2*2p+1*hl*hn|1+1*2p*6+1v*he*hn|1+1*2p*6+8*2p*hg*hn|1+1*2p*6+1i*hg*hn|1+1*2p*6+6*hh*hn|1+1*2p*6+d*hl*ho|1+1*2p*6+1g*he*ho|1+1*2p*6+g*2p+28*hg*ho|1+1*2p*6+6*hh*ho|1+1*2p*6+8*hl*hp|1+1*2p*6+13*2p*he*hp|1+1*2p*6+p*2p*he*hp|1+1*2p*6+b*2p*he*hp|1+1*2p*6+a*he*hp|1+1*2p*6+s*2p*hg*hp|1+1*2p*6+1a*2p*hg*hp|1+1*2p*6+e*hg*hp|1+1*2p*6+6*hh*hp|1+1*2p*6+g*hl*hq|1+1*2p*6+1i*he*hq|1+1*2p*6+10*hg*hq|1+1*2p*6+6*hh*hq|1+1*2p*6+k*hl*hr|1+1*2p*6+12*2p+k*he*hr|1+1*2p*6+1a*hg*hr|1+1*2p*6+6*hh*hr|1+1*2p*6+a*hl*hs|1+1*2p*6+u*2p*he*hs|1+1*2p*6+o*2p*he*hs|1+1*2p*6+o*2p*he*hs|1+1*2p*6+t*he*hs|1+1*2p*6+1a*2p*hg*hs|1+1*2p*6+v*2p*hg*hs|1+1*2p*6+m*2p*hg*hs|1+1*2p*6+e*2p*hg*hs|1+1*2p*6+9*hg*hs|1+1*2p*6+6*hh*hs|1+1*2p*6+5*hl*ht|1+1*2p*6+f*2p*he*ht|1+1*2p*6+m*he*ht|1+1*2p*6+e*2p*hg*ht|1+1*2p*6+k*hg*ht|1+1*2p*6+6*hh*ht|1+1*2p*6+8*hl*hu|1+1*2p*6+29*2p*he*hu|1+1*2p*6+h*he*hu|1+1*2p*6+2e*hg*hu|1+1*2p*6+6*hh*hu|1+1*2p*5*6+9*hl*hv|1+1*2p*6+1f*he*hv|1+1*2p*6+1f*hg*hv|1+1*2p*6+6*hh*hv|1+1*h4|1+1*gv|1+1*gv*5*6+5*gv*gw*gx|1+1*ls*gx|1+1*lt*gx|1+1*gv*5*6+r*gv*gy*gx|1+1*7i*5*6+15*7i*gy*gx|1+1*gv*5*6+6*gv*gz*gx|1+1*7i*gz*gx|1+1*gv*5*6+6*gv*gw*h0|1+1*ls*h0|1+1*lt*h0|1+1*gv*5*6+v*gv*gy*h0|1+1*gv*6+c*o1*6+3*gv*6+b*gv*5*6+1*7i*gy*h0|1+1*gv*5*6+h*gv*gy*h0|1+1*gv*5*6+m*gv*gy*h0|1+1*7i*5*6+2e*7i*gy*h0|1+1*gv*gy*h0|1+1*gv*5*6+a*7i*5*6+7*gv*5*6+q*gv*gy*h0|1+1*gv*5*6+k*7i*5*6+d*gv*5*6+d*7i*5*6+7*gv*gy*h0|1+1*7i*gy*h0|1+1*gv*5*6+25*gv*gy*h0|1+1*7i*gy*h0|1+1*gv*5*6+y*gv*gy*h0|1+1*gv*5*6+6*gv*gz*h0|1+1*gv*6+f*gv*gw*h1|1+1*ls*h1|1+1*lt*h1|1+1*gv*6+10*gv*5*6+1*gv*6+n*gv*5*6+a*gv*gy*h1|1+1*gv*5*6+a*gv*6+14*gv*gy*h1|1+1*gv*5*6+6*gv*gz*h1|1+1*gv*5*6+h*gv*gw*h2|1+1*ls*h2|1+1*lt*h2|1+1*gv*5*6+2o*gv*gy*h2|2+2*gv+4q*gv*gy*h2|2+2*gv*6+4g*gv*gy*h2|2+2*gv*6+w*gv*gy*h2|2+2*gv*6+6*gv*5*6+3*gv*6+j*gv*5*6+2*gv*6+7*gv*gy*h2|1+1*gv*6+4d*gv*gy*h2|1+1*gv*6+a*gv*gy*h2|1+1*gv*6+a*gv*gy*h2|3+3*gv*5*6+6*gv*gz*h2|1+1*2f*5*6+i*18|1+1*2f|1+1*2f*5*6+i*9y*gf*gg|1+1*2f*5*6+78*7i*5*6+1*2f*5*6+3*7i*5*6+9*2f*69*gh*gg|1+1*2f*2m*6+4*2f*1a*2m*6+a*2f*2m*6+3z*2f*69*gh*gg|1+1*2f*2m*6+w*2f*69*gh*gg|1+1*2f*5*6+29*7i*69*gh*gg|1+1*2f*5*6+t*2f*69*gh*gg|1+1*2f*5*6+4k*2f*69*gh*gg|1+1*2f*5*6+6*2f*6g*gi*gg|1+1*2f*5*6+17*9y*gf*gj|1+1*2f*6+t*2f*69*gh*gj|1+1*2f*5*6+x*2f*69*gh*gj|1+1*2f*5*6+b*2f*69*gh*gj|1+1*2f*5*6+3*1c*5*6+7*2f*5*6+5*1c*5*6+2*2f*5*6+2r*2f*69*gh*gj|1+1*2f*5*6+6*2f*6g*gi*gj|1+1*2f*5*6+l*9y*gf*gk|1+1*2f*5*6+y*2f*69*gh*gk|1+1*2f*5*6+y*2f*6+i*2f*5*6+3*2f*69*gh*gk|1+1*2f*5*6+x*2f*6+a*2f*5*6+6*2f*6+1*2f*5*6+3*2f*69*gh*gk|1+1*2f*5*6+u*2f*6+a*2f*5*6+6*2f*6+1*2f*5*6+3*2f*69*gh*gk|1+1*2f*5*6+6*2f*6g*gi*gk|1+1*2f*5*6+n*9y*gf*gl|1+1*2f*5*6+x*2f*6+a*2f*5*6+6*2f*6+1*2f*5*6+3*2f*69*gh*gl|1+1*2f*5*6+u*2f*69*gh*gl|1+1*2f*5*6+a*2f*69*gh*gl|1+1*2f*5*6+6*2f*6g*gi*gl|1+1*2f*5*6+21*9y*gf*gr|1+1*2f*5*6+g*2f*69*gh*gr|1+1*2f*5*6+x*2f*6+a*2f*5*6+6*2f*6+1*2f*5*6+3*2f*69*gh*gr|1+1*2f*5*6+l*2f*69*gh*gr|1+1*2f*5*6+n*2f*69*gh*gr|1+1*2f*5*6+o*2f*69*gh*gr|2+2*2f*5*6+s*2f*69*gh*gr|1+1*2f*5*6+1d*gu*5*6+1*2f*5*6+9*2f*69*gh*gr|1+1*2f*5*6+w*2f*69*gh*gr|1+1*2f*5*6+1o*2f*69*gh*gr|1+1*2f*5*6+w*2f*69*gh*gr|1+1*2f*5*6+1u*2f*69*gh*gr|1+1*2f*5*6+q*2f*69*gh*gr|1+1*2f*5*6+l*2f*6+o*2f*69*gh*gr|1+1*2f*5*6+6*2f*6g*gi*gr|1+1*2f*5*6+1k*9y*gf*gq|1+1*2f*5*6+17*2f*69*gh*gq|1+1*1r*2f*2*3+1*2f*5*6+11*2f*6+a*2f*5*6+6*2f*6+1*2f*5*6+3*2f*69*gh*gq|1+1*1r*2f*2*3+1*2f*5*6+l*2f*69*gh*gq|1+1*1r*2f*2*3+1*2f*5*6+n*2f*69*gh*gq|1+1*1r*2f*2*3+1*2f*5*6+o*2f*69*gh*gq|1+1*1r*2f*2*3+1*2f*5*6+12*2f*69*gh*gq|1+1*1r*2f*2*3+1*2f*69*gh*gq|1+1*2f*5*6+6*2f*6g*gi*gq|1+1*2f*5*6+n*9y*gf*gp|1+1*2f*5*6+17*ki*5*6+2*2f*5*6+1j*2f*69*gh*gp|1+1*2f*5*6+x*2f*69*gh*gp|1+1*2f*5*6+6*2f*6g*gi*gp|1+1*2f|1+1*1e*6+7*1e*5*6+a*1e|1+1*1e*6+g*1e*9i*fv*fw|1+1*1e+3*1e*6+w*1e*dc*fx*fw|1+1*1e+1*1e*6+1v*1e*dc*fx*fw|1+1*1e+1*1e*6+1*1e*dc*fx*fw|1+1*1e+1*1e*6+f*1e*dc*fx*fw|1+1*1e+1*1e*6+g*1e*dc*fx*fw|1+1*1e+1*1e*6+g*1e*dc*fx*fw|1+1*1e+1*1e*6+1*1e*dc*fx*fw|1+1*1e+1*1e*6+1a*1e*5*6+1*1e*6+l*1e*dc*fx*fw|1+1*1e+1*1e*5*6+a*1e*6+1x*1e*dc*fx*fw|1+1*1e+1*1e*fm+1*1e*dc*fx*fw|1+1*1e+3*1e*6+v*1e*ge*fy*fw|1+1*1e+1*1e*6+4o*1e*ge*fy*fw|1+1*1e+1*1e*6+2b*1e*ge*fy*fw|1+1*1e*6+1e*1e*e*fz*fw|1+1*1e*5*6+2*1e*6+11*1e*e*fz*fw|1+1*1e+5*1e*6+9*1e*9i*fv*g0|1+1*1e+3*1e*6+j*2k*5*6+1*1e*6+s*1e*dc*fx*g0|1+1*1e+1*1e*6+18*1e*dc*fx*g0|1+1*1e+1*1e*6+x*1e*dc*fx*g0|1+1*1e+1*1e*6+1*1e*dc*fx*g0|1+1*1e+1*1e*6+l*1e*dc*fx*g0|1+1*1e*6+3r*1e*ge*fy*g0|1+1*1e+1*1e*6+1*1e*ge*fy*g0|1+1*1e+1*1e*6+b*1e*ge*fy*g0|1+1*1e+1*1e*6+i*1e*ge*fy*g0|1+1*1e+1*1e*6+i*1e*ge*fy*g0|1+1*1e+1*1e*6+i*1e*ge*fy*g0|1+1*1e+1*1e*6+1*1e*ge*fy*g0|1+1*1e+1*1e*5*6+7*1e*e*fz*g0|1+1*1e+5*1e*6+1*1e*9i*fv*g1|1+1*1e*6+w*1e*dc*fx*g1|1+1*1e+1*1e*6+1m*1e*dc*fx*g1|1+1*1e+1*1e*6+1s*1e*dc*fx*g1|1+1*1e+3*1e*6+1*1e*ge*fy*g1|1+1*1e*5*6+6*1e*6+1*1e*e*fz*g1|1+1*1e+3*1e*9i*fv*g2|1+1*1e*dc*fx*g2|1+1*1e*ge*fy*g2|1+1*1e*e*fz*g2|1+1*1e+5*1e*6+f*1e*9i*fv*g3|1+1*1e*5*6+7*1e*6+1k*1e*dc*fx*g3|1+1*1e+1*1e*6+1*1e*dc*fx*g3|1+1*1e+1*1e*6+h*1e*dc*fx*g3|1+1*1e+1*1e*6+m*1e*dc*fx*g3|1+1*1e+1*1e*6+1*1e*dc*fx*g3|1+1*1e+1*1e*6+g*1e*dc*fx*g3|1+1*1e+1*1e*6+v*1e*dc*fx*g3|1+1*1e+1*1e*6+1*1e*dc*fx*g3|1+1*1e+1*1e*6+a*1e*dc*fx*g3|1+1*1e+1*1e*6+p*1e*dc*fx*g3|1+1*1e+1*1e*6+m*1e*dc*fx*g3|1+1*1e+1*1e*6+1*1e*dc*fx*g3|1+1*1e+1*1e*6+10*1e*dc*fx*g3|1+1*1e+1*1e*6+r*1e*dc*fx*g3|1+1*1e+1*1e*6+1*1e*dc*fx*g3|1+1*1e+1*1e*6+1*1e*dc*fx*g3|1+1*1e+1*1e*6+1*1e*dc*fx*g3|1+1*1e+3*1e*6+28*1e*ge*fy*g3|1+1*1e+1*1e*6+17*1e*ge*fy*g3|1+1*1e+1*1e*6+1*1e*ge*fy*g3|1+1*1e+1*1e*6+1*1e*ge*fy*g3|1+1*1e+1*1e*6+1*1e*ge*fy*g3|1+1*1e+1*1e*6+1*1e*ge*fy*g3|1+1*1e+1*1e*6+1*1e+1*1e*6+11*1e*ge*fy*g3|1+1*1e+1*1e*6+a*1e*ge*fy*g3|1+1*1e+1*1e*6+1*1e*ge*fy*g3|1+1*1e*6+1n*1e*ge*fy*g3|1+1*1e+1*1e*6+1*1e*ge*fy*g3|1+1*1e*5*6+6*1e+1*1e*6+1*1e*e*fz*g3|1+1*1e+5*1e*6+1*1e*9i*fv*g4|1+1*1e*6+r*1e*dc*fx*g4|1+1*1e+1*1e*5*6+3*1e*6+q*1e*dc*fx*g4|1+1*1e+1*1e*6+t*1e*dc*fx*g4|1+1*1e+1*1e*6+1*1e*dc*fx*g4|1+1*1e+1*1e*6+k*1e*dc*fx*g4|1+1*1e+1*1e*6+1s*1e*dc*fx*g4|1+1*1e+1*1e*6+n*1e*dc*fx*g4|1+1*1e+1*1e*6+k*1e*dc*fx*g4|1+1*1e+1*1e*6+1*1e*dc*fx*g4|1+1*1e*6+12*1e*ge*fy*g4|1+1*1e+1*1e*6+5*1e*ge*fy*g4|1+1*1e+1*1e*6+1*1e*ge*fy*g4|1+1*1e+1*1e*6+1*1e*ge*fy*g4|1+1*1e*5*6+6*1e+3*1e*6+1*1e*e*fz*g4|1+1*1e+1*1e*e*fz*g4|1+1*1e+1*1e*6+1*1e*e*fz*g4|1+1*1e+5*1e*6+1*1e*9i*fv*g5|1+1*1e+3*1e*6+r*1e*dc*fx*g5|1+1*1e+1*1e*6+q*1e*dc*fx*g5|1+1*1e+1*1e*6+s*1e*dc*fx*g5|1+1*1e+1*1e*6+y*1e*dc*fx*g5|1+1*1e+1*1e*6+1*1e*dc*fx*g5|1+1*1e+1*1e*6+1c*1e*dc*fx*g5|1+1*1e+1*1e*6+1*1e*dc*fx*g5|1+1*1e*6+14*1e*ge*fy*g5|1+1*1e+1*1e*6+5*1e*ge*fy*g5|1+1*1e*5*6+6*1e*e*fz*g5|1+1*1e+2*fk|1+1*1e|1+1*fk|1+1*di*1a*5*6*2c+e*fk|1+1*di|1+1*di*5*6+n*di*dj*dk|1+1*di*2*9*3*a+1*di*5*6+t*di*7g*dl*dk|1+1*di*2*9*3*b+1*di*5*6+q*di*7g*dl*dk|1+1*di*2*9*3*94+1*di*5*6+b*di*7g*dl*dk|1+1*di*2*9*3*9o+1*di*5*6+t*di*7g*dl*dk|1+1*di*2*9*3*9p+1*di*5*6+s*di*7g*dl*dk|1+1*di*2*9*3*dq+1*di*5*6+12*di*7g*dl*dk|1+1*di*2*9*3*dr+1*di*5*6+2m*di*7g*dl*dk|1+1*di*2*9*3*ds+1*di*5*6+32*di*7g*dl*dk|1+1*di*2*9*3*dt+1*di*5*6+29*di*7g*dl*dk|1+1*di*5*6+8*di*7e*dm*dk|1+1*di*5*6+q*di*dj*dn|1+1*di*2*9*3*a+1*di*5*6+1f*di*7g*dl*dn|1+1*di*2*9*3*b+1*di*5*6+1f*di*7g*dl*dn|1+1*di*2*9*3*94+1*di*5*6+t*di*7g*dl*dn|1+1*di*5*6+8*di*7e*dm*dn|1+1*di*5*6+n*di*dj*do|1+1*di*2*9*3*a+1*di*5*6+v*di*7g*dl*do|1+1*di*2*9*3*b+1*di*5*6+t*di*7g*dl*do|1+1*di+8*di*7e*dm*do|1+1*di*5*6+w*dj*fl|1+1*di*2*9*3*a+1*di*5*6+v*di*7g*dl*fl|1+1*di*2*9*3+1*di*5*6+q*7g*dl*fl|1+1*di*2*9*3*b+1*di*5*6+1l*di*7g*dl*fl|1+1*7e*dm*fl|1+1*di*5*6+b*di*dj*dp|1+1*di*5*6*2c+d*di*7g*dl*dp|1+1*di*5*6+u*di*7g*dl*dp|1+1*di*5*6+u*di*7g*dl*dp|1+1*di*5*6+a*di*7g*dl*dp|1+1*di*5*6+a*di*7g*dl*dp|2+2*di*5*6*2c+d*di*7g*dl*dp|1+1*di*5*6+11*di*7g*dl*dp|1+1*di*5*6+e*di*7g*dl*dp|1+1*di*5*6+b*di*7g*dl*dp|1+1*di*5*6+c*di*7g*dl*dp|2+2*di*5*6*2c+9*di*7g*dl*dp|1+1*di*5*6+w*di*7g*dl*dp|1+1*di*5*fm*37+1v*di*7g*dl*dp|2+2*di*5*6+8*di*7e*dm*dp|1+1*di|1+1*di*5*6+z*di*9j*e1*e7|1+1*di*2*9*3*a+1*di*5*6+9*di*5m*e3*e7|1+1*di*2*9*3+1*di*5*6+a*di*5m*e3*e7|1+1*di*2*9*3+1*di*5*6+8*di*5m*e3*e7|1+1*di*2*9*3+1*di*5*6+a*di*5m*e3*e7|1+1*di*2*9*3+1*di*5*6+d*di*5m*e3*e7|1+1*di*2*9*3+1*di*5*6+d*di*5m*e3*e7|1+1*di*2*9*3+1*di*5*6+g*di*5m*e3*e7|1+1*di*2*9*3+1*di*5*6+g*di*5m*e3*e7|2+2*di*5*6+8*di*4g*e4*e7|1+1*di*5*6+4*di+z*di*9j*e1*e8|1+1*di*5*6+4*di*5m*e3*e8|1+1*di*5*6+8*di*4g*e4*e8|1+1*di|2+2*cn*1a*5*6+f*cn|1+1*cn*d5*6+h*cn*1a*d5*6+1*cn*1a*d3*6+1*cn*1a*5*6+1*cn|1+1*cn*de*cv*cz|1+1*cn*5*6+u*cn*bb*cx*cz|1+1*cn*5*6+a*cn*7e*cw*cz|1+1*cn*2*9k*3+1*cn*5*6+y*cn*de*cv*cs|1+1*cn*5*6+1c*cn*bb*cx*cs|1+1*cn*2*20*3+1*cn*5*6+1c*cn*bb*cx*cs|1+1*cn*2*20*3+1*cn*5*6+z*cn*bb*cx*cs|2+2*cn*6*da+1*cn*bb*cx*cs|1+1*cn*7e*cw*cs|1+1*cn*2*9k*3+1*cn*5*6+r*2k*5*6+6*cn*5*6+a*cn*de*cv*d0|1+1*cn*2*20*3+1*cn*5*6+11*cn*bb*cx*d0|1+1*cn*2*20*3+1*cn*5*6+15*cn*bb*cx*d0|1+1*cn*2*20*3+1*cn*5*6+y*cn*bb*cx*d0|1+1*cn+8*cn*7e*cw*d0|1+1*cn*2*9k*3+1*cn*5*6+j*cn*de*cv*ct|1+1*cn*5*6+p*cn*de*cv*ct|1+1*cn*5*6+a*2k*5*6+1*cn*de*cv*ct|1+1*cn*2*20*3+1*cn*5*6+1e*cn*bb*cx*ct|1+1*cn*2*20*3+1*cn*5*6+1n*cn*bb*cx*ct|1+1*cn*2*20*3+1*cn*bb*cx*ct|1+1*cn*5*6+1*cn*bb*cx*ct|1+1*cn*7e*cw*ct|1+1*cn*2*9k*3+1*cn*5*6+v*cn*de*cv*cu|2+2*cn*2*20*3+1*cn*5*6+1*cn*6+1h*cn+p*cn*bb*cx*cu|1+1*cn*2*20*3+1*cn*5*6+2d*cn*bb*cx*cu|1+1*cn+8*cn*7e*cw*cu|1+1*cn*2*9k*3+1*cn*5*6+10*de*cv*ec|1+1*cn*2*20*3+1*cn*5*6+o*cn*bb*cx*ec|1+1*cn*2*20*3+1*cn*5*6+v*cn*bb*cx*ec|1+1*cn*5*6+9*cn*bb*cx*ec|1+1*cn*eg+1*bb*cx*ec|1+1*cn*bb*cx*ec|2+2*7e*cw*ec|1+1*cn*2*9k*3+1*cn*5*6+q*cn*de*cv*eb|1+1*cn*2*20*3+1*cn*5*6+h*cn*de*cv*eb|1+1*cn*2*20*3+1*cn*5*6+1n*de*cv*eb|1+1*cn*5*6+f*bb*cx*eb|1+1*cn*5*6+13*cn*bb*cx*eb|1+1*cn*5*6+i*cn*6+8*cn*5*6+3*cn*bb*cx*eb|1+1*cn*5*6+i*cn*6+8*cn*5*6+3*cn*bb*cx*eb|1+1*cn*5*6+i*cn*6+8*cn*5*6+3*cn*bb*cx*eb|2+2*cn*5*6+l*cn*6+8*cn*5*6+4*cn*bb*cx*eb|1+1*cn*5*6+f*cn*bb*cx*eb|1+1*cn*5*6+2*cn+4*cn*5*6+1*cn+6*cn*5*6+1*cn+1*cn*bb*cx*eb|1+1*cn*5*6+3*cn+4*cn*5*6+1*cn+6*cn*5*6+1*cn+1*cn*bb*cx*eb|1+1*cn*5*6+3*cn*bb*cx*eb|1+1*cn*5*6+5*cn*bb*cx*eb|1+1*cn+8*7e*cw*eb|1+1*de*cv*ea|1+1*cn*5*6+s*bb*cx*ea|1+1*cn*5*6+f*cn*bb*cx*ea|1+1*cn*6+4*cn*5*6+9*cn*bb*cx*ea|1+1*cn*6+4*cn*5*6+n*cn*bb*cx*ea|2+2*7e*cw*ea|1+1*cn*2*9k*3+1*cn*5*6+u*cn*de*cv*e9|1+1*de*cv*e9|1+1*bb*cx*e9|1+1*cn+8*7e*cw*e9|1+1*lu*2*9k*3+1*cn+u*cn*de*cv*eh|1+1*cn*5*6+1m*2k*de*cv*eh|1+1*2k*5*6+1p*2k*de*cv*eh|1+1*cn*5*6+d*cn*bb*cx*eh|1+1*cn*5*6+t*cn*bb*cx*eh|1+1*cn*5*6+t*bb*cx*eh|1+1*cn*5*6+s*cn*bb*cx*eh|1+1*cn*5*6+1*cn*bb*cx*eh|1+1*7e*cw*eh|1+1*cn*2*9k*3+1*cn*5*6+c*2k*5*6+e*cn*5*6+f*de*cv*ei|1+1*cn*5*6+m*cn*bb*cx*ei|1+1*cn*5*6+g*bb*cx*ei|1+1*cn*5*6+m*cn*bb*cx*ei|1+1*cn*5*6+1*cn*bb*cx*ei|1+1*7e*cw*ei|1+1*cn*2*9k*3+1*cn*5*6+26*de*cv*ej|1+1*bb*cx*ej|1+1*7e*cw*ej|1+1*cn*2*9k*3+1*cn*5*6+j*de*cv*el|1+1*cn*2*20*3+1*cn*5*6+1b*cn*bb*cx*el|1+1*bb*cx*el|1+1*7e*cw*el|1+1*de*cv*ek|1+1*bb*cx*ek|1+1*7e*cw*ek|1+1*2f*1a*5*6+d*2f|2+2*2f*5*6+z*2f*4g*f2*f3|1+1*2f*1a*2m*6+6*2f*2m*6+5*2f*1a*2m*6+4*2f*2m*6+2v*2f*a3*f4*f3|1+1*2f*5*6+6*2f*6g*f5*f3|1+1*2f*5*6+l*2f*4g*f2*f6|1+1*2f*5*6+k*2f*a3*f4*f6|1+1*2k*5*6+2*2k*a3*f4*f6|1+1*2k*5*6+1a*2k*a3*f4*f6|1+1*2f*5*6+4d*2k*5*6+6*2f*5*6+6*2k*5*6+2*2f*5*6+1*2f*a3*f4*f6|1+1*2f*5*6+17*2f*a3*f4*f6|1+1*2f*5*6+6*2f*6g*f5*f6|1+1*2f*5*6+s*2f*4g*f2*f7|1+1*2f*5*6+h*2f*a3*f4*f7|1+1*2f*5*6+11*2f*a3*f4*f7|1+1*2f*5*6+6*2f*6g*f5*f7|1+1*2f*5*6+1w*2f*4g*f2*f8|1+1*2f*5*6+13*2f*a3*f4*f8|1+1*2f*5*6+18*2f*a3*f4*f8|1+1*2f*5*6+6*2f*6g*f5*f8|1+1*2f*5*6+1f*2f*4g*f2*f9|1+1*2f*5*6+t*2f*a3*f4*f9|1+1*2f*5*6+14*2f*a3*f4*f9|1+1*2f*5*6+1*2f*a3*f4*f9|1+1*2f*5*6+6*2f*6g*f5*f9|1+1*2f*5*6+1c*2k*5*6+1*2f*5*6+i*2f*4g*f2*fa|1+1*2f*5*6+1h*2f*a3*f4*fa|1+1*2f*5*6+q*2f*a3*f4*fa|1+1*2f*5*6+n*2f*a3*f4*fa|1+1*2f*5*6+s*2f*a3*f4*fa|1+1*2f*5*6+6*2f*6g*f5*fa|1+1*2f*5*6+h*2f*4g*f2*fb|1+1*2f*2*20*3+1*2f*5*6+k*2f*4g*f4*fb|1+1*2f*2*20*3+1*2f*5*6+1u*2f*4g*f4*fb|1+1*2f*2*20*3+1*2f*5*6+24*2f*4g*f4*fb|1+1*2f*2*20*3+1*2f*5*6+14*2f*4g*f4*fb|1+1*2f*5*6+6*2f*6g*f5*fb|1+1*2f*5*6+r*2k*5*6+2*2f*5*6+14*2f*4g*f2*fc|1+1*2f*5*6+19*2f*a3*f4*fc|1+1*2f*5*6+r*2f*a3*f4*fc|1+1*2f*5*6+1n*2f*a3*f4*fc|1+1*2f*5*6+6*2f*6g*f5*fc|1+1*2f*5*6+1k*2f*4g*f2*fd|1+1*2f*5*6+t*2f*a3*f4*fd|1+1*2f*5*6+13*2f*a3*f4*fd|1+1*2f*5*6+1*2f*a3*f4*fd|1+1*2f*5*6+7*2f*6g*f5*fd|1+1*2f*6+r*2f*5*6+m*2f*6+n*2f*4g*f2*fe|1+1*2f*6+8*2f*4g*f2*fe|1+1*2f*5*6+1y*2f*a3*f4*fe|1+1*2f*5*6+1u*2f*a3*f4*fe|1+1*2f*5*6+a*2k*5*6+i*2f*5*6+1l*2f*a3*f4*fe|1+1*2f*5*6+6*2f*6g*f5*fe|1+1*2f*6g|2+2*2f*1a*5*6+r*2f*6g|1+1*2f|1+1*2f*5*6+g*2f*6x*ff*fg|1+1*2f*5*6+j*2f*6b*fh*fg|1+1*2f*5*6+x*2f*6b*fh*fg|1+1*2f*5*6+1*2f*6b*fh*fg|1+1*2f*5*6+2*2f*6b*fh*fg|1+1*2f*5*6+v*2f*6b*fh*fg|1+1*2f*5*6+c*2f*6+j*2f*5*6+7*2f*6+2*2f*6b*fh*fg|1+1*2f*5*6+1*2f*6b*fh*fg|1+1*2f*5*6+6*2f*6g*fi*fg|1+1*2f*5*6+d*2f*6x*ff*fj|1+1*2f*5*6+e*2f*6b*fh*fj|1+1*2f*5*6+u*2f*6b*fh*fj|1+1*2f*5*6+1*2f*6b*fh*fj|1+1*2f*5*6+2*2f*6b*fh*fj|1+1*2f*5*6+g*2f*6b*fh*fj|1+1*2f*5*6+8*2f*6+j*2f*5*6+7*2f*6+2*2f*6b*fh*fj|1+1*2f*5*6+1*2f*6b*fh*fj|1+1*2f*5*6+6*2f*6g*fi*fj|1+1*8u|1+1*8u*5*6+d*8u*8v*8w|1+1*8u*5*6+i*8u*8x*8w|1+1*8u*5*6+h*8u*8y*8w|1+1*8u*1a*5*6+a*8u*8v*8z|7+7*8u*5*6+7*8u*8v*8z|1+1*8u*5*6+h*2k*5*6+1*8u*5*6+e*8u*8v*8z|1+1*8u*5*6+1b*8u*8v*8z|1+1*8u*5*6+h*8u*8v*8z|1+1*8u*2*20*3+1*19*5*6+m*19*8x*8z|1+1*19*2*20*3+1*19*5*6+r*19*8x*8z|1+1*19*2*20*3+1*19*5*6+1b*19*8x*8z|1+1*19*2*20*3+1*19*5*6+29*19*8x*8z|1+1*19*2*20*3+1*8u*5*6+k*8u*8x*8z|1+1*8u*5*6+j*8u*8x*8z|1+1*8u*1a*5*6*2c+6*8u*5*6*2c+1*8u*5*6+2*8u*1a*5*6+l*8u*8x*8z|1+1*2u*1a*5*6+e*19*1a*5*6+1*2u*1a*5*6+6*2u*8x*8z|1+1*8u*5*6+k*19*8x*8z|1+1*8u*5*6+e*8u*8x*8z|1+1*8u*2*20*3+1*8u*5*6+z*8u*8x*8z|1+1*8u*2*9*3*a+1*8u*1a*5*6*2c+4*8u*5*6*2c+1*8u*5*6+1*8u*8x*8z|1+1*8u*1a*5*6*2c+6*8u*5*6+3*8u*1a*5*6+o*8u*8x*8z|1+1*8u*1a*5*6+4*8u*5*6+3*8u*1a*5*6+f*8u*8x*8z|1+1*8u*1a*5*6+5*8u*5*6+e*8u*8x*8z|1+1*8u*5*6+4*8u*1a*5*6*2c+5*8u*5*6*2c+1*8u*8x*8z|1+1*8u*1a*5*6*2c+6*8u*1a*5*6+r*8u*8x*8z|1+1*8u*1a*5*6+4*8u*5*6+3*8u*1a*5*6+g*8u*8x*8z|1+1*8u*1a*5*6+5*8u*5*6+j*8u*8x*8z|1+1*8u*5*6+3*8u*1a*5*6*2c+3*8u*5*6+1*8u*8x*8z|1+1*8u*1a*5*6*2c+6*8u*1a*5*6+p*8u*8x*8z|1+1*8u*1a*5*6+4*8u*5*6+3*8u*1a*5*6+g*8u*8x*8z|1+1*8u*1a*5*6+9*8u*5*6+o*8u*8x*8z|1+1*8u*5*6+3*8u*5*6*2c+1*8u*1a*5*6*2c+3*8u*1a*5*6+1*8u*8x*8z|1+1*8u*1a*5*6*2c+6*8u*1a*5*6+q*8u*8x*8z|1+1*8u*1a*5*6+n*8u*8x*8z|1+1*8u*1a*5*6+5*8u*5*6+j*8u*8x*8z|1+1*8u*5*6+t*8u*8x*8z|1+1*8u*2*9*3*a+1*8u*1a*5*6*2c+5*8u*1a*5*6+1*8u*5*6+2*8u*8x*8z|1+1*8u*1a*5*6*2c+6*8u*5*6+2*8u*1a*5*6+i*8u*1a*8x*8z|1+1*8u*1a*5*6+9*8u*8x*8z|1+1*8u*1a*5*6+n*8u*8x*8z|1+1*8u*1a*5*6+7*8u*5*6+w*8u*8x*8z|1+1*8u*5*6+3*8u*1a*5*6*2c+6*8u*5*6+2*8u*8x*8z|1+1*8u*1a*5*6*2c+6*8u*5*6+2*8u*1a*5*6+q*8u*8x*8z|1+1*8u*1a*5*6+n*8u*8x*8z|1+1*8u*1a*5*6+5*8u*5*6+z*8u*8x*8z|1+1*8u*5*6+m*8u*8x*8z|1+1*8u*1a*5*6*2c+6*8u*1a*5*6+q*8u*1a*8x*8z|1+1*8u*5*6+1b*8u*8x*8z|1+1*8u*5*6+i*8u*8x*8z|1+1*8u*1a*5*6+o*8u*8x*8z|1+1*19*1a*5*6+d*8u*1a*8y*8z|1+1*8u*8y*8z|3+3*8u*5*6+c*8u*8y*8z|m+m*8u*5*6+f*8u*1a*5*6+7*8u*8y*8z|2+2*8u*1a*5*6+7*8u*1a*8v*90|1+1*8u*8v*90|7+7*8u*1a*6+k*8u*8v*90|2+2*8u*1a*5*6+d*8u*8v*90|1+1*8u*5*6+17*8u*8v*90|4+4*8u*1a*5*6+m*8u*8v*90|2+2*8u*5*6+b*8u*8v*90|1+1*8u*5*6+e*8u*8v*90|1+1*8u*5*6+h*8u*8v*90|1+1*8u*5*6+b*8u*8v*90|1+1*8u*5*6+12*8u*8v*90|1+1*8u*1a*5*6+3*8u*5*6+r*8u*8x*90|1+1*8u*5*6+22*8u*8x*90|1+1*8u*5*6+j*8u*8x*90|1+1*8u*5*6+17*8u*8x*90|1+1*2u*5*6+10*8u*8x*90|1+1*8u*5*6+i*8u*8x*90|1+1*8u*5*6+f*8u*8x*90|1+1*8u*5*6+m*8u*8x*90|1+1*8u*5*6+o*8u*8x*90|1+1*8u*5*6+t*8u*8x*90|1+1*8u*5*6+o*8u*8x*90|1+1*8u*5*6+j*8u*8x*90|2+2*8u*5*6+2j*8u*8x*90|1+1*8u*1a*5*6*2c+d*8u*8x*90|1+1*8u*5*6+i*8u*8x*90|1+1*8u*5*6+h*8u*8x*90|1+1*8u*5*6+h*8u*8x*90|1+1*8u*8y*90|b+b*8u*5*6+d*8u*1a*5*6+9*8u*8y*90|1+1*8u*1a*5*6+v*8u*8v*91|c+c*8u*1a*5*6+e*8u*8v*91|3+3*8u*6+16*8u*8v*91|1+1*8u*5*6+l*8u*1a*5*6+3*8u*8x*91|1+1*8u*5*6+1e*8u*8x*91|1+1*8u*5*6+l*8u*1a*5*6+4*8u*8x*91|1+1*8u*5*6+p*8u*8x*91|1+1*8u*5*6+o*8u*8x*91|1+1*8u*5*6+n*8u*1a*5*6+3*8u*8x*91|1+1*8u*5*6+1a*8u*8x*91|1+1*8u*5*6+k*8u*1a*5*6+4*8u*8x*91|1+1*8u*5*6+1a*8u*8x*91|2+2*8u*5*6+d*8u*8x*91|1+1*8u*5*6+c*8u*8x*91|1+1*8u*5*6+t*8u*8x*91|1+1*8u*5*6+p*8u*8x*91|1+1*8u*5*6+1j*8u*8x*91|1+1*8u*5*6+6*8u*8x*91|1+1*8u*6+d*8u*5*6+1*8u*6+e*8u*8x*91|2+2*8u*8y*91|a+a*8u*5*6+j*8u*1a*5*6+7*8u*8y*91|1+1*8u*1a*5*6+l*8v*95|1+1*8u*6+3*8u*5*6+k*8u*8x*95|1+1*8u*6+2*8u*5*6+c*8u*8x*95|1+1*8u*6+2*8u*5*6+g*8u*6+1*8u*8x*95|1+1*8u*6+4*8u*5*6+l*8u*6+1*8u*8x*95|1+1*8u*6+4*8u*5*6+o*8u*6+1*8u*8x*95|1+1*8u*6+4*8u*5*6+g*8x*95|1+1*8u*8x*95|2+2*8u*8y*95|3+3*8u*5*6+g*8u*1a*5*6+7*8u*8y*95|1+1*8u*1a*5*6+d*8v*96|1+1*8u*2*9*3*a+1*8u*1a*5*6*2c+b*8u*8x*96|1+1*8u*1a*5*6*2c+8*8u*8x*96|1+1*8u*5*6+g*2v*5*6+u*8u*8x*96|1+1*8u*5*6+1*2v*5*6+1*8u*8x*96|1+1*8u*5*6+b*2v*5*6+1o*8u*8x*96|1+1*8u*5*6+1*8u*8x*96|2+2*8u*5*6+3*8u*1a*5*6*2c+d*8u*8x*96|1+1*8u*1a*5*6*2c+8*8u*8x*96|1+1*8u*5*6+2*2v*5*6+1*8u*8x*96|1+1*8u*5*6+1*8u*8x*96|1+1*8u*5*6+b*2v*5*6+1q*8u*8x*96|1+1*8u*5*6+i*8u*8x*96|2+2*8u*5*6+3*8u*1a*5*6*2c+8*8u*1a*5*6+1*8x*96|1+1*8u*1a*5*6*2c+8*8u*8x*96|1+1*8u*5*6+1n*2v*5*6+2*2v*6+2r*8u*8x*96|1+1*8u*5*6+1*2v*5*6+1*8u*8x*96|1+1*8u*5*6+b*2v*5*6+1*8u*8x*96|1+1*8u*5*6+1*8u*8x*96|1+1*8u*5*6+b*8u*8x*96|1+1*8y*96|1+1*8u*8y*96|5+5*1r*2v*2*3+1*8u*8y*96|2+2*8u*1a*5*6+l*8u*8y*96|1+1*1*2v*2*3+1*8u|1+1*81*5*6+p*81|1+1*81*5*6+8*8a*8r|1+1*85*8r|1+1*81*5*6+3*8e*8r|1+1*81*5*6+2*2v*5*6+1*81*5*6+c*81*8a*8b|1+1*81*5*6+b*81*85*8b|1+1*81*8e*8b|1+1*81*5*6+f*h3*5*6+4*81*5*6+i*81*8a*8c|1+1*81*5*6+d*81*85*8c|1+1*81+c*81*85*8c|1+1*81+8*81*85*8c|3+3*81*6+1a*81*8e*8c|1+1*81*6+1p*81*8e*8c|1+1*81*6+s*81*5*6+1*81*6+b*81*5*6+4*81*6+7*81*8e*8c|1+1*81*6+1o*81*8e*8c|1+1*81*5*6+7*81*8a*86|1+1*81*5*6+b*8t*5*6+6*81*5*6+8*8t*85*86|1+1*81*5*6+6*81*85*86|1+1*81*8e*86|1+1*81*5*6+x*81*8a*87|1+1*81*5*6+6*81*85*87|1+1*81*8e*87|1+1*81*5*6+6*2v*5*6+5*8a*8s|1+1*81*5*6+1*85*8s|1+1*81*5*6+1b*8e*8s|1+1*81*5*6+1t*81*8e*8s|1+1*81*5*6+1m*81*8e*8s|1+1*81*5*6+1o*81*8e*8s|1+1*81*5*6+19*81*8e*8s|1+1*81*5*6+1l*81*8e*8s|1+1*81*5*6+b*81*8a*88|1+1*81*85*88|1+1*81*8e*88|2+2*76|1+1*76*5*6+f*76*7q*7r|1+1*76*5*6+a*76*7s*7r|1+1*76*5*6+m*76*7q*7u|1+1*76*5*6+5*76*7s*7u|1+1*76*5*6+x*76*7q*7v|1+1*76+5*76*7s*7v|1+1*76*5*6+13*76*7q*7w|1+1*76*5*6+d*76*7q*7w|1+1*76*5*6+f*76*7q*7w|1+1*76*5*6+l*76*7q*7w|1+1*76*5*6+b*76*7q*7w|1+1*76*5*6+1j*76*7q*7w|2+2*76+5*76*7s*7w|1+1*76*5*6+l*7q*7y|1+1*76*5*6+1k*76*7q*7y|1+1*76+5*7s*7y|1+1*76*5*6+u*7q*7z|1+1*76*5*6+2c*76*7q*7z|1+1*76+5*7s*7z|1+1*76*5*6+1b*7q*80|1+1*76+5*7s*80|1+1*4|1+1*2z*2*2g*3+1*4*5*6+b*4|1+1*2z*2*2g*3+1*4|1+1*2z*2*2g*3+1*4+h*7*k|1+1*2z*2*2g*3+1*4*5*6+f*c*d*k|1+1*2z*2*2g*3+1*4*5*6+a*e*f*k|1+1*2z*2*2g*3+1*4*5*6+i*4*7*8|1+1*2z*2*2g*3+1*4*7*8|1+1*2z*2*30*3*a+1*4*5*6+7*4*7*8|1+1*2z*2*30*3*b+1*4*5*6+c*4*7*8|1+1*2z*2*2g*3+1*4*5*6+c*4*7*8|1+1*2z*2*2g*3+1*4*5*6+h*4*7*8|1+1*2z*2*2g*3+1*4*5*6+b*4*6+1*4*5*6+2*4*6+1*4*5*6+y*4*7*8|1+1*2z*2*2g*3+1*4*5*6+1c*4*7*8|1+1*2z*2*2g*3+1*4*5*6+z*4*c*d*8|1+1*2z*2*2g*3+1*4*5*6+14*2p*5*6+3d*4*5*6+13*4*c*d*8|1+1*2z*2*2g*3+1*4*5*6+p*4*c*d*8|1+1*2v*2*20*3+1*4*5*6+c*4*c*d*8|1+1*2v*2*20*3+1*4*5*6+a*4*c*d*8|1+1*2v*2*20*3+1*4*5*6+a*4*c*d*8|1+1*2v*2*20*3+1*4*5*6+14*4*c*d*8|1+1*2v*2*20*3+1*4*5*6+c*4*c*d*8|1+1*2z*2*2g*3+1*4*e*f*8|1+1*2z*2*2g*3+1*4*5*6+9*4*e*7*g|1+1*2z*2*2g*3+1*4*6+2q*4*c*d*g|1+1*2z*2*2g*3+1*4*5*6+a*4*c*d*g|1+1*2z*2*2g*3+1*4*5*6+9*4*c*d*g|1+1*2z*2*2g*3+1*4*5*6+9*4*c*d*g|1+1*2z*2*2g*3+1*4*e*f*g|1+1*2z*2*2g*3+1*4*5*6+d*4*e*7*h|1+1*2z*2*2g*3+1*4*5*6+24*2n*5*6+35*2v*c*d*h|1+1*2v*2*2g*3+1*2v*c*d*h|1+1*2v*2*2g*3+1*2v*1a*5*6+7*2v*5*6+1*2v*1a*5*6+5*2v*5*6+v*2v*1a*5*6+4*2v*5*6+1*2v*c*d*h|2+2*2u*c*d*h|1+1*2z*2*2g*3+1*2v*5*6+a*4*e*f*h|1+1*2z*2*2g*3+1*4*e*7*i|1+1*2z*2*2g*3+1*4*c*d*i|1+1*2z*2*2g*3+1*4*e*f*i|1+1*2z*2*2g*3+1*1q|1+1*1r*2z*2*2g*3+1*1q*1a*5*6+b*1q*1s*24*25|1+1*1r*2z*2*2g*3+1*1q*1a*5*6+5*1q*1v*26*25|1+1*1r*2z*2*2g*3+1*1q*1a*5*6+a*1q*1x*27*25|1+1*1r*2z*2*2g*3+1*1q*5*6+a*1q*1s*24*28|1+1*1*2z*2*30*3*a+1*1q*1a*5*6+1*1q*1a*6+k*1q*1s*26*28|1+1*1*2z*2*31*3+1*1q*6+m*1q*1s*26*28|1+1*1*2z*2*31*3+1*1q*6+c*1q*5*6+2*1q*1s*26*28|1+1*1*2z*2*31*3+1*1q*5*6+9*1q*6+1*1q*5*6+4*1q*6+6*1q*1s*26*28|1+1*1*2z*2*2g*3+1*1q*5*6+6*1q*1x*27*28|1+1*1*2z*2*2g*3+1*1q*1s*24*29|1+1*1*2z*2*31*3+1*1q*5*6+e*1q*6+r*1q*1s*26*29|1+1*1*2z*2*2g*3+1*1q*5*6+19*1q*1v*26*29|1+1*1*2z*2*2g*3+1*1q*5*6+6*1q*1x*27*29|1+1*1*2z*2*2g*3+1*1q*1s*24*2a|1+1*1*2z*2*31*3+1*1q*1a*5*6+1*1q*1a*6+e*1q*1a*5*6+5*1q*5*6+5*1q*1s*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+2*1q*1a*5*6+3*1q*5*6+5*1q*6+8*1q*5*6+6*1q*6+1*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+d*1q*6+4*1q*5*6+3*1q*6+q*1q*5*6+1*1q*6+a*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+z*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*6+1*1q*5*6+c*1q*6+5*1q*5*6+1a*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+13*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+d*1q*6+3*1q*5*6+2*1q*6+18*1q*5*6+8*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+k*1q*6+d*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+11*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+d*1q*6+4*1q*5*6+u*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+1i*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+1i*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+1*1q*1a*5*6+3*1q*5*6+6*1q*6+9*1q*5*6+1*1q*6+5*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+e*1q*6+5*1q*5*6+2*1q*6+p*1q*5*6+l*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+12*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+e*1q*6+6*1q*5*6+2*1q*6+p*1q*5*6+l*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+12*1q*1v*26*2a|1+1*1*2z*2*2g*3+1*1q*5*6+6*1q*1x*27*2a|1+1*1*2z*2*2g*3+1*1q*1s*24*2b|1+1*1*2z*2*31*3+1*1q*1a*5*6+9*1q*1a*6+1*1q*1a*5*6+4*1q*1a*6+1*1q*6+h*1q*5*6+j*1q*1s*26*2b|1+1*1*2z*2*2g*3+1*1q*5*6+l*1q*1v*26*2b|1+1*1*2z*2*2g*3+1*1q*1v*26*2b|1+1*1*2z*2*2g*3+1*1q*5*6+5*2d*5*6+1*1q*1x*27*2b|1+1*1r*2z*2*2g*3+1*1q*1x|1+1*2z*2*2g*3+1*l*1a*5*6*2c+f*l|1+1*2z*2*2g*3+1*l|1+1*l*2*2g*3+1*l*5*6+j*l*m*n|1+1*l*2*2g*3+1*l*5*6+5*l*o*n|1+1*l*2*2g*3+1*l*5*6+7*l*t*n|1+1*l*em*n|1+1*l*2*2g*3+1*l*5*6+g*l*m*q|1+1*l*2*2g*3+1*l*5*6+d*l*m*q|1+1*l*2*2g*3+1*l*5*6+1b*l*o*q|1+1*l*2*2g*3+1*l*5*6+k*l*t*q|1+1*l*6+6*l*em*q|1+1*l*2*2g*3+1*l*5*6+c*l*m*r|1+1*l*2*2g*3+1*l*5*6+14*l*o*r|1+1*l*2*2g*3+1*l*5*6+5*l*t*r|1+1*l*6+6*l*em*r|1+1*l*2*2g*3+1*l*5*6+f*l*m*s|1+1*l*2*2g*3+1*l*5*6+o*l*o*s|1+1*l*2*2g*3+1*l*5*6+1p*l*o*s|1+1*l*2*2g*3+1*l*o*s|1+1*l*2*2g*3+1*l*5*6+1o*l*o*s|1+1*l*2*2g*3+1*l*o*s|1+1*l*2*2g*3+1*l*5*6+1h*l*o*s|1+1*l*2*2g*3+1*l*5*6+8*l*t*s|1+1*l*2*2g*3+1*l*t*s|1+1*l*2*2g*3+1*l+1*l*5*6+a*l*t*s|1+1*l*2*2g*3+1*l*5*6+g*l*t*s|1+1*l*2*2g*3+1*l*5*6+2r*l*t*s|1+1*l*2*2g*3+1*l*t*s|1+1*l*2*2g*3+1*l*5*6+3c*l*t*s|1+1*l*2*2g*3+1*t*s|1+1*l*6+6*l*em*s|1+1*l*2*2g*3+1*l*5*6+f*l*m*u|1+1*l*2*2g*3+1*l*5*6+13*l*6+e*l*5*6+2*l*6+g*l*5*6+2*l*6+h*l*5*6+2*l*6+8*l*o*u|1+1*l*2*2g*3+1*l*o*u|1+1*l*2*2g*3+1*l*5*6+1n*l*o*u|1+1*l*2*2g*3+1*l*o*u|1+1*l*2*2g*3+1*l*5*6+1h*l*o*u|1+1*l*2*2g*3+1*l*5*6+9*l*t*u|1+1*l*2*2g*3+1*l*t*u|1+1*l*6+6*l*em*u|1+1*2z*2*2g*3+1*v|1+1*v*1a*5*6*2c+a*v*5*6+4*v|1+1*2z*2*2g*3+1*v*5*6+1e*v|1+1*2z*2*2g*3+1*v*5*6+1o*v|1+1*2z*2*2g*3+1*v*5*6+33*v|1+1*2z*2*2g*3+1*v*5*6+1c*v|1+1*2z*2*2g*3+1*v*5*6+3k*v|1+1*v*1a*5*6+4*v*5*6+1*v*1a*5*6+5*2v*9h*w*x|1+1*v*1a*5*6+d*2v*9i*9g*x|1+1*v*1a*5*6+5*2v*98*y*x|1+1*2z*2*2g*3+1*v*1a*5*6+b*2v*9j*z*x|1+1*v*1a*5*6+a*7h*x|1+1*v*5*6+4*2v*9h*w*10|1+1*1r*2v*2*3+1*2v*5*6+1*2v*9i*9g*10|1+1*v*5*6+7*2v*98*y*10|1+1*2z*2*2g*3+1*v*5*6+11*2v*9j*z*10|1+1*v*5*6+7*7h*10|1+1*2v*5*6+a*2v*7h*10|1+1*v*5*6+5*2v*9h*w*11|1+1*1r*2v*2*3+1*2v*5*6+1*2v*9i*9g*11|1+1*v*5*6+8*2v*98*y*11|1+1*2z*2*2g*3+1*v*5*6+q*v*6+i*2v*9j*z*11|1+1*v+7*7h*11|1+1*2v*5*6+a*2v*7h*11|1+1*v*5*6+3*2v*9h*w*12|1+1*1r*2v*2*3+1*2v*5*6+1*2v*9i*9g*12|1+1*v*5*6+9*2v*98*y*12|1+1*2z*2*2g*3+1*v*5+1l*2v*9j*z*12|1+1*v+7*7h*12|1+1*2v*5*6+a*2v*7h*12|1+1*v*5*6+4*2v*9h*w*13|1+1*1r*2v*2*3+1*2v*5*6+2*2v*9i*9g*13|1+1*v*5*6+9*2v*98*y*13|1+1*2z*2*2g*3+1*v*5*6+q*v*6+1j*v*5*6+3*2v*9j*z*13|1+1*v+7*7h*13|1+1*2v*5*6+a*2v*7h*13|1+1*v*5*6+5*2v*9h*w*14|1+1*1r*2v*2*3+1*2v*5*6+4*2v*9i*9g*14|1+1*v*5*6+8*2v*98*y*14|1+1*2z*2*2g*3+1*v*5*6+q*2v*9j*z*14|1+1*2z*2*2g*3+1*v*5*6+m*18*5*6+1*v*5*6+4*18*5*6+j*2v*9j*z*14|1+1*v+7*7h*14|1+1*2v*5*6+a*2v*7h*14|1+1*v*5*6+6*2v*9h*w*15|1+1*1r*2v*2*3+1*2v*5*6+4*2v*9i*9g*15|1+1*v*5*6+8*2v*98*y*15|1+1*2z*2*2g*3+1*v*5*6+1d*18*5*6+1*v*5*6+1*18*5*6+h*2v*9j*z*15|1+1*v+7*7h*15|1+1*2v*5*6+a*2v*7h*15|1+1*v*5*6+7*2v*9h*w*16|1+1*1r*2v*2*3+1*2v*5*6+5*2v*9i*9g*16|1+1*v*5*6+4*2p*5*6+2*2v*98*y*16|1+1*2z*2*2g*3+1*v*5*6+2k*2v*9j*z*16|1+1*v+7*7h*16|1+1*2v*5*6+a*2v*7h*16|1+1*v*5*6+4*2v*9h*w*17|1+1*2v*5*6+b*2v*9i*9g*17|1+1*v*5*6+8*2v*98*y*17|1+1*2z*2*2g*3+1*v*5+1c*v*5*6+1*1d*5*6+1*v*5*6+1p*2v*9j*z*17|1+1*2z*2*2g*3+1*19*5*6+n*2v*9j*z*17|1+1*2z*2*2g*3+1*19*5*6+q*2v*9j*z*17|1+1*2z*2*2g*3+1*19*5*6+2q*2v*9j*z*17|1+1*2z*2*2g*3+1*1c*5*6+1z*2v*9j*z*17|1+1*v+7*7h*17|1+1*2v*5*6+a*2v*7h*17|1+1*2z*2*2g*3+1*1e|1+1*1e*6+h*1e*6w*8f*8g|1+1*1e*2*2g*3+1*1e+5*1e*6+e*1e*6i*8h*8g|1+1*1e*2*8i*3+1*1e+1*1e*6+r*1e*6i*8h*8g|1+1*1e*2*8i*3+1*1e+1*1e*6+1*1e*6i*8h*8g|1+1*1e*2*8i*3+1*1e+1*1e*6+5*1e*6i*8h*8g|1+1*1e*2*8i*3+1*1e+1*1e*6+s*1e*6i*8h*8g|1+1*1e*2*8i*3+1*1e+1*1e*6+1*1e*6i*8h*8g|1+1*1e*5*6+6*8q*8g|1+1*1e*6+k*1e*6w*8f*8j|1+1*1e*2*2g*3+1*1e+5*1e*6+g*1e*6i*8h*8j|1+1*1e*2*8i*3+1*1e+1*1e*6+17*1e*6i*8h*8j|1+1*1e*2*8i*3+1*1e+1*1e*6+1*1e*6i*8h*8j|1+1*1e*2*8i*3+1*1e+1*1e*6+m*1e*6i*8h*8j|1+1*1e*2*8i*3+1*1e+1*1e*6+17*1e*6i*8h*8j|1+1*1e*2*8i*3+1*1e+1*1e*6+1*1e*6i*8h*8j|1+1*1e*2*8i*3+1*1e+1*1e*6+l*1e*6i*8h*8j|1+1*1e*2*8i*3+1*1e+1*1e*6+17*1e*6i*8h*8j|1+1*1e*2*8i*3+1*1e+1*1e*6+1*1e*6i*8h*8j|1+1*1e*2*8i*3+1*1e+1*1e*6+5*1e*6i*8h*8j|1+1*1e*2*8i*3+1*1e+1*1e*6+1h*1e*6i*8h*8j|1+1*1e*2*8i*3+1*1e+1*1e*6+1*1e*6i*8h*8j|1+1*1e*5*6+6*8q*8j|1+1*1e*6+g*1e*6w*8f*8k|1+1*1e*2*2g*3+1*1e+5*1e*6+l*1e*6i*8h*8k|1+1*1e*2*8i*3+1*1e+1*1e*6+c*1e*6i*8h*8k|1+1*1e*2*8i*3+1*1e+2*1e*6+m*1e*6i*8h*8k|1+1*1e*2*8l*3+1*1e+1*1e*6+6*1e*6i*8h*8k|1+1*1e*2*8l*3+1*1e+2*1e*6+c*1e*6i*8h*8k|1+1*1e*2*8i*3+1*1e+1*1e*6+m*1e*6i*8h*8k|1+1*1e*2*8i*3+1*1e+2*1e*6+6*1e*6i*8h*8k|1+1*1e*2*8l*3+1*1e+2*1e*6+8*1e*6i*8h*8k|1+1*1e*2*8i*3+1*1e+1*1e*6+1d*1e*6i*8h*8k|1+1*1e*2*8i*3+1*1e+1*1e*6+1*1e*6i*8h*8k|1+1*1e*5*6+6*8q*8k|1+1*1e|1+1*1e*6+17*1e|1+1*1e*6+9*1e*e*b5*b6|1+1*1e*6+1b*1e*1s*b7*b6|1+1*1e+1*1e*6+1*1e*1s*b7*b6|1+1*1e+1*1e*6+l*1e*1s*b7*b6|1+1*1e+1*1e*6+1*1e*1s*b7*b6|1+1*1e+3*1e*6+1*1e*5m*b8*b6|1+1*1e*5*6+6*bi*b6|1+1*1e*6+a*1e*e*b5*b9|1+1*1e*6+g*1e*1s*b7*b9|1+1*1e+1*1e*6+1*1e*1s*b7*b9|1+1*1e+1*1e*6+c*1e*1s*b7*b9|1+1*1e+1*1e*6+o*1e*1s*b7*b9|1+1*1e+1*1e*6+1*1e*1s*b7*b9|1+1*1e*6+1d*1e*5m*b8*b9|1+1*1e*6+2y*1e*5m*b8*b9|1+1*1e*5*6+6*bi*b9|1+1*1e*6+f*1e*e*b5*ba|1+1*1e+1*1e*6+2*1e*1s*b7*ba|1+1*1e+1*1e*6+1*1e*1s*b7*ba|1+1*1e+1*1e*6+1*1e*1s*b7*ba|1+1*1e*5*6+2*1e+1*1e*5*6+j*1e*6+1*1e*1s*b7*ba|1+1*1e+1*1e*6+h*1e*1s*b7*ba|1+1*1e*6+44*1e*5m*b8*ba|1+1*1e*5*6+6*bi*ba|1+1*1e|2+4*1e*2*2g*3+1*1e|1+1*1e*2*2g*3+1*1e|1+1*1e*2*2g*3+1*19*1a*5*6+n*19*5*6+1a*19|1+1*2z*2*2g*3+1*19*5*6+13*19|1+1*2z*2*2g*3+1*19*5*6+r*19|1+1*2z*2*2g*3+1*19*5*6+17*19|1+1*2z*2*2g*3+1*19*5*6+w*19|1+1*2z*2*2g*3+1*2k*5*6+5c*2k|1+1*2z*2*2g*3+1*19*1a*5*6+1f*19|1+1*2z*2*2g*3+1*19*1a*5*6+1*19|1+1*2z*2*2g*3+1*2f*1a*5*6+x*2f|1+1*2z*2*2g*3+1*2f*5*6+e*2k*5*6+1*2f*5*6+16*2k*5*6+d*2f*5*6+b*2f|1+1*2z*2*2g*3+1*2f*5*6+1l*2f|1+1*2z*2*2g*3+1*2f*5*6+h*2f|1+1*2z*2*2g*3+1*2f*5*6+2s*2f|1+1*2f*2*2i*3+1*2f*5*6+i*2f|1+1*2z*2*2g*3+1*2f|1+1*2z*2*2g*3+1*19*1a*5*6+c*1q|1+1*2z*2*2g*3+1*19*1a*5*6+q*19|1+1*2z*2*2g*3+1*19*5*6+d*19|1+1*2z*2*2g*3+1*19*5*6+1c*19|1+1*2z*2*2g*3+1*19*5*6+d*19|1+1*2z*2*2g*3+1*19*5*6+1d*19|1+1*2z*2*2g*3+1*19*1a*5*6+1d*19|1+1*2z*2*2g*3+1*19*1a*5*6+y*19|1+1*2z*2*2g*3+1*19*1a*5*6+1x*19|1+1*2z*2*2g*3+1*19|1+1*2z*2*2g*3+1*19*1a*5*6+l*19|1+1*2z*2*2g*3+1*19*5*6+1*19*6+b*19|1+1*2z*2*2g*3+1*19|1+d*2z*2*2g*3+1*19|1+t*2z*2*2g*3+1*19|1+e*2z*2*2g*3+1*19|1+1b*2z*2*2g*3+1*19|1+2*2z*2*2g*3+1*19*1a*5*6+p*19|1+1*2z*2*2g*3+1*19*5*6+b*19|1+1*2z*2*2g*3+1*19*5*6+p*19|1+1*2z*2*2g*3+1*19*5*6+1*19|1+1*2z*2*2g*3+1*19*5*6+d*19|1+1*2z*2*2g*3+1*19*5*6+v*19|1+1*2z*2*2g*3+1*19*5*6+1*19|1+1*2z*2*2g*3+1*19*5*6+5a*19*2m*6+33*19|1+1*2z*2*2g*3+1*19|1+1*2z*2*2g*3+1*19*1a*5*6+21*19|1+1*2z*2*2g*3+1*19*1a*5*6+z*19|1+1*2z*2*2g*3+1*19|1+t*2z*2*2g*3+1*19|1+y*2z*2*2g*3+1*19|1+y*2z*2*2g*3+1*19|1+t*2z*2*2g*3+1*19|1+1i*2z*2*2g*3+1*19|1+a*2z*2*2g*3+1*19|1+f*2z*2*2g*3+1*19|1+1m*2z*2*2g*3+1*19|1+a*2z*2*2g*3+1*2n|1+1*2z*2*2g*3+1*2n|1+1*2z*2*2g*3+1*2n*5*6+1n*2n|1+1*2z*2*2g*3+1*2n*5*6+j*2n|1+1*2z*2*2g*3+1*2n*6+p*2n|1+1*2z*2*2g*3+1*2n|1+1*2z*2*2g*3+1*2n*6+1c*2n|1+1*2z*2*2g*3+1*2n*6+1e*2n|1+1*2z*2*2g*3+1*2n*6+g*2n|1+1*2z*2*2g*3+1*2n*6+10*2n|1+1*2z*2*2g*3+1*2n*6+12*2n|1+1*2z*2*2g*3+1*2n*6+p*2n|1+1*2z*2*2g*3+1*2n*6+16*2n|1+1*2z*2*2g*3+1*2n*6+h*2n|1+1*2z*2*2g*3+1*2n*6+1q*2n|1+1*2z*2*2g*3+1*2n*6+o*2n|1+1*2z*2*2g*3+1*2n*6+h*2n|1+1*2z*2*2g*3+1*2n*6+k*2n|1+1*2z*2*2g*3+1*2n*6+1u*2n|1+1*2z*2*2g*3+1*92*5*6+2*2n*6+9*2n|1+1*2z*2*2g*3+1*2n|1+1*2z*2*2g*3+1*2n*6+1*2n|1+1*2z*2*2g*3+1*2n*5*6+3j*2n|1+1*2z*2*2g*3+1*19*1a*5*6+s*19|1+9*2z*2*2g*3+1*19*5*6+1j*19|1+1*2z*2*2g*3+1*19*5*6+9*2v*5*6+4m*19*5*6+1y*19*1a*5*6+b*19*5*6+q*19|1+1*2z*2*2g*3+1*2o*1a|1+1*2z*2*2g*3+1*2o*1a*6+7*2o*6+1z*2o|1+1*2z*2*2g*3+1*2o*1a*6+3*2o*1a*5*6+1*2o*1a*6+3*2o*6+1y*2o|1+1*2z*2*2g*3+1*2o*1a*6+7*2o*6+17*2o*5*6+9*2o*6+1o*2o|1+1*2z*2*2g*3+1*1e*5*6+3g*1e|1+1*2z*2*2g*3+1*19*1a*5*6+1o*19|1+1*2z*2*2g*3+1*2z*5*6+7*19*5*6+c*19|1+1*2z*2*2g*3+1*19*5*6+1h*19|1+1*2z*2*2g*3+1*19|1+1*2z*2*2g*3+1*2z*1a*5*6+3n*2z|1+1*2z*2*2g*3+1*2z*5*6+q*2z|1+1*2z*2*2g*3+1*2z|1+15*2z*2*2g*3+1*2z|1+17*2z*2*2g*3+1*2z|1+1l*2z*2*2g*3+1*2z|1+1t*2z*2*2g*3+1*2z|1+i*2z*2*2g*3+1*2z|1+1n*2z*2*2g*3+1*2z|1+1p*2z*2*2g*3+1*2z|1+i*2z*2*2g*3+1*2z|1+1r*2z*2*2g*3+1*2z|1+1t*2z*2*2g*3+1*2z|1+i*2z*2*2g*3+1*2z|1+a*2z*2*2g*3+1*2z*1a*5*6+c*19*1a*5*6+1h*19|1+1*19*2*2g*3+1*19*5*6+6*19*33*6+7*19*5*6+3*19*34*6+8*19*5*6+1*19|1+1*19*2*2g*3+1*19*1a*35*6+6*19*5*6+2*19*33*6+7*19*5*6+t*19|1+1*19*2*2g*3+1*19*1a*35*6+4*19*5*6+1*19*34*6+8*19*5*6+j*19|1+1*19*2*2g*3+1*19*5*6+7*19*1a*36*6*37+3*19*5*6+9*19*34*6+j*19*5*6+k*19|1+1*19*2*2g*3+1*19*1a*35*6+5*19*5*6+d*19|1+1*19*2*2g*3+1*19*1a*35*6+4*19*5*6+1*19*34*6+4*19*5*6+j*19|1+1*19*2*2g*3+1*19*5*6+7*19*1a*36*6*37+3*19*5*6+9*19*34*6+f*19*5*6+k*19|1+1*19*2*2g*3+1*19*1a*35*6+5*19*5*6+d*19|1+1*19*2*2g*3+1*19*1a*35*6+4*19*5*6+1*19*34*6+8*19*5*6+j*19|1+1*19*2*2g*3+1*19*5*6+7*19*1a*36*6*37+3*19*5*6+9*19*34*6+j*19*5*6+k*19|1+1*19*2*2g*3+1*19*1a*35*6+5*19*5*6+1*19*6+1*19*5*6+c*19|1+1*19*2*2g*3+1*19*1a*35*6+7*19*5*6+j*19|1+1*19*2*2g*3+1*19*5*6+7*19*1a*36*6*37+3*19*5*6+9*19*34*6+j*19*5*6+k*19|1+1*19*2*2g*3+1*19*1a*35*6+5*19*5*6+e*19|1+1*2z*2*2g*3+1*19|1+1*2z*2*2g*3+1*19*5*6+34*19|1+1*2z*2*2g*3+1*19*1a*5*6+v*19|1+1*2z*2*2g*3+1*19*5*6+h*19|1+1*2z*2*2g*3+1*19*5*6+7*19|1+1*2z*2*2g*3+1*2k*5*6+1s*2k*2w*6+1l*2k*2x*6+3g*2k|1+1*2z*2*2g*3+1*2k*2x*6+a*2k*2y*6+x*2k|1+1*2z*2*2g*3+1*19*5*6+2*2k*5*6+1*2k*6+9*2k|1+1*2z*2*2g*3+1*19*5*6+h*19|1+1*2z*2*2g*3+1*19*5*6+g*2k*5*6+2*19*5*6+9*19|1+1*2z*2*2g*3+1*19*5*6+j*2k*5*6+2*19*5*6+9*19|1+1*2z*2*2g*3+1*19*5*6+i*19|1+1*2z*2*2g*3+1*18|1+1*18+i*18*1x*4k*4l|1+1*18*5*6+7*18*6k*5j*4l|1+1*18*5*6+a*18*6n*5t*4l|1+1*18*5*6+1*18+o*18*1x*4k*4m|1+1*18+2w*18*6k*5j*4m|1+1*18*5*6+6*18*6n*5t*4m|1+1*18+1*18*5*6+3*18+x*18*1x*4k*4o|1+1*18+y*18*6k*5j*4o|1+1*18+28*18*6k*5j*4o|1+1*18*5*6+6*18*6n*5t*4o|1+1*18+l*18*1x*4k*4r|1+1*18+2*18*5*6+1*18+f*18*5*6+16*18+6*18*5*6+1*18+e*18*6k*5j*4r|1+1*18+18*18*6k*5j*4r|1+1*18*6+28*18*5*6+1*18*6+s*18*6k*5j*4r|1+1*18*6+1z*18*5*6+1*18*6+r*18*6k*5j*4r|1+1*18*6+1f*18*5*6+d*18*6+i*18*6k*5j*4r|1+1*18*6+w*18*6k*5j*4r|1+1*18*5*6+5*18*6+t*18*6k*5j*4r|1+1*18+6*18*6n*5t*4r|1+1*18+4*18*5*6+17*18*1x*4k*4w|1+1*18*5*6+q*18*6+d*18*5*6+o*18*6k*5j*4w|1+1*18*5*6+1q*18*6k*5j*4w|1+1*18+6*18*6n*5t*4w|1+1*18+7*18*5*6+7*18*6+4*18*5*6+3*18*1x*4k*4x|1+1*18*5*6+26*18*6k*5j*4x|1+1*18+6*18*6n*5t*4x|1+1*18+7*18*5*6+7*18*6+5*18*1x*4k*4y|1+1*18*5*6+2j*18*6k*5j*4y|1+1*18+6*18*6n*5t*4y|1+1*18+8*18*5*6+6*18*6+4*18*1x*4k*4z|1+1*18*5*6+2j*18*6k*5j*4z|1+1*18+6*18*6n*5t*4z|1+1*18+8*18*5*6+5*18*6+5*18*1x*4k*50|1+1*18*5*6+2j*18*6k*5j*50|1+1*18+6*18*6n*5t*50|1+1*18+l*18*5*6+1*18+c*18*1x*4k*52|1+1*18+2*18*5*6+g*18+9*18*5*6+h*18*6k*5j*52|1+1*18+6*18*6n*5t*52|1+1*18+1y*18*1x*4k*53|1+1*18+d*18*6k*5j*53|1+1*18*5*6+1*18+d*18*6k*5j*53|1+1*18+6*18*6n*5t*53|1+1*18+1n*18*5*6+5*18*1x*4k*56|1+1*18+c*18*6k*5j*56|1+1*18+d*18*6k*5j*56|1+1*18+6*18*6n*5t*56|1+1*18+1y*18*1x*4k*5a|1+1*18+c*18*6k*5j*5a|1+1*18+d*18*6k*5j*5a|1+1*18+6*18*6n*5t*5a|1+1*18+n*18*5*6+c*18+1*18*5*6+t*18+1*18*1x*4k*5d|2+2*18+9*18*6k*5j*5d|1+1*18+9*18*6k*5j*5d|1+1*18+6*18*6n*5t*5d|1+1*18+n*18*1x*4k*5h|1+1*18*5*6+5*18+15*18*5*6+1*18*6k*5j*5h|1+1*18+6*18*6n*5t*5h|1+1*18+1*18*5*6+19|1+1*7i|1+1*18|2+2*18*5*6+l*18*6|1+1*18*6+5*18*6*5u*en*eo|1+1*18*6+4*18*6*5u*en*eo|1+1*18*6+2*18*5*6+2*18*6+i*18*5*6+1*18*6+6*18*6*9x*eu*eo|1+1*18*6+r*18*5*6+1*18*6+x*18*5*6+1*18*6+1*18*6*9x*eu*eo|1+1*18*6+a*18*6*9x*eu*eo|1+1*18*6+1*18*6*9x*eu*eo|1+1*18*6+5*18*6*9x*eu*eo|1+1*18*6+a*18*6*9x*eu*eo|1+1*18*6+1*18*6*9x*eu*eo|2+2*18*5*6+6*18*6*9y*ep*eo|1+1*18*6+9*18*5*6+6*18*6*5u*en*er|1+1*18*5*6+35*18*6*5u*en*er|1+1*18*6+a*18*5*6+o*18*6*9x*eu*er|1+1*18*6+9*18*5*6+a*18*6+9*18*6*9x*eu*er|1+1*18*6+1*18*5*6+t*18*6*9x*eu*er|1+1*18*6+6*18*5*6+j*18*6+6*18*6*9x*eu*er|1+1*18*6+9*18*5*6+a*18*6+9*18*5*6+1*18*6*9x*eu*er|1+1*18*6+1*18*5*6+t*18*6*9x*eu*er|1+1*18*5*6+6*18*6*9y*ep*er|1+1*18*6+j*18*6*5u*en*es|1+1*18*6+53*18*6*5u*en*es|1+1*18*6+9*18*6*9x*eu*es|1+1*18*6+9*18*6*9x*eu*es|1+1*18*6+1*18*6*9x*eu*es|1+1*18*6+5*18*6*9x*eu*es|1+1*18*6+a*18*6*9x*eu*es|1+1*18*6+1*18*6*9x*eu*es|1+1*18*5*6+6*18*6*9y*ep*es|1+1*18*5*6+l*18*6*5u*en*et|1+1*18*5*6+m*18*6*5u*en*et|1+1*18*5*6+12*18*5u*en*et|1+1*18*5*6+b*18*ev*6*9x*eu*et|1+1*18*5*6+8*18*6*9x*eu*et|1+1*18*5*6+2d*18*9x*eu*et|1+1*18*5*6+6*18*6*9y*ep*et|1+1*18*5*6+v*18*5u*en*ey|1+1*18*5*6+43*18*9x*eu*ey|1+1*18*5*6+6*18*9y*ep*ey|1+1*18|6+6*bp|1+1*bq*1a*5*6*2c+a|1+1*bq|1+1*bq+5*bq*c3*c4|1+1*bq+c*bq*c5*c4|1+1*bq+b*bq*c6*c4|1+1*bq+7*bq*c3*c7|1+1*bq+2x*bq*c5*c7|1+1*bq+1w*bq*5*6+1*bq+3j*bq*c5*c7|1+1*bq+2y*bq*c5*c7|1+1*bq+k*bq*c5*c7|1+1*bq+8*bq*c5*c7|1+1*bq+9*bq*c5*c7|1+1*bq+7*bq*c5*c7|1+1*bq+8*bq*c5*c7|1+1*bq+9*bq*c5*c7|1+1*bq+a*bq*c5*c7|1+1*bq+1*bq*c5*c7|1+1*bq+o*bq*c5*c7|1+1*bq+8*bq*c5*c7|1+1*bq+b*bq*c5*c7|1+1*bq+1*bq*c5*c7|1+1*bq+4h*bq*c5*c7|1+1*bq+d*bq*c6*c7|1+1*bq+4*bq*c3*c8|1+1*bq+m*bq*c5*c8|1+1*bq+g*bq*c5*c8|1+1*bq+g*bq*c5*c8|1+1*bq+j*bq*c5*c8|1+1*bq+1*bq*c5*c8|1+1*bq+9*bq*c5*c8|1+1*bq+e*bq*c5*c8|2+2*bq+2t*bq*c5*c8|1+1*bq+1*bq*c5*c8|1+1*bq+b*bq*c6*c8|1+1*bq+6*bq*c3*c9|1+1*bq+o*bq*c5*c9|1+1*bq+h*bq*c5*c9|1+1*bq+i*bq*c5*c9|1+1*bq+n*bq*c5*c9|1+1*bq+1*bq*c5*c9|1+1*bq+9*bq*c5*c9|1+1*bq+f*bq*c5*c9|1+1*bq+c*bq*c6*c9|1+1*bq+3*bq*c3*ca|1+1*bq+o*bq*c5*ca|1+1*bq+m*bq*c5*ca|1+1*bq+n*bq*c5*ca|1+1*bq+x*bq*c5*ca|1+1*bq+1*bq*c5*ca|1+1*bq+9*bq*c5*ca|1+1*bq+e*bq*c5*ca|1+1*bq+1*bq*c5*ca|1+1*bq+16*bq*c5*ca|1+1*bq+d*bq*c6*ca|1+1*bq+4*bq*c3*cb|1+1*bq+o*bq*c5*cb|1+1*bq+p*bq*c5*cb|1+1*bq+1*bq*c5*cb|1+1*bq+8*bq*c5*cb|1+1*bq+h*bq*c5*cb|1+1*bq+c*bq*c6*cb|1+1*bq+5*bq*c3*cc|1+1*bq+33*bq*c5*cc|1+1*bq+1*bq*c5*cc|1+1*bq+e*bq*c5*cc|1+1*bq+1m*bq*c5*cc|1+1*bq+1*bq*c5*cc|1+1*bq+8*bq*c5*cc|1+1*bq+i*bq*c5*cc|1+1*bq+q*bq*c5*cc|1+1*bq+f*bq*c5*cc|1+1*bq+d*bq*c6*cc|1+1*bq+6*bq*c3*cd|1+1*bq+37*bq*c5*cd|1+1*bq+1*bq*c5*cd|1+1*bq+e*bq*c5*cd|1+1*bq+1p*bq*c5*cd|1+1*bq+1*bq*c5*cd|1+1*bq+8*bq*c5*cd|1+1*bq+i*bq*c5*cd|1+1*bq+g*bq*c5*cd|1+1*bq+e*bq*c6*cd|1+1*bq+4*bq*c3*ce|1+1*bq+11*bq*c5*ce|1+1*bq+1s*bq*c5*ce|1+1*bq+1*bq*c5*ce|1+1*bq+o*bq*c5*ce|1+1*bq+i*bq*c5*ce|1+1*bq+d*bq*c6*ce|1+1*bq*5*6+7*c3*cm|1+1*bq*5*6+1o*c5*cm|1+1*bq*5*6+1e*bq*c5*cm|2+2*bq*5*6+8*bq*c5*cm|1+1*bq*5*6+h*bq*c5*cm|1+1*bq+c*c6*cm|1+1*bq|1+2*4*1a*5*6+i*4|1+1*4*1a*5*6+a*4*1a*6+8*4*hy*hz|1+1*4*1a*6+m*4*i0*hz|1+1*4*1a*6+a*4*i1*hz|1+1*4*5*6+5*4*hy*i2|1+1*4*2*20*3+1*4*5*6+3c*4*i0*i2|1+1*4*2*20*3+1*4*5*6+29*4*i0*i2|1+1*4*2*20*3+1*4*5*6+33*4*i0*i2|1+1*4*2*20*3+1*4*5*6+27*4*i0*i2|1+1*4*5*6+l*4*i1*i2|1+1*4*5*6+6*4*hy*i3|1+1*4*2*20*3+1*4*5*6+a*4*6+m*4*5*6+1*4*i0*i3|1+1*4*5*6+1w*4*i0*i3|1+1*4*2*20*3+1*4*5*6+22*4*i0*i3|2+2*4*6+l*4*i1*i3|1+1*4*5*6+f*4*hy*i4|1+1*4*2*20*3+1*4*5*6+1a*4*1a*i5*6+3*4*5*6+9*4*i0*i4|1+1*4*2*20*3+1*4*5*6+o*4*i0*i4|1+1*4*2*31*3+1*4*5*6+g*4*i0*i4|1+1*4*2*31*3+1*4*5*6+18*4*i0*i4|1+1*4*2*31*3+1*4*5*6+p*4*i0*i4|1+1*4*5*6+1i*4*i0*i4|1+1*4*5*6+l*4*i1*i4|1+1*bq|2+2*bq*1a*5*6+a|1+1*bq|1+1*bq*5*6+a*bq*jx*jy|1+1*bq*5*6+c*bq*jz*jy|1+1*bq*5*6+a*bq*k0*jy|1+1*bq*5*6+k*jx*k4|1+1*bq*1a*2m*6+9*bq*2m*6+13*bq*1a*2m*6+4*bq*2m*6+f*jz*k4|1+1*bq*5*6+b*k0*k4|1+1*bq*5*6+6*bq*jx*k1|1+1*bq*5*6+t*bq*jz*k1|1+1*bq*5*6+w*bq*jz*k1|2+2*bq*5*6+5p*bq*jz*k1|2+2*bq*5*6+i*bq*jz*k1|2+2*bq+n*bq*jz*k1|1+1*bq+1g*bq*jz*k1|2+2*bq+i*bq*jz*k1|1+1*bq+1i*bq*jz*k1|2+2*bq*5*6+i*bq*jz*k1|1+1*bq*6+1f*bq*jz*k1|2+2*bq*5*6+2l*bq*jz*k1|1+1*bq*6+1b*bq*jz*k1|1+1*bq+b*bq*k0*k1|1+1*bq*5*6+1h*bq*jx*k2|1+1*bq*2*9*3*a+1*bq*5*6+g*bq*6+x*bq*5*6+p*bq*jz*k2|1+1*bq*2*9*3*b+1*bq*6+e*bq*5*6+6*bq+9*bq*5*6+1*bq*6+w*bq*5*6+m*bq*6+f*bq*5*6+8*bq*6+5*bq*jz*k2|1+1*bq*2*9*3*94+1*bq*6+z*bq*5*6+9*bq*6+6*bq*5*6+l*bq*6+j*bq*5*6+f*bq*6+k*bq*jz*k2|1+1*bq*2*9*3*9o+1*bq*5*6+1*bq*6+v*bq*5*6+t*bq*6+p*bq*5*6+g*bq*6+2*bq*5*6+2*bq*6+l*bq*5*6+s*bq*6+1*bq*5*6+3*bq*6+1*bq*5*6+a*bq*jz*k2|1+1*bq*2*9*3+1*bq*6+w*bq*5*6+11*bq*6+17*bq*5*6+p*bq*6+1*bq*5*6+1*bq*6+4*bq*5*6+1*bq*6+3*bq*5*6+1*bq*jz*k2|1+1*bq*2*9*3+1*bq*5*6+58*bq*jz*k2|1+1*bq+b*bq*k0*k2|1+1*bq*5*6+x*bq*jx*k3|1+1*bq+e*bq*6+9*bq*jz*k3|1+1*bq+1g*bq*jz*k3|1+1*bq+f*bq*jz*k3|2+2*bq*5*6+q*bq*jz*k3|1+1*bq+1i*bq*jz*k3|1+1*bq+l*bq*jz*k3|1+1*bq+m*bq*jz*k3|2+2*bq*5*6+q*bq*jz*k3|1+1*bq+u*bq*jz*k3|1+1*bq+k*bq*jz*k3|1+1*bq+i*bq*jz*k3|1+1*bq+j*bq*jz*k3|1+1*bq+b*bq*k0*k3|1+1*bq*5*6+1h*jx*k6|1+1*bq*5*6+1i*jz*k6|1+1*bq*jz*k6|1+1*bq*6+1g*bq*jz*k6|1+1*bq*6+f*bq*5*6+3*bq*jz*k6|2+2*bq*6+t*bq*5*6+1*bq*6+3*bq*jz*k6|2+2*bq*5*6+c*bq*6+a*bq*5*6+1*bq*6+1*bq*5*6+4j*bq*jz*k6|1+1*bq+b*k0*k6|1+1*bq*5*6+1j*jx*k5|1+1*bq+o*bq*5*6+6*bq+r*jz*k5|1+1*bq*jz*k5|1+1*bq+1j*bq*jz*k5|1+1*bq+p*bq*jz*k5|1+1*bq+q*bq*jz*k5|1+1*bq+v*bq*jz*k5|1+1*bq+u*bq*jz*k5|1+1*bq+k*bq*jz*k5|1+1*bq+u*bq*jz*k5|2+2*bq*5*6+w*bq*jz*k5|1+1*bq+b*k0*k5|1+1*bq*5*6+q*jx*k7|1+1*bq*5*6+1q*jz*k7|1+1*bq*5*6+6*bq*jz*k7|1+1*bq*1a*5*6+g*bq*jz*k7|1+1*bq+1i*bq*jz*k7|1+1*bq+l*bq*jz*k7|1+1*bq+n*bq*jz*k7|1+1*bq+o*bq*jz*k7|1+1*bq+v*bq*jz*k7|1+1*bq+2p*bq*jz*k7|1+1*bq+3*bq*jz*k7|2+2*bq*1a*5*6+l*bq*jz*k7|1+1*bq+r*bq*jz*k7|1+1*bq+v*bq*jz*k7|1+1*bq+4*bq*5*6+1*bq+k*bq*jz*k7|3+3*bq+b*k0*k7|1+1*bq*5*6+m*jx*k9|1+1*bq*5*6+1i*jz*k9|1+1*bq*jz*k9|1+1*bq+1i*bq*jz*k9|1+1*bq+g*bq*5*6+3*bq*jz*k9|1+1*bq+g*bq*5*6+3*bq*jz*k9|1+1*bq+g*bq*5*6+3*bq*jz*k9|1+1*bq+g*bq*5*6+3*bq*jz*k9|1+1*bq+g*bq*5*6+3*bq*jz*k9|1+1*bq+q*bq*jz*k9|1+1*bq+s*bq*jz*k9|2+2*bq*5*6+s*bq*jz*k9|1+1*bq+b*k0*k9|1+1*bq|1+1*bq*1a*5*6+p|1+1*bq|1+1*bq*5*6+a*bq*l1*l2|1+1*bq*5*6+b*bq*l3*l2|1+1*bq*5*6+a*bq*l4*l2|1+1*bq+u*bq*5*6+i*bq*l1*l5|1+1*bq*2*9*3*a+1*bq*2x*6+62*bq*l3*l5|1+1*bq*2*9*3*b+1*bq*5*6+18*bq*6+8*bq*5*6+7*bq*6+n*bq*5*6+p*bq*6+i*bq*5*6+9*bq*6+1k*bq*5*6+6*bq*6+k*bq*5*6+7*bq*6+1*bq*l3*l5|1+1*bq*2*9*3*94+1*bq*5*6+3m*bq*l3*l5|1+1*bq*2*9*3*9o+1*bq*6+3a*bq*5*6+1*bq*6+1l*bq*5*6+1*bq*6+s*bq*5*6+1*bq*6+1v*bq*5*6+1*bq*6+1s*bq*5*6+1*bq*6+39*bq*5*6+1*bq*6+27*bq*l3*l5|1+1*bq*2*9*3*9p+1*bq*5*6+1*bq*6+2c*bq*5*6+2*bq*l3*l5|1+1*bq*2*9*3+1*bq*5*6+4*bq*6+1t*bq*5*6+1*bq*l3*l5|1+1*bq*2*9*3+1*bq*6+i*bq*5*6+4*bq*6+22*bq*5*6+2*bq*6+7*bq*5*6+1*bq*6+1*bq*l3*l5|2+2*bq*5*6+b*bq*l4*l5|1+1*bq*5*6+l*bq*l1*l6|1+1*bq*2*9*3*a+1*bq*2m*6+35*bq*l3*l6|1+1*bq*2*9*3*b+1*bq*6+c*bq*5*6+e*bq*6+a*bq*l3*l6|1+1*bq*2*30*3*a+1*bq*6+h*bq*l3*l6|1+1*bq*2*30*3*b+1*bq*6+1*bq*5*6+2*bq*6+f*bq*l3*l6|1+1*bq*2*30*3*94+1*bq*5*6+2*bq*6+9*bq*l3*l6|1+1*bq*2*9*3*94+1*bq*6+38*bq*l3*l6|1+1*bq+b*bq*l4*l6|1+1*bq|1+1|1+1","opCount":5725,"appliedAttribsCount":16538,"maxAttribsOnSingleOp":6},"pool":{"numToAttrib":{"0":["author","a.4fz9s4pIrvcRKF5l"],"1":["align","left"],"2":["insertorder","first"],"3":["lmkr","1"],"4":["author","9832037334"],"5":["font-color-000000","true"],"6":["font-size-medium","true"],"7":["struct-table738c428f0ef240c3b71740d4d7a7e9e8_colf38c6699d4444c319d8f45444c5058c9","true"],"8":["struct-table738c428f0ef240c3b71740d4d7a7e9e8_rowd2d8d3a5cf224e72886d6e007ac54ff1","true"],"9":["list","number1"],"10":["start","1"],"11":["start","2"],"12":["struct-prop-table-col_width_percentage_51","true"],"13":["struct-table738c428f0ef240c3b71740d4d7a7e9e8_colf15521315ba7499fa77369385ffc40e4","true"],"14":["struct-prop-table-col_width_percentage_16","true"],"15":["struct-table738c428f0ef240c3b71740d4d7a7e9e8_colc67e9501ee104e228213d2cc3f3cae5b","true"],"16":["struct-table738c428f0ef240c3b71740d4d7a7e9e8_rowf7c36e37fb854f81a859fe431a04ebf3","true"],"17":["struct-table738c428f0ef240c3b71740d4d7a7e9e8_row3d6e6cfa5c5c4d218363b09eb6c008e2","true"],"18":["struct-table738c428f0ef240c3b71740d4d7a7e9e8_rowc841ee95097748788e3dabb0553fbfe5","true"],"19":["removed","true"],"20":["struct-table738c428f0ef240c3b71740d4d7a7e9e8_rowe3fcfd73180c4fea86ef0ec696f5dc7c","true"],"21":["author","15074961011"],"22":["struct-table4f884bfbbc4f4d6c87358211b41754fb_col83b2eb17a97647fd9770af9dc3848d31","true"],"23":["struct-table4f884bfbbc4f4d6c87358211b41754fb_row1c05ae3594c84102a6d5e10b67ca2ffa","true"],"24":["struct-table4f884bfbbc4f4d6c87358211b41754fb_col4f646f8b2b8d418c8dc1bf2939426ebd","true"],"25":["struct-table4f884bfbbc4f4d6c87358211b41754fb_col71720e2baa68469eb265b3aa57295672","true"],"26":["struct-table4f884bfbbc4f4d6c87358211b41754fb_rowda1e25cd1f144af3aa693e0470598d9a","true"],"27":["struct-table4f884bfbbc4f4d6c87358211b41754fb_row0cce19d5a60145cf813c0ad504d59826","true"],"28":["struct-table4f884bfbbc4f4d6c87358211b41754fb_rowb4e1c35988704721b38ef2bac3833b8d","true"],"29":["struct-table4f884bfbbc4f4d6c87358211b41754fb_colb35a2fad30424d56ad0603b546f7edcc","true"],"30":["struct-table4f884bfbbc4f4d6c87358211b41754fb_rowdb7163ab06534d3aa162c2a8db43a3a5","true"],"31":["author","15068635168"],"32":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_col15ff29fc8ff0455b8a8629c4fc6dc30e","true"],"33":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_row9f5ff086cf4d40ca84132667838b6afe","true"],"34":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_col2c0dd52ec2b24d67a15f4d98775b4d34","true"],"35":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_cola84c2b90e8c943528a6f40099b0f6557","true"],"36":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_row1f80488d505341d09e9903da887d494d","true"],"37":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_row23634cfbbb4d416baf5750f7eb9e1479","true"],"38":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_rowe8e2093fd6364b45b1bbc8443168ed26","true"],"39":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_row3cb3047aad164a9cabb7773f1d239833","true"],"40":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_row342009ecac7c44d8b3e22ba4a231f121","true"],"41":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_row10151362bb5d438f99e5567885502eb4","true"],"42":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_rowcde50a36e4224eb98c63888a79beea75","true"],"43":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_rowf52ed1ec57054fe4a32987c187e38c20","true"],"44":["author","15068878672"],"45":["author","15071231800"],"46":["bold","true"],"47":["bold",""],"48":["author","15070996094"],"49":["author","15068573797"],"50":["author","15076432192"],"51":["struct-tablefe592a11717d40d09ab744869789c4c0_colb797e01d8f9b40d9955a6d0dc4ff4bca","true"],"52":["struct-tablefe592a11717d40d09ab744869789c4c0_row414859b48d67409d98daa59c3a1ef058","true"],"53":["struct-tablefe592a11717d40d09ab744869789c4c0_col131fb4b04c56423793e253930889c762","true"],"54":["struct-tablefe592a11717d40d09ab744869789c4c0_col5f55426ae01d40b6a636241290bafddd","true"],"55":["struct-tablefe592a11717d40d09ab744869789c4c0_rowa71bc3a821ad46a4aa64d2523cf8b2a0","true"],"56":["struct-tablefe592a11717d40d09ab744869789c4c0_row32345f919b264b7488bd5b4087357890","true"],"57":["struct-tablefe592a11717d40d09ab744869789c4c0_rowe6610dc9e5c746b1aaa7529b2cb504ad","true"],"58":["struct-tablefe592a11717d40d09ab744869789c4c0_row31fab39c879b4188a96d902341b18221","true"],"59":["struct-tablefe592a11717d40d09ab744869789c4c0_rowf3e0a73177564486bca818641e4c276f","true"],"60":["struct-table4f884bfbbc4f4d6c87358211b41754fb_row8bafb3ae5dd149239f60f98a2129040b","true"],"61":["struct-table4f884bfbbc4f4d6c87358211b41754fb_row49a25724b8f34c749e66ea7e2de7678a","true"],"62":["author","15068084061"],"63":["align","center"],"64":["struct-prop-table-col_width_percentage_25","true"],"65":["struct-table296c5d3b2edc43de9ce5d713a7c72068_col7ff82279583d45a3aaa32df9a0242181","true"],"66":["struct-table296c5d3b2edc43de9ce5d713a7c72068_row93f67c1f3fd74ef9a9d445de2e1992e6","true"],"67":["struct-prop-table-col_width_percentage_49","true"],"68":["struct-table296c5d3b2edc43de9ce5d713a7c72068_col939d943e25a3491bab692f6f01a77a2f","true"],"69":["struct-prop-table-col_width_percentage_26","true"],"70":["struct-table296c5d3b2edc43de9ce5d713a7c72068_col323c1074b7c540c4847746e11079c243","true"],"71":["struct-table296c5d3b2edc43de9ce5d713a7c72068_rowb7674aa4ebee483792623a8eae6919a8","true"],"72":["list","bullet1"],"73":["struct-table296c5d3b2edc43de9ce5d713a7c72068_row2433706f390148a0b6748218a96467da","true"],"74":["struct-table296c5d3b2edc43de9ce5d713a7c72068_row0e8f1ec7247249f5b10408a28f834fda","true"],"75":["struct-table296c5d3b2edc43de9ce5d713a7c72068_rowaa7b4d875c084096bbfeacd00537f796","true"],"76":["struct-table98d6bff17e794f1287b6e68bd1a14a12_col283e69c9d0024a96b2940297699c8ea1","true"],"77":["struct-table98d6bff17e794f1287b6e68bd1a14a12_row6c257cdafc434d95853a72626dcd3fa5","true"],"78":["struct-table98d6bff17e794f1287b6e68bd1a14a12_cold737d93492a742d5a75efb709a8a7781","true"],"79":["struct-table98d6bff17e794f1287b6e68bd1a14a12_colccbd0dbcbd2d47a28c2fb24f8c23a220","true"],"80":["struct-table98d6bff17e794f1287b6e68bd1a14a12_rowe0385a3e1f89400fa2aed689b24b2285","true"],"81":["struct-table98d6bff17e794f1287b6e68bd1a14a12_row10278b26a6d6478d9644e92fe5e69a16","true"],"82":["struct-table98d6bff17e794f1287b6e68bd1a14a12_row453d4adac81343449ec0899b52ad099b","true"],"83":["struct-table98d6bff17e794f1287b6e68bd1a14a12_row50c8f470037441b291d21f68f0aa5afa","true"],"84":["underline","true"],"85":["author","15069407901"],"86":["author","15075124868"],"87":["author","15069610759"],"88":["list","indent1"],"89":["list","indent5"],"90":["list","indent8"],"91":["author","15076005132"],"92":["author","15068674341"],"93":["author","15068513155"],"94":["font-color-202124","true"],"95":["author","15072471581"],"96":["author","15070007870"],"97":["author","15071723250"],"98":["font-color-5f6368","true"],"99":["font-color-4d5156","true"],"100":["font-color-4d5156",""],"101":["font-color-5f6368",""],"102":["author","15068530399"],"103":["author","12061380756"],"104":["font-color-242729","true"],"105":["font-color-40424e","true"],"106":["font-color-333333","true"],"107":["author","15067931284"],"108":["list","number2"],"109":["list","bullet2"],"110":["list","indent2"],"111":["font-color-6a3e3e","true"],"112":["font-color-2a00ff","true"],"113":["font-color-7f0055","true"],"114":["font-color-0000c0","true"],"115":["italic","true"],"116":["struct-table67474cbaf5614794a6f95e6f06371343_colb208eb4d7b0f48ab837ff2111b1a7991","true"],"117":["struct-table67474cbaf5614794a6f95e6f06371343_rowe618caee3eae4f798d04bec79e1d22ea","true"],"118":["struct-table67474cbaf5614794a6f95e6f06371343_colf0e9f65f39304027a564f5e44c0a5631","true"],"119":["struct-table67474cbaf5614794a6f95e6f06371343_colf966ec08d0244f9d87184b168f7e230a","true"],"120":["struct-table67474cbaf5614794a6f95e6f06371343_coldc25f0f1e36b4c32a17f85cf9e7261a9","true"],"121":["struct-table67474cbaf5614794a6f95e6f06371343_col39ee2537ba384e8984c811db77c56fa2","true"],"122":["struct-table67474cbaf5614794a6f95e6f06371343_col6f7db70bec4f4e37a141cf7d5c3f2290","true"],"123":["struct-table67474cbaf5614794a6f95e6f06371343_colcc092d16ec8e4984b13bdc42914305f9","true"],"124":["struct-table67474cbaf5614794a6f95e6f06371343_rowe4e75bd586f74bd79cec9dc861aa1b26","true"],"125":["struct-table67474cbaf5614794a6f95e6f06371343_rowb6a9dcb0f5e84bdf9f6d35af9e647761","true"],"126":["struct-table67474cbaf5614794a6f95e6f06371343_colundefined","true"],"127":["struct-table67474cbaf5614794a6f95e6f06371343_row8a2d285bcd5c4b458420e4cafb192891","true"],"128":["struct-table67474cbaf5614794a6f95e6f06371343_row64fc349170e245b1afb047f67efc7c50","true"],"129":["struct-table67474cbaf5614794a6f95e6f06371343_row70743d20ee9048fc96dbd98996598a6f","true"],"130":["struct-table67474cbaf5614794a6f95e6f06371343_rowe2c4184416884f78a4fb49b93d84d562","true"],"131":["struct-table67474cbaf5614794a6f95e6f06371343_rowddf2549746f74578b6b17b3195fd92e8","true"],"132":["struct-table67474cbaf5614794a6f95e6f06371343_row2c3db19e624a421c80375d6da4b23392","true"],"133":["struct-table67474cbaf5614794a6f95e6f06371343_rowc3e0d8154d5844d587882c7df8548018","true"],"134":["struct-table67474cbaf5614794a6f95e6f06371343_rowfda1f398d0a045dc88fe52db273cab1a","true"],"135":["struct-table67474cbaf5614794a6f95e6f06371343_row8ab01bb7d5de4cddb89663651c522683","true"],"136":["struct-table67474cbaf5614794a6f95e6f06371343_rowb61fb605d6554ba4ae08e2f48904f74c","true"],"137":["struct-table67474cbaf5614794a6f95e6f06371343_row3d73f207b72e4178bff47dd4b7e74732","true"],"138":["struct-table67474cbaf5614794a6f95e6f06371343_rowd399e38849254c1ca439777c4cb150c0","true"],"139":["struct-table67474cbaf5614794a6f95e6f06371343_rowb8dfef32ed4c4453a2ee0f421a5b32fa","true"],"140":["struct-table67474cbaf5614794a6f95e6f06371343_row4070068b80f94418ba38b4ac331d6c34","true"],"141":["struct-table67474cbaf5614794a6f95e6f06371343_row737eac07425c414a8a3a05d84950ec95","true"],"142":["struct-table67474cbaf5614794a6f95e6f06371343_row193c9698958e4a4aaa1f435027aa5243","true"],"143":["struct-table67474cbaf5614794a6f95e6f06371343_row2dc6ced4b1d24b5f91d9094dd3d17770","true"],"144":["struct-table67474cbaf5614794a6f95e6f06371343_rowf515b21fc93b46dbad148f7145c34994","true"],"145":["struct-table67474cbaf5614794a6f95e6f06371343_row33f45de4a8204d95b3a9522132ef9b9d","true"],"146":["struct-table67474cbaf5614794a6f95e6f06371343_rowe8e5d5171a904b44bc0426e56847b05c","true"],"147":["struct-table67474cbaf5614794a6f95e6f06371343_row1873fe8290994a8da6c514e44a888277","true"],"148":["struct-table67474cbaf5614794a6f95e6f06371343_row56c9b12f48e24a55875eb2e70efe10f9","true"],"149":["struct-table67474cbaf5614794a6f95e6f06371343_row6eb6dfef88b04a669882f32001cbab77","true"],"150":["struct-table67474cbaf5614794a6f95e6f06371343_rowbc8cc14910634af8adbd82995d21453d","true"],"151":["struct-table67474cbaf5614794a6f95e6f06371343_row252f9c2d5426409081792896d8172f49","true"],"152":["struct-table67474cbaf5614794a6f95e6f06371343_rowfa352c1cd235446282af7d34cac02ec1","true"],"153":["struct-table67474cbaf5614794a6f95e6f06371343_rowede6944c79ba4e0aa2db2f3861fe060d","true"],"154":["struct-table67474cbaf5614794a6f95e6f06371343_row27a8e48b554f494491ec63e49220d18e","true"],"155":["struct-table67474cbaf5614794a6f95e6f06371343_rowbce62b45dd974628a9d3b2ecff9d7e85","true"],"156":["struct-table67474cbaf5614794a6f95e6f06371343_rowd241e838fab44a23835a24699d3dc687","true"],"157":["struct-table67474cbaf5614794a6f95e6f06371343_row3e21737a904b4f189b4d24bba0d719fd","true"],"158":["struct-prop-table-col_width_percentage_24",""],"159":["struct-prop-table-col_width_percentage_3","true"],"160":["struct-prop-table-col_width_percentage_24","true"],"161":["struct-prop-table-col_width_percentage_25",""],"162":["struct-prop-table-col_width_percentage_3",""],"163":["struct-prop-table-col_width_percentage_4","true"],"164":["struct-tablec52affe5ab66420ebbfd60881628a274_col0c9e2efe185f44fe9b0216b414ffa8c8","true"],"165":["struct-tablec52affe5ab66420ebbfd60881628a274_rowe814922bebf24e0a817b0a3efa61bc31","true"],"166":["struct-tablec52affe5ab66420ebbfd60881628a274_rowf5d7c7211aa4464cadb7ee1b0614b10e","true"],"167":["struct-tablec52affe5ab66420ebbfd60881628a274_row8b4430acdadb49f3999cfe5446d6c8c9","true"],"168":["struct-tablec52affe5ab66420ebbfd60881628a274_row8cc6e3cdd68044cca24d16e8f49b9a26","true"],"169":["struct-tablec52affe5ab66420ebbfd60881628a274_row579e568a7aa74728ae0d5d880f1d31ab","true"],"170":["struct-tablec52affe5ab66420ebbfd60881628a274_rowf6a0804378804252a81d6d3f9475ff5a","true"],"171":["struct-tablec52affe5ab66420ebbfd60881628a274_row1da6bcbe5d244ccbbf5f69898a91098e","true"],"172":["struct-tablec52affe5ab66420ebbfd60881628a274_roweca0435ee5f3408a824c6a6d232e5aff","true"],"173":["struct-tablec52affe5ab66420ebbfd60881628a274_rowaaf27ae697294d45a31e43928871452a","true"],"174":["struct-tablec52affe5ab66420ebbfd60881628a274_row5ccb4e7cc94d450d802b050c0a2eed50","true"],"175":["struct-tablec52affe5ab66420ebbfd60881628a274_row8811210e20e94874b0272a01cf23eb74","true"],"176":["struct-tablec52affe5ab66420ebbfd60881628a274_rowa078f305e75d4797890bc035bf02b401","true"],"177":["struct-tablec52affe5ab66420ebbfd60881628a274_row0385b9f36b5340b4a4d1d59ddbafc75b","true"],"178":["struct-tablec52affe5ab66420ebbfd60881628a274_row9315de7ffbbd418ea2c16e1d1ad83891","true"],"179":["struct-tablec52affe5ab66420ebbfd60881628a274_row656c9bde0a7b47a1bef427c6f6605bbf","true"],"180":["struct-tablec52affe5ab66420ebbfd60881628a274_rowc057e942bbe94213b7171e86bf48eea8","true"],"181":["struct-tablec52affe5ab66420ebbfd60881628a274_rowf68b4348fad54c9ea6830dbdcaad9e95","true"],"182":["struct-tablec52affe5ab66420ebbfd60881628a274_row92bf71e5ac74462fa96a6cfe6c85186e","true"],"183":["struct-tablec52affe5ab66420ebbfd60881628a274_rowcbeb8223710445c7b03be2ae36afa509","true"],"184":["struct-tablec52affe5ab66420ebbfd60881628a274_rowe39431d15a9445c9b3bc81da4f0e7e48","true"],"185":["struct-tablec52affe5ab66420ebbfd60881628a274_row226652cba119479b86e9e06d95c63af9","true"],"186":["struct-tablec52affe5ab66420ebbfd60881628a274_rowcbd6420f93ec4a8ab5bcd4485500e714","true"],"187":["struct-tablec52affe5ab66420ebbfd60881628a274_row44fdc8c5db2e42ffbea3e2f73abc4d8c","true"],"188":["struct-tablec52affe5ab66420ebbfd60881628a274_rowbe2047282b4f43e6b038b271b4aec0f3","true"],"189":["struct-tablec52affe5ab66420ebbfd60881628a274_rowdedb47a639ea4f15b3a3cfd89dcdf3e7","true"],"190":["struct-tablec52affe5ab66420ebbfd60881628a274_row132bdab4f30840b99c3489623df02bae","true"],"191":["struct-tablec52affe5ab66420ebbfd60881628a274_row269e23701f3c4f3d92443b2e6d526fdb","true"],"192":["struct-tablec52affe5ab66420ebbfd60881628a274_row7751afac21d44d4481fc653631cb0555","true"],"193":["struct-tablec52affe5ab66420ebbfd60881628a274_rowbe31de988d3445bb9b1d55eb7b91c077","true"],"194":["struct-tablec52affe5ab66420ebbfd60881628a274_row6ec8b2db739344b1bd0d6b6f4d7e01e1","true"],"195":["struct-tablec52affe5ab66420ebbfd60881628a274_row8de359b51f3d46c6afb02c84e4eeb959","true"],"196":["struct-tablec52affe5ab66420ebbfd60881628a274_row153f1405a6d0402f8ea1c51a16acbb4e","true"],"197":["struct-tablec52affe5ab66420ebbfd60881628a274_rowf6f3d6f33da345d9915825dd4695c7c2","true"],"198":["struct-tablec52affe5ab66420ebbfd60881628a274_row4c2940192bda4448821ce57af2f72093","true"],"199":["struct-tablec52affe5ab66420ebbfd60881628a274_col686571e641fe47d392ad6388e1d8fe46","true"],"200":["struct-prop-table-col_width_percentage_45","true"],"201":["struct-prop-table-col_width_percentage_55","true"],"202":["struct-prop-table-col_width_percentage_34","true"],"203":["struct-prop-table-col_width_percentage_45",""],"204":["struct-tablec52affe5ab66420ebbfd60881628a274_col0f0e068d7a0a45a589dc735e97ccb01e","true"],"205":["struct-prop-table-col_width_percentage_41","true"],"206":["struct-prop-table-col_width_percentage_55",""],"207":["struct-prop-table-col_width_percentage_34",""],"208":["struct-prop-table-col_width_percentage_41",""],"209":["struct-tablec52affe5ab66420ebbfd60881628a274_col3a9a55075aac4b2498a6d5cf45b30db2","true"],"210":["struct-prop-table-col_width_percentage_33","true"],"211":["struct-prop-table-col_width_percentage_42",""],"212":["struct-prop-table-col_width_percentage_21",""],"213":["struct-prop-table-col_width_percentage_22","true"],"214":["struct-prop-table-col_width_percentage_26",""],"215":["struct-prop-table-col_width_percentage_61",""],"216":["struct-prop-table-col_width_percentage_62","true"],"217":["struct-prop-table-col_width_percentage_22",""],"218":["struct-prop-table-col_width_percentage_5","true"],"219":["struct-prop-table-col_width_percentage_60",""],"220":["struct-prop-table-col_width_percentage_61","true"],"221":["struct-prop-table-col_width_percentage_62",""],"222":["struct-prop-table-col_width_percentage_5",""],"223":["struct-prop-table-col_width_percentage_6","true"],"224":["struct-prop-table-col_width_percentage_33",""],"225":["struct-prop-table-col_width_percentage_68","true"],"226":["struct-prop-table-col_width_percentage_65",""],"227":["struct-prop-table-col_width_percentage_66","true"],"228":["struct-prop-table-col_width_percentage_68",""],"229":["struct-prop-table-col_width_percentage_6",""],"230":["struct-prop-table-col_width_percentage_8","true"],"231":["struct-prop-table-col_width_percentage_66",""],"232":["struct-prop-table-col_width_percentage_13","true"],"233":["struct-prop-table-col_width_percentage_8",""],"234":["struct-prop-table-col_width_percentage_58","true"],"235":["struct-prop-table-col_width_percentage_13",""],"236":["struct-prop-table-col_width_percentage_56","true"],"237":["struct-prop-table-col_width_percentage_58",""],"238":["struct-prop-table-col_width_percentage_16",""],"239":["struct-prop-table-col_width_percentage_18","true"],"240":["struct-table5b07c8c2d5074c3a814da48fe80569ed_cold98dc829babd439cbf09862b4c7e1ebf","true"],"241":["struct-table5b07c8c2d5074c3a814da48fe80569ed_rowd3468e2e767346e38ef3fca63b3d5419","true"],"242":["struct-table5b07c8c2d5074c3a814da48fe80569ed_colea2a960050b0414bac054b7cdb943684","true"],"243":["struct-table5b07c8c2d5074c3a814da48fe80569ed_colc6c8e1ed19694e709ccaf778d6ac3c6d","true"],"244":["struct-table5b07c8c2d5074c3a814da48fe80569ed_row83513c55014643298a8a06e61c68dbf4","true"],"245":["struct-table5b07c8c2d5074c3a814da48fe80569ed_rowe99a72f638cd4f2586a018762775bfed","true"],"246":["struct-table5b07c8c2d5074c3a814da48fe80569ed_rowec3134d1f21849eaa969ff95de2a0a17","true"],"247":["author","15119126310"],"248":["struct-prop-table-col_width_percentage_17","true"],"249":["struct-prop-table-col_width_percentage_21","true"],"250":["struct-prop-table-col_width_percentage_49",""],"251":["struct-tableb15dbff652d4495db036a44bc13ec8fb_col80a5eac5e4644953891b2d00097c6845","true"],"252":["struct-tableb15dbff652d4495db036a44bc13ec8fb_row32a5fcefbfbe41d7908c01fd55b1a1c2","true"],"253":["struct-tableb15dbff652d4495db036a44bc13ec8fb_col22049799f24a4e3d939d2434c37b413c","true"],"254":["struct-tableb15dbff652d4495db036a44bc13ec8fb_col6f93416c5449444096823302b07bf3b1","true"],"255":["struct-tableb15dbff652d4495db036a44bc13ec8fb_row7789407fd7f5422c8df4fa78b9804d82","true"],"256":["struct-tableb15dbff652d4495db036a44bc13ec8fb_rowc35509939fc34ad6b12e3f4452211bb4","true"],"257":["struct-tableb15dbff652d4495db036a44bc13ec8fb_row67d3b602c38b4de29ec3b42f871c2a5c","true"],"258":["author","15068344548"],"259":["struct-table8a4084f39b1a4af180fdd6d8d572d683_col55bd1348fbd14b7f9241f8b4eff3a519","true"],"260":["struct-table8a4084f39b1a4af180fdd6d8d572d683_rowbc370e2992c24945b90190bb53ab9a07","true"],"261":["struct-table8a4084f39b1a4af180fdd6d8d572d683_colb3788e211932477fbc5d170129856a50","true"],"262":["struct-table8a4084f39b1a4af180fdd6d8d572d683_col8f18a3b20bcd4262874d26b7861f2b80","true"],"263":["struct-table8a4084f39b1a4af180fdd6d8d572d683_rowebbbfeb9b7bc4e5c95ad5f8ef7e8d548","true"],"264":["struct-table8a4084f39b1a4af180fdd6d8d572d683_rowd6bb4a8fa12e4a798af6d466f96efe0d","true"],"265":["struct-table8a4084f39b1a4af180fdd6d8d572d683_row099053277b7647658502bce049991d23","true"],"266":["struct-prop-table-col_width_percentage_14","true"],"267":["struct-prop-table-col_width_percentage_17",""],"268":["struct-prop-table-col_width_percentage_53","true"],"269":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_colc55a29015b6f4470a9ddb39694255fce","true"],"270":["author","15090074592"],"271":["struct-tablec3528b3d46d8466f94518f2cc4ba5e3e_col7be5545612a14621ac174cb58a87cbe2","true"],"272":["struct-tablec3528b3d46d8466f94518f2cc4ba5e3e_rowaa7df248520d4e6097435196ece43087","true"],"273":["struct-tablec3528b3d46d8466f94518f2cc4ba5e3e_col7a3aea44d8764c149ce22e57b816fc54","true"],"274":["struct-tablec3528b3d46d8466f94518f2cc4ba5e3e_col37d46320269143e599e67d4416a916e3","true"],"275":["struct-tablec3528b3d46d8466f94518f2cc4ba5e3e_rowbf5ac2a81c60464294222fa8b4df60a8","true"],"276":["struct-tablec3528b3d46d8466f94518f2cc4ba5e3e_row781636b68fbd424298e41dc083388ba2","true"],"277":["struct-tablec3528b3d46d8466f94518f2cc4ba5e3e_rowf5dcabc7f46e4c5094c78086b5a4c78e","true"],"278":["struct-table10eae52d76964e8ba9a40e4ba2d12c98_cola9645d0b1e4442e2b031205eaab04f0f","true"],"279":["struct-table10eae52d76964e8ba9a40e4ba2d12c98_rowc4f5914dd2ab4508913013c58c3af5ee","true"],"280":["struct-table10eae52d76964e8ba9a40e4ba2d12c98_col1e5ac14dbf924c8cb7ee6906a8b68394","true"],"281":["struct-table10eae52d76964e8ba9a40e4ba2d12c98_colc7ddfdd2cdc34150acbcf5a069d66ed8","true"],"282":["struct-table10eae52d76964e8ba9a40e4ba2d12c98_rowadc5c9905ff849f984712f0c13dd34d0","true"],"283":["struct-table10eae52d76964e8ba9a40e4ba2d12c98_rowd0844518205e4a2b9524268bac695bff","true"],"284":["struct-table10eae52d76964e8ba9a40e4ba2d12c98_row849b8356cdcd4e6381351d72f4bad4f5","true"],"285":["struct-table10eae52d76964e8ba9a40e4ba2d12c98_col967ddc2535f145688fce8a731624c230","true"],"286":["struct-table10eae52d76964e8ba9a40e4ba2d12c98_row3307edcb26414a778b2981366500f4c1","true"],"287":["struct-table10eae52d76964e8ba9a40e4ba2d12c98_row728eea1c304240239ac856730d5b45fb","true"],"288":["struct-table10eae52d76964e8ba9a40e4ba2d12c98_row61f499310c3649b3b4b3bb7fdd9ea057","true"],"289":["author","15081065463"],"290":["struct-tabled67bf2bce4244d969f42e955565d9b72_colb16944d3d6384648aa0af81fb719acdb","true"],"291":["struct-tabled67bf2bce4244d969f42e955565d9b72_rowb9385d916372420098fc954c07784bd2","true"],"292":["struct-tabled67bf2bce4244d969f42e955565d9b72_col5424f52dffc942dd8d96d550cfa2d1a5","true"],"293":["struct-tabled67bf2bce4244d969f42e955565d9b72_col7550964248df47de87d3d6821add0f0b","true"],"294":["struct-tabled67bf2bce4244d969f42e955565d9b72_row0326ff0ca9de4d99a5d55fc261ca476f","true"],"295":["struct-tabled67bf2bce4244d969f42e955565d9b72_row35caebbf79724330bf0bd77e36a4b1d8","true"],"296":["struct-tabled67bf2bce4244d969f42e955565d9b72_row470a170188d848dcac21add1ca046b2c","true"],"297":["struct-tabled67bf2bce4244d969f42e955565d9b72_colcd5c71ed58a64a6c81c090518c644188","true"],"298":["struct-tabled67bf2bce4244d969f42e955565d9b72_colbf63c4476f7848fb9b5e1e2e95c85b5e","true"],"299":["struct-tabled67bf2bce4244d969f42e955565d9b72_rowe012954e9bb44a73ac297cb5e040ae6b","true"],"300":["struct-tabled67bf2bce4244d969f42e955565d9b72_rowbc3fc6cc99ee487abf675508c0d22b48","true"],"301":["struct-tabled67bf2bce4244d969f42e955565d9b72_colae8f4be71df64c4690e6654b4575b337","true"],"302":["struct-tabled67bf2bce4244d969f42e955565d9b72_cola6f026badb814c4fb55a72c89f4496bd","true"],"303":["struct-tablee014dbd501c54503b3c3558441c61028_col968480354e3344599a3682b67e5aad3b","true"],"304":["struct-tablee014dbd501c54503b3c3558441c61028_row96c7b621f2ee4000ac23710f97f0d7b7","true"],"305":["struct-tablee014dbd501c54503b3c3558441c61028_col054d047ce148480898e3a02adbc3b9ee","true"],"306":["list","bullet3"],"307":["struct-tablee014dbd501c54503b3c3558441c61028_row7c2d77ea3a6547158d9cefd743511d8e","true"],"308":["struct-tablee014dbd501c54503b3c3558441c61028_row5ca945ef33c84cec88feb3366da03765","true"],"309":["list","bullet4"],"310":["struct-prop-table-col_width_percentage_23","true"],"311":["struct-prop-table-col_width_percentage_77","true"],"312":["struct-prop-table-col_width_percentage_23",""],"313":["struct-prop-table-col_width_percentage_77",""],"314":["struct-tablee014dbd501c54503b3c3558441c61028_col0be90065793c4d8eb1e985cb6177f7b2","true"],"315":["struct-tabled67bf2bce4244d969f42e955565d9b72_rowf62f2b9fec704e039ca5914d63bf51ea","true"],"316":["struct-tabled67bf2bce4244d969f42e955565d9b72_row4de30f44afc245049f699674005d241c","true"],"317":["author","15071422930"],"318":["author","15068144813"],"319":["struct-table66b5f684cf7543fc8cdf34138fe1ae3a_coldf915b58f4ee4774993d417d70259214","true"],"320":["struct-table66b5f684cf7543fc8cdf34138fe1ae3a_row910840212c2d49828c6cf66fdcc4a8e0","true"],"321":["struct-table66b5f684cf7543fc8cdf34138fe1ae3a_col0de0844136a4410c9bf8c56672da8334","true"],"322":["struct-table66b5f684cf7543fc8cdf34138fe1ae3a_col3265ecb7d3e74a9fa44c776a69fde8a9","true"],"323":["struct-table66b5f684cf7543fc8cdf34138fe1ae3a_rowf9207886b4e34506b6569f4073b1ae38","true"],"324":["struct-table66b5f684cf7543fc8cdf34138fe1ae3a_row38d8d5ad5eed499097cb016f7742f005","true"],"325":["struct-table66b5f684cf7543fc8cdf34138fe1ae3a_rowc7ad0e12675b4771851e7731aa9f466c","true"],"326":["author","15070369510"],"327":["underline",""],"328":["start","3"],"329":["struct-table66b5f684cf7543fc8cdf34138fe1ae3a_row41954efd054140ef9cb3efd62bcc0a26","true"],"330":["struct-table66b5f684cf7543fc8cdf34138fe1ae3a_rowfcef5a33fa1b43ddbebc4104736d20cd","true"],"331":["font-color-222222","true"],"332":["struct-prop-table-col_width_percentage_12","true"],"333":["struct-prop-table-col_width_percentage_14",""],"334":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_cold097d681279b46a39d5092b5dfdb626f","true"],"335":["struct-prop-table-col_width_percentage_44","true"],"336":["struct-prop-table-col_width_percentage_53",""],"337":["struct-prop-table-col_width_percentage_12",""],"338":["struct-prop-table-col_width_percentage_44",""],"339":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_col1a11793c08344ef08e1573cc27e7140d","true"],"340":["struct-table457dba7a23c945a5bfa8b63f3c1f4034_coled25ad24b6a44ec6875f8530187bc5ea","true"],"341":["struct-prop-table-col_width_percentage_11","true"],"342":["struct-prop-table-col_width_percentage_15","true"],"343":["struct-prop-table-col_width_percentage_42","true"],"344":["list","unchecked1"],"345":["align","right"],"346":["annotation-3f5cd553b63c4bafa409ba8109cb0c4d","true"],"347":["annotation-3f5cd553b63c4bafa409ba8109cb0c4d",""],"348":["start","4"],"349":["start","5"],"350":["struct-tabled5d952d2faed45388a1cd5365d4263a9_col321b2a939ed2427f9ac82f3841f6c6c5","true"],"351":["struct-tabled5d952d2faed45388a1cd5365d4263a9_rowff2f9057858a42abbec4534e72bf1cd9","true"],"352":["struct-tabled5d952d2faed45388a1cd5365d4263a9_col3d462ebb9edf4fabae98d65629ab9a5a","true"],"353":["struct-tabled5d952d2faed45388a1cd5365d4263a9_col30084c8fa66a468f8ba084727040a497","true"],"354":["struct-tabled5d952d2faed45388a1cd5365d4263a9_row8c4f60da7b194112b46e22ac0c5e8d4b","true"],"355":["struct-tabled5d952d2faed45388a1cd5365d4263a9_row57013b78cf1e43999ce516dc6da0ea4e","true"],"356":["struct-tabled5d952d2faed45388a1cd5365d4263a9_row1cb146bf5aed435a9f6854cb850c8f28","true"],"357":["struct-prop-table-col_width_percentage_48","true"],"358":["struct-prop-table-col_width_percentage_19","true"],"359":["struct-prop-table-col_width_percentage_48",""],"360":["struct-prop-table-col_width_percentage_56",""],"361":["struct-prop-table-col_width_percentage_57","true"],"362":["struct-prop-table-col_width_percentage_57",""],"363":["struct-prop-table-col_width_percentage_63","true"],"364":["struct-prop-table-col_width_percentage_19",""],"365":["struct-tablef00b656592984c13a4cfbaea87ecd9ea_col90def42019844b79888c0e7acdbd4bad","true"],"366":["struct-tablef00b656592984c13a4cfbaea87ecd9ea_rowf3cfab3d567b427dac847a07b2b08b3d","true"],"367":["struct-tablef00b656592984c13a4cfbaea87ecd9ea_col241fe8866bb34f5b8a2bc72884070385","true"],"368":["struct-tablef00b656592984c13a4cfbaea87ecd9ea_cole50b7440ab4047769198bfec28195db2","true"],"369":["struct-tablef00b656592984c13a4cfbaea87ecd9ea_row5c317b05223840d4a79f967fd086947d","true"],"370":["struct-tablef00b656592984c13a4cfbaea87ecd9ea_rowba0ef0b5303342939fc63c489c1efa55","true"],"371":["struct-tablef00b656592984c13a4cfbaea87ecd9ea_row6313da214ba345778934311f4b810f18","true"],"372":["struct-table6f29650fe6ee45efa1a17f67ec36cb4f_col2d665ee2f0414702985be2ee968086f4","true"],"373":["struct-table6f29650fe6ee45efa1a17f67ec36cb4f_rowcf89cb048689464eb97dd4ec37b73fad","true"],"374":["struct-table6f29650fe6ee45efa1a17f67ec36cb4f_col370a73dffb6c4d5eb42b605bd5cba6ba","true"],"375":["struct-table6f29650fe6ee45efa1a17f67ec36cb4f_col0bedf1d7ecf847b28dc58d5669e130c0","true"],"376":["struct-table6f29650fe6ee45efa1a17f67ec36cb4f_row25f371c00d644acf96bf24d7b4c2f772","true"],"377":["struct-table6f29650fe6ee45efa1a17f67ec36cb4f_row3f37c3bd1f384740ab06d791e18436a7","true"],"378":["struct-table6f29650fe6ee45efa1a17f67ec36cb4f_rowdf033b15147b45a291b2829020b919ea","true"],"379":["struct-table8cb4d96c07c94076b9007f42272a44fa_cole0b0697b336445128f7eda3ad9111767","true"],"380":["struct-table8cb4d96c07c94076b9007f42272a44fa_rowf6c3eda11c064cd9b02ce9f953ebc15e","true"],"381":["struct-table8cb4d96c07c94076b9007f42272a44fa_col3ee627cecd514e429a87147d5b733fc0","true"],"382":["struct-table8cb4d96c07c94076b9007f42272a44fa_cole8d8ae5774a34669b41b1ec0cbab8977","true"],"383":["struct-table8cb4d96c07c94076b9007f42272a44fa_rowb65c708395ca4006ac92447d41545fa4","true"],"384":["struct-table8cb4d96c07c94076b9007f42272a44fa_row454fff87b2d249b0b6b07a6c9c2a7a24","true"],"385":["struct-table8cb4d96c07c94076b9007f42272a44fa_row4e05aab6ddff4c968b7354a3f5c0c876","true"],"386":["struct-tabled5d952d2faed45388a1cd5365d4263a9_row9ef84028e0ba4032bf0a69202e7782d5","true"],"387":["struct-tabled5d952d2faed45388a1cd5365d4263a9_rowd0a0c409b114468d956ed6db2673ea84","true"],"388":["struct-tabled5d952d2faed45388a1cd5365d4263a9_row12f3765d409b45238a1dc9821d232404","true"],"389":["struct-tabled5d952d2faed45388a1cd5365d4263a9_rowa8ee180f92424ba2bf182f99268c0b20","true"],"390":["struct-tabled5d952d2faed45388a1cd5365d4263a9_rowdb63501c44e04414b21dd5fc6ea48c2b","true"],"391":["struct-tabled5d952d2faed45388a1cd5365d4263a9_rowafe67d67b5064817bae650f22628b191","true"],"392":["struct-tabled5d952d2faed45388a1cd5365d4263a9_rowca3e35d3a0b84f2dbf1794782da37a45","true"],"393":["author","15109392171"],"394":["struct-table530ec1044fbc4cb78412f56e0d7406af_col4745d855062d4044b8c3d92f07184414","true"],"395":["struct-table530ec1044fbc4cb78412f56e0d7406af_row0bf1ee08060c4df5bce15183dd1c1555","true"],"396":["struct-table530ec1044fbc4cb78412f56e0d7406af_col9c06f4eddefe419395b4b7d013fda172","true"],"397":["struct-table530ec1044fbc4cb78412f56e0d7406af_col1fb326f8bb5f4a56ac9e53eab518dd6e","true"],"398":["struct-table530ec1044fbc4cb78412f56e0d7406af_row3683216580754226b0069160cad64013","true"],"399":["struct-table530ec1044fbc4cb78412f56e0d7406af_rowa9c263d98a2343ab9ca2722d72d7485d","true"],"400":["struct-table530ec1044fbc4cb78412f56e0d7406af_row89f479becc5f40008f5f805f0837bd38","true"],"401":["struct-table2a3b440c6aa24b8482a339197c2400d6_col7db0cbc303a74a60971a9926b34e3ce7","true"],"402":["struct-table2a3b440c6aa24b8482a339197c2400d6_row47a85c6b45ea401abad0ba75c393e0b3","true"],"403":["struct-table2a3b440c6aa24b8482a339197c2400d6_cold396d07e41f54ea1aa98e7acd03b06da","true"],"404":["struct-table2a3b440c6aa24b8482a339197c2400d6_col1f744d4428cf4dc4b059e8c5c23e6b3c","true"],"405":["struct-table2a3b440c6aa24b8482a339197c2400d6_rowdf2bbf556d7c4f4b9757dd05cfd0ecab","true"],"406":["struct-table2a3b440c6aa24b8482a339197c2400d6_rowb3533436403e4d1da40f4eeebb29aae5","true"],"407":["struct-prop-table-col_width_percentage_47","true"],"408":["struct-prop-table-col_width_percentage_29","true"],"409":["struct-prop-table-col_width_percentage_47",""],"410":["struct-prop-table-col_width_percentage_59","true"],"411":["struct-prop-table-col_width_percentage_10","true"],"412":["struct-prop-table-col_width_percentage_29",""],"413":["struct-prop-table-col_width_percentage_59",""],"414":["struct-table2a3b440c6aa24b8482a339197c2400d6_col96ba8d3431a44f979335bdd40c796dfc","true"],"415":["struct-prop-table-col_width_percentage_28","true"],"416":["struct-prop-table-col_width_percentage_37","true"],"417":["struct-prop-table-col_width_percentage_38",""],"418":["struct-prop-table-col_width_percentage_10",""],"419":["struct-prop-table-col_width_percentage_28",""],"420":["struct-prop-table-col_width_percentage_37",""],"421":["author","15071215272"],"422":["author","15072057544"],"423":["struct-table789fa2d78aac42b8834d3f95c253bc87_col00ee2e4b35da4c8eb91f7f207d6e8a93","true"],"424":["struct-table789fa2d78aac42b8834d3f95c253bc87_rowb20f6d530e8c47d39dce18a62de8991a","true"],"425":["struct-table789fa2d78aac42b8834d3f95c253bc87_col579116e1bb604bf4b334794185ad5ca4","true"],"426":["struct-table789fa2d78aac42b8834d3f95c253bc87_col3f0256f5d5d54f89a548ddc04ff060f9","true"],"427":["struct-table789fa2d78aac42b8834d3f95c253bc87_row57e5467dc48942b4a80e96753c4b697e","true"],"428":["struct-table789fa2d78aac42b8834d3f95c253bc87_rowa499215abafc4f239c6b3ae6f908b104","true"],"429":["struct-table789fa2d78aac42b8834d3f95c253bc87_roweb6451a33e6b4ab7b689db1124753043","true"],"430":["struct-table789fa2d78aac42b8834d3f95c253bc87_row7b179930c5444d6eb78e9c98f42788ba","true"],"431":["struct-table789fa2d78aac42b8834d3f95c253bc87_row3eca80a496f04d6cb1e48119271c9ed7","true"],"432":["struct-table789fa2d78aac42b8834d3f95c253bc87_row59a2863c6cd64d898984bc5dbb2b7358","true"],"433":["struct-table789fa2d78aac42b8834d3f95c253bc87_row0042d844b0ef4cb6b1a5a092c92d0e60","true"],"434":["struct-table789fa2d78aac42b8834d3f95c253bc87_rowa36c92cb0fd345668d8b7a6327e97abd","true"],"435":["struct-tablec22b61c44c79486487840c00dd657594_col346f383c83eb49198266c27fe222472c","true"],"436":["struct-tablec22b61c44c79486487840c00dd657594_row8aa58f6d3c7f4ec1b405c70a93dd46a3","true"],"437":["struct-tablec22b61c44c79486487840c00dd657594_cola14e290348ac4c97969ecefcb8a2b7be","true"],"438":["struct-tablec22b61c44c79486487840c00dd657594_col9311ca7b8047437996f6aae849fe7f9b","true"],"439":["struct-tablec22b61c44c79486487840c00dd657594_rowedb6326a280c444297149f7773f20b7d","true"],"440":["struct-tablec22b61c44c79486487840c00dd657594_rowed16a4523f5f4f3c96bcc7b3ae9d2db5","true"],"441":["struct-tablec22b61c44c79486487840c00dd657594_row690cb706f3bb42d2b38115e802b2fc4d","true"],"442":["struct-tablec22b61c44c79486487840c00dd657594_row2e70387ff37e4c2ba40c438c350d1983","true"],"443":["struct-tablec22b61c44c79486487840c00dd657594_row666a5a2d59944b6da8ef8fa317ba1dc4","true"],"444":["struct-tablec22b61c44c79486487840c00dd657594_row155b8233c0be48b0b1687676bc7cc5de","true"],"445":["struct-tablec22b61c44c79486487840c00dd657594_row7e966422e1f9483ca2d830d1098fd4c4","true"],"446":["struct-tablec22b61c44c79486487840c00dd657594_rowf10377fb38034f7995da0043c1b0a4b7","true"],"447":["struct-table519f639a91b1447e9ebfa81cc0553043_col29c4d0b62e034d6e984f7d069f4118df","true"],"448":["struct-table519f639a91b1447e9ebfa81cc0553043_row3fbae1c5f80b4927b67e495d6a0f7c3d","true"],"449":["struct-table519f639a91b1447e9ebfa81cc0553043_col94fe4a13e4de4e8c8e863024d259b711","true"],"450":["struct-table519f639a91b1447e9ebfa81cc0553043_cola168471d578b4d32a37708706c60fc55","true"],"451":["struct-table519f639a91b1447e9ebfa81cc0553043_row30fb1ae84c5543688f166044c4a625de","true"],"452":["struct-table519f639a91b1447e9ebfa81cc0553043_row96da5e777c02426d94daeecd09cffd8f","true"],"453":["struct-table519f639a91b1447e9ebfa81cc0553043_row97e743e828854c65814ed6324027bce2","true"],"454":["struct-tablec22b61c44c79486487840c00dd657594_row2adc2c6e3d844596b5418e53fbabfa9c","true"],"455":["author","15071484429"],"456":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_col8ebaf78d6e1643e8bbb49e87512ec1de","true"],"457":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_row4d82542ffae24497b4278476422ed09e","true"],"458":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_colc228724718ab4c4d8ddbdcdb58645e0d","true"],"459":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_col1cd064b57b074d94be216fb908c10f46","true"],"460":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_row576407cef8ef48e4be71eca79d9cf148","true"],"461":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_row9d3ddcf37841419fbf0b9fb9182b940d","true"],"462":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_row34a2c8642a1843bab8d4917283706bde","true"],"463":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_colceeb361761904d198989a4800f7d55cd","true"],"464":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_col1732444da3694c20b2d4f09e9562110a","true"],"465":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_col2363ff3b2edb41ca8e7833202fb417f4","true"],"466":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_col1c8ed16774ab4c168bda79b51081af4c","true"],"467":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_rowde2c8c17c5234041acba2bfa5c356389","true"],"468":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_rowbfd65216818d4db08555b3d2a2e57ae8","true"],"469":["font-color-000000",""],"470":["font-color-9f3fed","true"],"471":["font-color-6f87ff","true"],"472":["font-color-9f3fed",""],"473":["font-color-666666","true"],"474":["font-color-6f87ff",""],"475":["struct-prop-table-col_width_percentage_20","true"],"476":["struct-prop-table-col_width_percentage_20",""],"477":["image-ca0b03c5764345e79677261568068ee6-JTdCJTIycGxhY2Vob2xkZXJUeXBlJTIyJTNBJTIycHJvZ3Jlc3MlMjIlMkMlMjJmaWxlTmFtZSUyMiUzQSUyMk1lbW9yeSUyMGFsbG9jYXRpb24ucG5nJTIyJTJDJTIyZmlsZVNpemUlMjIlM0E0NjQ2JTJDJTIydXBsb2FkZXJVc2VySWQlMjIlM0ElMjIxNTA3MTQ4NDQyOSUyMiU3RA==","true"],"478":["image-179ff69d9af1463680d0bb75aad76c9a-JTdCJTIyYm94U2hhcmVkTGluayUyMiUzQSUyMmh0dHBzJTNBJTJGJTJGbmF2ZWVuYXV0b21hdGlvbmxhYnMuYm94LmNvbSUyRnMlMkZyMm9qb2czYWV3cXA1ODVncnozYWFkeXJlZ3lkaG1rOCUyMiUyQyUyMmJveEZpbGVJZCUyMiUzQSUyMjc3MzM5MTYwNDQ5OCUyMiUyQyUyMmZpbGVOYW1lJTIyJTNBJTIyTWVtb3J5JTIwYWxsb2NhdGlvbi5wbmclMjIlN0Q=","true"],"479":["image-ca0b03c5764345e79677261568068ee6-JTdCJTIycGxhY2Vob2xkZXJUeXBlJTIyJTNBJTIycHJvZ3Jlc3MlMjIlMkMlMjJmaWxlTmFtZSUyMiUzQSUyMk1lbW9yeSUyMGFsbG9jYXRpb24ucG5nJTIyJTJDJTIyZmlsZVNpemUlMjIlM0E0NjQ2JTJDJTIydXBsb2FkZXJVc2VySWQlMjIlM0ElMjIxNTA3MTQ4NDQyOSUyMiU3RA==",""],"480":["struct-prop-table-col_width_percentage_38","true"],"481":["struct-prop-table-col_width_percentage_52",""],"482":["struct-prop-table-col_width_percentage_39","true"],"483":["struct-prop-table-col_width_percentage_46","true"],"484":["struct-prop-table-col_width_percentage_46",""],"485":["struct-prop-table-col_width_percentage_15",""],"486":["author","15068227440"],"487":["struct-table62d2b18d4d15410389ee68b151264d2f_col19952a4952ed4ed68442f0160078c232","true"],"488":["struct-table62d2b18d4d15410389ee68b151264d2f_row995b89a57ebe489785ecc99d25ce1438","true"],"489":["struct-table62d2b18d4d15410389ee68b151264d2f_col2a6e630bb9ca4cd4bc0b308ae6fe8503","true"],"490":["struct-table62d2b18d4d15410389ee68b151264d2f_colf6ecd40b0c544a6e8753c9c6a6aff986","true"],"491":["struct-table62d2b18d4d15410389ee68b151264d2f_rowcb88269a68e64e17b7b227d285569d96","true"],"492":["struct-table62d2b18d4d15410389ee68b151264d2f_row29ec3f42570e47aea7fd5493a9009307","true"],"493":["struct-table62d2b18d4d15410389ee68b151264d2f_row1994df0cfa604ea1a0a3685263a97301","true"],"494":["start","6"],"495":["start","7"],"496":["start","8"],"497":["start","9"],"498":["struct-table0a19e9cf468642799f7efe2c1b45a266_col604c6f577e3f4358b7050bf32cb959cb","true"],"499":["struct-table0a19e9cf468642799f7efe2c1b45a266_row958379cc8baa42a294d722fc2fb75767","true"],"500":["struct-table0a19e9cf468642799f7efe2c1b45a266_col6ac1b6f567a64d89ae043f4490d9f736","true"],"501":["struct-table0a19e9cf468642799f7efe2c1b45a266_cola4b23ed9e2054c5b8068d0408b3b03af","true"],"502":["struct-table0a19e9cf468642799f7efe2c1b45a266_row70d91815a08a4d15a558c1f0bb5ef55b","true"],"503":["struct-table0a19e9cf468642799f7efe2c1b45a266_row9360e46318d54115bc18f4c5b94731da","true"],"504":["struct-table0a19e9cf468642799f7efe2c1b45a266_row723fcea5a50741eca576988f3dbc9318","true"],"505":["struct-tabled9de10e5b69b470186b3b32136c663d6_col741b9cc7241144f0a379fa41870ef529","true"],"506":["struct-tabled9de10e5b69b470186b3b32136c663d6_row8143a4d8326648a09fedbe04db2c8269","true"],"507":["struct-tabled9de10e5b69b470186b3b32136c663d6_col081d96ad05724391816f7d1b1aff1a10","true"],"508":["struct-tabled9de10e5b69b470186b3b32136c663d6_col02342b3695074bdbbaa17cf4def8f80b","true"],"509":["struct-tabled9de10e5b69b470186b3b32136c663d6_rowa5bb63c7a1194c9c97562121099f8356","true"],"510":["struct-tabled9de10e5b69b470186b3b32136c663d6_rowe018c473be294febba3941c58d5b4918","true"],"511":["struct-tabled9de10e5b69b470186b3b32136c663d6_row25a70948c54547618fe93079beb467fe","true"],"512":["struct-tabled9de10e5b69b470186b3b32136c663d6_rowc5eb57544e7c404c8bdf8f14ea895a6c","true"],"513":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_rowf4d257394dc64dfbafdb9e198d232f89","true"],"514":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_row2e3c848a975a47f0a96b797e6b823c44","true"],"515":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_rowe4615ec228b04863846d1af1098f272e","true"],"516":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_row103b89f48bef4e3688abab003909ef64","true"],"517":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_row1c2ee235ccef450583dd4387910d33a4","true"],"518":["image-51d9fb09f1be4c0aa0c4cb382ef5a194-JTdCJTIycGxhY2Vob2xkZXJUeXBlJTIyJTNBJTIycHJvZ3Jlc3MlMjIlMkMlMjJmaWxlTmFtZSUyMiUzQSUyMjIwMjEtMDItMDclMjAxOF80OV8wMC1Cb29rMSUyMC0lMjBFeGNlbC5wbmclMjIlMkMlMjJmaWxlU2l6ZSUyMiUzQTgwNDklMkMlMjJ1cGxvYWRlclVzZXJJZCUyMiUzQSUyMjE1MDcxNDg0NDI5JTIyJTdE","true"],"519":["image-51d9fb09f1be4c0aa0c4cb382ef5a194-JTdCJTIycGxhY2Vob2xkZXJUeXBlJTIyJTNBJTIycHJvZ3Jlc3MlMjIlMkMlMjJmaWxlTmFtZSUyMiUzQSUyMjIwMjEtMDItMDclMjAxOF80OV8wMC1Cb29rMSUyMC0lMjBFeGNlbC5wbmclMjIlMkMlMjJmaWxlU2l6ZSUyMiUzQTgwNDklMkMlMjJ1cGxvYWRlclVzZXJJZCUyMiUzQSUyMjE1MDcxNDg0NDI5JTIyJTdE",""],"520":["image-e363bd04ad1d439ca8e8c876cc8fda15-JTdCJTIyYm94U2hhcmVkTGluayUyMiUzQSUyMmh0dHBzJTNBJTJGJTJGbmF2ZWVuYXV0b21hdGlvbmxhYnMuYm94LmNvbSUyRnMlMkZ1bjdoY2J5eXNkNjJ2cHhxZXI1NnE3eXNlM2puZnZ1eiUyMiUyQyUyMmJveEZpbGVJZCUyMiUzQSUyMjc3MzQ5NzA5NDYzNiUyMiUyQyUyMmZpbGVOYW1lJTIyJTNBJTIyMjAyMS0wMi0wNyUyMDE4XzQ5XzAwLUJvb2sxJTIwLSUyMEV4Y2VsLnBuZyUyMiU3RA==","true"],"521":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_row51c2147dd79044ebaaf26a4ee48964ab","true"],"522":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_row8020ded79ecb4f439f8b0f01af80b6d3","true"],"523":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_rowee8f3ad7287b450dbe73f929140883c5","true"],"524":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_row2bfbdb96e2604cb3aaddd063985f0257","true"],"525":["struct-tabled06c0f68d55f47eeab6460c4bbe861a5_row672c6b661aaa44d6937ea9b117dfa35f","true"],"526":["struct-table4f884bfbbc4f4d6c87358211b41754fb_col59bbcf6c2c7c43a59668940f8e352040","true"],"527":["struct-table29d210013f034c7a9bf9e0fdc7f203d9_col944bddb15c474b0fbc4d2c3a6eafd8b1","true"],"528":["struct-table29d210013f034c7a9bf9e0fdc7f203d9_row585546607e184837858e7d8602acb513","true"],"529":["struct-table29d210013f034c7a9bf9e0fdc7f203d9_colb4097f1b9a1a4bc2a0626db019cac304","true"],"530":["struct-table29d210013f034c7a9bf9e0fdc7f203d9_col25fd927e4d794dbeae28ea47ceb53ec1","true"],"531":["struct-table29d210013f034c7a9bf9e0fdc7f203d9_rowfae5120b95bc4097a634003700315341","true"],"532":["struct-table29d210013f034c7a9bf9e0fdc7f203d9_rowbf947c9b3f2b403094f1713c33d1aa4c","true"],"533":["struct-table29d210013f034c7a9bf9e0fdc7f203d9_row53bcf08083e4442295162d77530b2dbb","true"],"534":["struct-table29d210013f034c7a9bf9e0fdc7f203d9_col9fb5b96bf6254ab695198f41b96709e6","true"],"535":["font-size-large","true"],"536":["font-size-medium",""],"537":["font-size-large",""],"538":["struct-table29d210013f034c7a9bf9e0fdc7f203d9_rowc0bdab3ad307447d9c25fe7f6804deff","true"],"539":["struct-prop-table-col_width_percentage_43","true"],"540":["struct-prop-table-col_width_percentage_43",""],"541":["struct-prop-table-col_width_percentage_18",""],"542":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_colc9d9d6b298184a11950e9fac4bb7deea","true"],"543":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_row76f9f4f67d2f470da7f6fda3b796d34f","true"],"544":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_cola4ac11391ac340628ae3a8e65e0e4d43","true"],"545":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_col729f155a66b24d578d3933c8d3076504","true"],"546":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_rowe4ccaa9a4dea4f08a81f49375b91e5b7","true"],"547":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_rowb816934608294c938eda705c16adcfc5","true"],"548":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_rowbde711333e74420caf46aaa974af94bc","true"],"549":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_row686783f2680a41aea65616802c73607c","true"],"550":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_row6f2aae5582bb4dfaaadc0a8d5aed8e25","true"],"551":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_row410c57c639354d9486bde6b952614e31","true"],"552":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_rowa34269d3cbc5463e92005a73e230fcbe","true"],"553":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_rowddeae96afbc04953b69a6b44bd6bb499","true"],"554":["struct-table8e4ff2a65b204c03ae9dc889e6cb5909_row1ce9729a1bb3412196592b59fb7d313f","true"],"555":["struct-table1341b1ef29554022b887c352b3ae7665_col4a18e4c860214232a30e1d0296a0f12e","true"],"556":["struct-table1341b1ef29554022b887c352b3ae7665_rowf2f9268943a0490a84169fc1ba195304","true"],"557":["struct-table1341b1ef29554022b887c352b3ae7665_col556275d5f38a4136944b66071deecb30","true"],"558":["struct-table1341b1ef29554022b887c352b3ae7665_col6fa6fdbad15f4fb69dca9221e12948e8","true"],"559":["struct-table1341b1ef29554022b887c352b3ae7665_row923691a73f5f40d7a2c0633adc883e2d","true"],"560":["author","15068714309"],"561":["struct-table62d2b18d4d15410389ee68b151264d2f_row07b0146b1ce24d51ae783d308b235086","true"],"562":["font-size-small","true"],"563":["author","15114316967"],"564":["struct-table823dd69b405e4d57b9defef41fc4aa9a_col385af433d4ba4524b61930f435b5689c","true"],"565":["struct-table823dd69b405e4d57b9defef41fc4aa9a_rowe25975b60d694109a2da58e00a009363","true"],"566":["struct-table823dd69b405e4d57b9defef41fc4aa9a_col19cba42b1ec146aca05b9aca2318f736","true"],"567":["struct-table823dd69b405e4d57b9defef41fc4aa9a_colf8d3a2cedc52446cbece977d589247f4","true"],"568":["struct-table823dd69b405e4d57b9defef41fc4aa9a_rowe991389e63214413afff0209505a2d1b","true"],"569":["struct-table823dd69b405e4d57b9defef41fc4aa9a_row1834577b74bd4efbb4c8e42b6ae06553","true"],"570":["struct-table823dd69b405e4d57b9defef41fc4aa9a_row5056d32b000f42e79433f83db65c60a1","true"],"571":["struct-table1e881ac672754b528fd3e5c65b7e2505_col57b8d6606a14494cb1146ee8bd9ae699","true"],"572":["struct-table1e881ac672754b528fd3e5c65b7e2505_row5aa9ccc38e3940ec9aadb7c3f5d5ab89","true"],"573":["struct-table1e881ac672754b528fd3e5c65b7e2505_colc24fe7a261ae48ffb61da5114ce7acec","true"],"574":["struct-table1e881ac672754b528fd3e5c65b7e2505_col9132121c85464a3c999239a3ddd83968","true"],"575":["struct-table1e881ac672754b528fd3e5c65b7e2505_col6a58c554216a46fd86d0ae8adf4dfecf","true"],"576":["struct-table1e881ac672754b528fd3e5c65b7e2505_row8f5cc133fa514fba9a6c971029ff7c6e","true"],"577":["struct-table1e881ac672754b528fd3e5c65b7e2505_row011cf142df904f7e815ba497a213465d","true"],"578":["struct-table1e881ac672754b528fd3e5c65b7e2505_rowc9c40a55207745a8a8dd168f82ec57dc","true"],"579":["struct-table1e881ac672754b528fd3e5c65b7e2505_rowa580118b87e14c4eac53e4e0deec9810","true"],"580":["struct-table1e881ac672754b528fd3e5c65b7e2505_row14a22d38427c4cff8b553c114620492f","true"],"581":["struct-table1e881ac672754b528fd3e5c65b7e2505_row8f8e1af4812844aaa6789caf5574dec3","true"],"582":["struct-table1e881ac672754b528fd3e5c65b7e2505_row15abe1ba80d14d1bbb77a49047f4d406","true"],"583":["struct-prop-table-col_width_percentage_7",""],"584":["struct-prop-table-col_width_percentage_40","true"],"585":["struct-prop-table-col_width_percentage_11",""],"586":["struct-prop-table-col_width_percentage_4",""],"587":["struct-prop-table-col_width_percentage_40",""],"588":["struct-prop-table-col_width_percentage_35","true"],"589":["struct-prop-table-col_width_percentage_35",""],"590":["struct-prop-table-col_width_percentage_31","true"],"591":["struct-tableb88666491ebf44bf956eff3964f1c8f4_colfe2a4362c3b5401383b5fc0dd3928b7a","true"],"592":["struct-tableb88666491ebf44bf956eff3964f1c8f4_rowf6225cc2c90542f2b9f75b200998f760","true"],"593":["struct-tableb88666491ebf44bf956eff3964f1c8f4_col37f7dce2543743babaf52581a51e17f3","true"],"594":["struct-tableb88666491ebf44bf956eff3964f1c8f4_col632dd8160b13459bbe56fbec4b31f2ea","true"],"595":["struct-tableb88666491ebf44bf956eff3964f1c8f4_rowb196391f265b409eb60939edd13469e5","true"],"596":["struct-tableb88666491ebf44bf956eff3964f1c8f4_roweba5f2c4b2af46d4832e69f85e78f6e8","true"],"597":["struct-tableb88666491ebf44bf956eff3964f1c8f4_rowee34876f6b3c497cbf943484239759d6","true"],"598":["struct-prop-table-col_width_percentage_69","true"],"599":["struct-prop-table-col_width_percentage_69",""],"600":["struct-tableb88666491ebf44bf956eff3964f1c8f4_row9bd94c14e6ff43ff9f9fbba5f3b9aee3","true"],"601":["struct-tableb88666491ebf44bf956eff3964f1c8f4_rowf1d986c40ad84aa7b568d054b8b88b7a","true"],"602":["struct-tableb88666491ebf44bf956eff3964f1c8f4_row3b067240749a4265b9730159a69a59d6","true"],"603":["struct-tableb88666491ebf44bf956eff3964f1c8f4_rowa5c5c6263d64468284f613f62f2eede2","true"],"604":["struct-prop-table-col_width_percentage_84","true"],"605":["struct-prop-table-col_width_percentage_84",""],"606":["author","15073329937"],"607":["author","198465245"],"608":["struct-table35583148c8fe48d4a511e226aff867d5_col08317d64f7394602b238f5b2567468fb","true"],"609":["struct-table35583148c8fe48d4a511e226aff867d5_rowd16bb1ff03104d8e8d72b404490e97d0","true"],"610":["struct-table35583148c8fe48d4a511e226aff867d5_col06fdd885d8934a31aa458cce31c650cf","true"],"611":["struct-table35583148c8fe48d4a511e226aff867d5_col8e3cdf08df0c47e1921bb55ee5b98475","true"],"612":["struct-table35583148c8fe48d4a511e226aff867d5_row4156bafebd6e48e5b1f79abaf0412234","true"],"613":["struct-table35583148c8fe48d4a511e226aff867d5_rowfde106978400497180a6f94c5ec68ca2","true"],"614":["struct-table35583148c8fe48d4a511e226aff867d5_row08755d38d266454a9d6a71e440304b0c","true"],"615":["author","15139297225"],"616":["author","15069581445"],"617":["struct-table68792b5fa06342df962d50fa8ac568d3_colbb400aba470342a59fba4dd153672735","true"],"618":["struct-table68792b5fa06342df962d50fa8ac568d3_row2fac5b68b117495c9bb11b940578020b","true"],"619":["struct-table68792b5fa06342df962d50fa8ac568d3_col321fb6df2e4d45319e2aba428c2aa2fe","true"],"620":["struct-table68792b5fa06342df962d50fa8ac568d3_colfd714bd558fb481ca587e0472e68bfe7","true"],"621":["struct-table68792b5fa06342df962d50fa8ac568d3_rowc27a160cec1b4d88a0cedf14413e7c76","true"],"622":["struct-table68792b5fa06342df962d50fa8ac568d3_rowccc734f222014e3482526bd85f5d392f","true"],"623":["struct-table68792b5fa06342df962d50fa8ac568d3_rowed6e8f93aa01436586971adab55e7ed2","true"],"624":["annotation-f24f210041cd40e2b0d569a34624049f","true"],"625":["link-MTYxMjkzMTA4MTI0MC1odHRwczovL2FwcC5ib3guY29tL2ZpbGUvNzcxMzM2NjUxMTY4","true"],"626":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_cola8990080308440c4a721fefb82b2f971","true"],"627":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row3660f098f24749d69f89dd1ec8c3a0d2","true"],"628":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_colcc0af0384fff4244ac87d9ec23209633","true"],"629":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_col79a31dd89122491790cd1d0f3e681838","true"],"630":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row5eabfa2bea56419880131c3f471ba1c0","true"],"631":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row6e9b54edea5c46139b883adb63c14978","true"],"632":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_rowc67c7cbc34d64009a00c3ab7d3b10f2a","true"],"633":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_col8d267c90f9a74b0884df112a61f39c5b","true"],"634":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row04a9a1d46fae46afb74b4b636408e631","true"],"635":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row7e64835f9d7f4c95ae2ea19a4d4e8530","true"],"636":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row6810afad204a4d6287cf8ab2786ba722","true"],"637":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row6b7525fa398d4ca2bf069929d62b5652","true"],"638":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row4c037334c29541a39d8272436e54fea3","true"],"639":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row10e65f6c462347419ba77994bfe7ccae","true"],"640":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row40807e58481a4235ae0b19ad1fd456ee","true"],"641":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row178ef725c91a41f8b7a5002ed97fde3c","true"],"642":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row73b696e44d6c4f9b910f889d59341438","true"],"643":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_rowd71c0f25207a48ed982089d8961606fb","true"],"644":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row0dc594f1ee3c4ad8a38d8bd183636d82","true"],"645":["struct-tablee79fd6e4df5a41e49d6182ac92d72812_row4875bb60bac946dda247e5b839e77f31","true"],"646":["struct-tabledac699579d564b6cadcd52775f2a2960_colc582439bb3d9436d93f66d2d40e2fffd","true"],"647":["struct-tabledac699579d564b6cadcd52775f2a2960_row5153f36c2488404ba9fad68b049a32d2","true"],"648":["struct-tabledac699579d564b6cadcd52775f2a2960_col2ab75e012b4845b6a61fceb7683186eb","true"],"649":["struct-tabledac699579d564b6cadcd52775f2a2960_col765db71f2f094b3eb26632ead60bb934","true"],"650":["struct-tabledac699579d564b6cadcd52775f2a2960_row9969f5f2df2e4e008917142b14febc1e","true"],"651":["struct-tabledac699579d564b6cadcd52775f2a2960_row4c9c134ee3b249cd966e55ca3d080037","true"],"652":["struct-tabledac699579d564b6cadcd52775f2a2960_row19b303b2cf1e41cb875c1f200a83623e","true"],"653":["font-color-ea1f43","true"],"654":["struct-table8e3ace71f345473a88113291f485c2d5_col01f32be27a2841268312fef1e851ea79","true"],"655":["struct-table8e3ace71f345473a88113291f485c2d5_row47138032df184cc08c827351307eeb21","true"],"656":["struct-table8e3ace71f345473a88113291f485c2d5_col4045f4c8a3614c40afe57c1276eaa167","true"],"657":["struct-table8e3ace71f345473a88113291f485c2d5_col6204667077e74ab19a803763c333aeec","true"],"658":["struct-table8e3ace71f345473a88113291f485c2d5_row1a11213648694203bcb282c0d4361df9","true"],"659":["struct-table8e3ace71f345473a88113291f485c2d5_row10ed8c72f9bb4368b0182853e563a439","true"],"660":["struct-table8e3ace71f345473a88113291f485c2d5_row8098fbb32f7840a6a09fc8496e49424a","true"],"661":["struct-table8e3ace71f345473a88113291f485c2d5_row8baada59e46a4d6ab22f4ba17b6a3f86","true"],"662":["struct-table8e3ace71f345473a88113291f485c2d5_row6c057b971bf847a2b7fe6b6ea701c57c","true"],"663":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_colf146e36efee3429a86302d8cb5674948","true"],"664":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row061f26f6e31148a699f29ac1aea9a7af","true"],"665":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_col5704c7bcaff0461fa3f632ec333effd3","true"],"666":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_col33f11caad904492c8eaf5d83998f495b","true"],"667":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row643133c2f530481c9385e0b4a188cf27","true"],"668":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_rowcc0b7ffc556a412eb56bd0c2c06938b4","true"],"669":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_rowcc3e23722dbe446eb6617e486020b62d","true"],"670":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_rowe9865d9b22934d9a914359d38a7a26d5","true"],"671":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row3aa2e4b1a70c4440a670d0e2d105a214","true"],"672":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row95235eb682954d82bfede81dbdb8ceff","true"],"673":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_rowae079a7ddccc46fc8af725f77da59f50","true"],"674":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row556d0e98948547b48a6fffdd6c94468e","true"],"675":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_rowda71aaa6a22f4ceb8759cd906c6b8645","true"],"676":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_rowd9ab83c3f2434290babc20434e92cf6c","true"],"677":["link-MTYxMjk2MTU1ODYzMy1odHRwczovL3d3dy5qYXZhdHBvaW50LmNvbS9hcnJheS1pbi1qYXZh","true"],"678":["link-MTYxMjk2MTg3NzkxNC1odHRwczovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9qYXZhLXV0aWwtYXJyYXlsaXN0LWFkZC1tZXRob2QtamF2YS8=","true"],"679":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row455926dcdf164c7e8f53a08959a97ae8","true"],"680":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row48e4f4977e3d49b4920abc61d6e0f065","true"],"681":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_rowdef3a302c18547e09d026a548761ec9b","true"],"682":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_rowc1cd4cc0a068498381bfa11fbbfe51fa","true"],"683":["link-MTYxMjk2MTkzMzI5MC1odHRwczovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9qYXZhLXV0aWwtYXJyYXlsaXN0LWFkZC1tZXRob2QtamF2YS8=","true"],"684":["link-MTYxMjk2MjAyNjQyMy1odHRwczovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9hcnJheWxpc3QtZ2V0LW1ldGhvZC1qYXZhLWV4YW1wbGVzLw==","true"],"685":["link-MTYxMjk2MjE0NjkzMy1odHRwczovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9hcnJheWxpc3Qtc2l6ZS1tZXRob2QtaW4tamF2YS13aXRoLWV4YW1wbGVzLw==","true"],"686":["link-MTYxMjk2MjE5ODA4NC1odHRwczovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9hcnJheWxpc3QtY2xlYXItamF2YS1leGFtcGxlcy8=","true"],"687":["link-MTYxMjk2MjIyMjI5NC1odHRwczovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9hcnJheWxpc3QtY29udGFpbnMtamF2YS8=","true"],"688":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_rowcd6c4c709fde498ca02670af7a5a0fd3","true"],"689":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_rowa3b7b778d223474aa49d0da3607aebcc","true"],"690":["link-MTYxMjk2MjI2MTU4Ny1odHRwczovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9hcnJheWxpc3Qtc2V0LW1ldGhvZC1pbi1qYXZhLXdpdGgtZXhhbXBsZXMv","true"],"691":["link-MTYxMjk2MjMyNjkwMy1odHRwczovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9hcnJheWxpc3QtbGlua2VkbGlzdC1yZW1vdmUtbWV0aG9kcy1qYXZhLWV4YW1wbGVzLw==","true"],"692":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row63cc078b1c0246968ab05714e64ff6d7","true"],"693":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row468b3858e36e4414a8b386f4e3a25d8a","true"],"694":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_rowf33ff964349143019225dfc67e261a3d","true"],"695":["link-MTYxMjk2MjUxODA3Ni1odHRwczovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9hcnJheWxpc3Qtc3VibGlzdC1tZXRob2QtaW4tamF2YS13aXRoLWV4YW1wbGVzLw==","true"],"696":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row79f6d264fc314286b2ef8faffc1ca4bd","true"],"697":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row658f6f2944ab4046a8e5031b638babc6","true"],"698":["struct-tableb314c39b44c24c1b9ef80617ed90bdc1_row9f1bbc06220b4760ab30a320fb8b7819","true"],"699":["link-MTYxMjk2MjU3NDQ4OS1odHRwczovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9hcnJheWxpc3QtdHJpbXRvc2l6ZS1qYXZhLWV4YW1wbGUv","true"],"700":["author","15068693345"],"701":["struct-tablef2733c8aaa104be5985ba5be116407d2_colaebefc69505743e592dca18016be4eda","true"],"702":["struct-tablef2733c8aaa104be5985ba5be116407d2_row22d8f5cbf4a848d5b7d68952e73c6b15","true"],"703":["struct-tablef2733c8aaa104be5985ba5be116407d2_cole61f5a661f714e8593b1f843f1f44af2","true"],"704":["struct-tablef2733c8aaa104be5985ba5be116407d2_col6eaef18330ab4ea2a7c23024fd05a5fe","true"],"705":["struct-tablef2733c8aaa104be5985ba5be116407d2_row4e48b948b8e946be96d98307f44639fc","true"],"706":["struct-tablef2733c8aaa104be5985ba5be116407d2_rowacc9780ac29e4c3cbbc08744dd30f6cc","true"],"707":["struct-tablef2733c8aaa104be5985ba5be116407d2_row7ab6c6dcbd3f43d781d7dca8dfee42a7","true"],"708":["struct-tablef2733c8aaa104be5985ba5be116407d2_col1bc178f3a91d4aca8f0db625011f93b0","true"],"709":["struct-table803b1bda465f42e484c64018c5e0629d_col6bfa4385ab5e4f1cb36df2ac114bbfad","true"],"710":["struct-table803b1bda465f42e484c64018c5e0629d_row33840c63341047ac8af2e6bbcaeb11b2","true"],"711":["struct-table803b1bda465f42e484c64018c5e0629d_col4c3f16df983b40de807e2fc17b9d6d7f","true"],"712":["struct-table803b1bda465f42e484c64018c5e0629d_cold1bf4ea3f3874b06b877c16a75512068","true"],"713":["struct-table803b1bda465f42e484c64018c5e0629d_rowc78e872d0ef84e44b7659ee59d395a6c","true"],"714":["struct-table803b1bda465f42e484c64018c5e0629d_rowfad20435fde240d09a2b3a4673ab0bc2","true"],"715":["struct-table803b1bda465f42e484c64018c5e0629d_row6e8cd32b1784483c8e6af4750f2f9cb8","true"],"716":["struct-tablef2733c8aaa104be5985ba5be116407d2_row3546097c8a5742ef9684ab335212e7b9","true"],"717":["struct-table2009df59bbea4f28b71b9b1d519c180d_col1b1532883c6c4f6b887304ed1adb730c","true"],"718":["struct-table2009df59bbea4f28b71b9b1d519c180d_row28bc92c04de846e3a664f950dff14725","true"],"719":["struct-table2009df59bbea4f28b71b9b1d519c180d_col6dfbcacaf5cb45fba68cdb3bb8d66520","true"],"720":["struct-table2009df59bbea4f28b71b9b1d519c180d_colb7f0cac44bc14398b754851984c21183","true"],"721":["struct-table2009df59bbea4f28b71b9b1d519c180d_row31a91fef060645c0aed9a68e59a62ba2","true"],"722":["struct-table2009df59bbea4f28b71b9b1d519c180d_row24d72a93437d46e08e130bad06d88370","true"],"723":["struct-table2009df59bbea4f28b71b9b1d519c180d_rowf5eaeec52539401a840d03b58ba4cd91","true"],"724":["struct-table2009df59bbea4f28b71b9b1d519c180d_row9ddd3118c20a4812b1e2d181f9ae2076","true"],"725":["struct-table2009df59bbea4f28b71b9b1d519c180d_row703fa5a050654aba819d7c1f0dc86954","true"],"726":["struct-table2009df59bbea4f28b71b9b1d519c180d_rowf41ba109eb4c44d685bee6043605c132","true"],"727":["struct-table2009df59bbea4f28b71b9b1d519c180d_rowbc6184bf97e5449cafea428c42d0272b","true"],"728":["struct-table2009df59bbea4f28b71b9b1d519c180d_rowd22b7674cea64db1855bc4c5acc0d03c","true"],"729":["struct-table2009df59bbea4f28b71b9b1d519c180d_row2c91562874e946fc9bdac251f87549ee","true"],"730":["struct-tableb72efb0efc2348c3a884b733cf4d5856_colfb4173140c974819a9f986ae6a313f09","true"],"731":["struct-tableb72efb0efc2348c3a884b733cf4d5856_rowf4ae160fb65a40f8845074e763c371c5","true"],"732":["struct-tableb72efb0efc2348c3a884b733cf4d5856_col1469b1d911d64f57b151973f167bbea9","true"],"733":["struct-tableb72efb0efc2348c3a884b733cf4d5856_colbb669b44eed042a0889f757022c76a4f","true"],"734":["struct-tableb72efb0efc2348c3a884b733cf4d5856_rowbef8d6905b5346edbeefb0e186f66ab0","true"],"735":["struct-tableb72efb0efc2348c3a884b733cf4d5856_rowb7638e8888dc437c8c11462e1deb4114","true"],"736":["struct-tableb72efb0efc2348c3a884b733cf4d5856_rowdfdc9a278439448baada4b00c30eb740","true"],"737":["struct-prop-table-col_width_percentage_32",""],"738":["author","15070747810"],"739":["struct-table725aafaea9f54b209930fa2082923c73_col410371ad8a644e3387cb9769bb5c102f","true"],"740":["struct-table725aafaea9f54b209930fa2082923c73_row8e818956cb6a48ab94c9e1d128b7753e","true"],"741":["struct-table725aafaea9f54b209930fa2082923c73_colfc57a307df374f1c97ab31acdbad7fbd","true"],"742":["struct-table725aafaea9f54b209930fa2082923c73_col08b20578f30f45d3ba34620c64a20276","true"],"743":["struct-table725aafaea9f54b209930fa2082923c73_row77f62432136a4afdbe7ad4bcca59e7d3","true"],"744":["struct-table725aafaea9f54b209930fa2082923c73_rowba100cd0446e4783bb4c9ba97c90cd46","true"],"745":["struct-table725aafaea9f54b209930fa2082923c73_row9cd757709f9746bcba8449376695f649","true"],"746":["struct-table725aafaea9f54b209930fa2082923c73_colca292dfbfd0440319e0eeb947ed069ee","true"],"747":["struct-table725aafaea9f54b209930fa2082923c73_colfeac607337aa4d77b2c04bd8a0a5446b","true"],"748":["struct-table725aafaea9f54b209930fa2082923c73_col8664ad302dfe4f01a2384a5bca1d3d2b","true"],"749":["struct-table725aafaea9f54b209930fa2082923c73_col6a1a49632ad94109b833756e47529c42","true"],"750":["struct-table1c975205af384ef68ac9f8638f615d4d_col737cfe6eef204fbdb0796abb831305f9","true"],"751":["struct-table1c975205af384ef68ac9f8638f615d4d_row1782e80df62d4aaebec7fc836c589fec","true"],"752":["struct-table1c975205af384ef68ac9f8638f615d4d_col61b8879168fc47a58472f3c698ad452b","true"],"753":["struct-table1c975205af384ef68ac9f8638f615d4d_col8621b23c4c3d40e3b8bbce101455617e","true"],"754":["struct-table1c975205af384ef68ac9f8638f615d4d_row55e6a0cd613d49c0871a00693b8eb854","true"],"755":["struct-table1c975205af384ef68ac9f8638f615d4d_row858629344351452fb5fba2bebd467375","true"],"756":["struct-table1c975205af384ef68ac9f8638f615d4d_row7e2bed9f3f794205ac99874c6a8ca22d","true"],"757":["struct-table7c1fabdc4f7e4435b95da77222a9dfe3_col4445265660ea41d1a462d738648fbda6","true"],"758":["struct-table7c1fabdc4f7e4435b95da77222a9dfe3_rowbb7e84641902414f95ea6ccfd1bdea34","true"],"759":["struct-table7c1fabdc4f7e4435b95da77222a9dfe3_colbd39525d9d484628aa89d816285cda39","true"],"760":["struct-table7c1fabdc4f7e4435b95da77222a9dfe3_col00e510caa9ba4c12a79fec39151a9bfc","true"],"761":["struct-table7c1fabdc4f7e4435b95da77222a9dfe3_row0c36d4adf853490893347908cd50587f","true"],"762":["struct-table7c1fabdc4f7e4435b95da77222a9dfe3_rowe72a92d7d1244377808fb864e5a654ae","true"],"763":["struct-table7c1fabdc4f7e4435b95da77222a9dfe3_rowbde59e4817314e0eb801cd3cfd7da906","true"],"764":["struct-tablee1292084e6594d5f8dc815139cc2ea35_col4f836044921f473fa64b280eb12306fe","true"],"765":["struct-tablee1292084e6594d5f8dc815139cc2ea35_row47bc0a943dff42719052591816233f2c","true"],"766":["struct-tablee1292084e6594d5f8dc815139cc2ea35_cole43d33b15dec432093db157a06a3b1e5","true"],"767":["struct-tablee1292084e6594d5f8dc815139cc2ea35_col16a82873e0e040328ae6f389cb9311d4","true"],"768":["struct-tablee1292084e6594d5f8dc815139cc2ea35_row285883a69570446e8f8e1840e902abe6","true"],"769":["struct-tablee1292084e6594d5f8dc815139cc2ea35_row24881a5fcf164256bb3d9a53b1955711","true"],"770":["struct-tablee1292084e6594d5f8dc815139cc2ea35_row07c3ad2a670d4fc5a5212b274917654d","true"],"771":["struct-tablef5faa1799e254bacbc1ac05fda0d95c0_col614063bf95cb42ada2be8bd19c5782b9","true"],"772":["struct-tablef5faa1799e254bacbc1ac05fda0d95c0_row67965e9431a64effa1777186ec39c186","true"],"773":["struct-tablef5faa1799e254bacbc1ac05fda0d95c0_col762f14940bdf429b9a6de932213c3b1e","true"],"774":["struct-tablef5faa1799e254bacbc1ac05fda0d95c0_col795352c4103841bb8e2d4cf69139947d","true"],"775":["struct-tablef5faa1799e254bacbc1ac05fda0d95c0_row2f8cade5b1a345cba798264c898aa068","true"],"776":["struct-tablef5faa1799e254bacbc1ac05fda0d95c0_row6ffcece28fa84960b422263f54b2da94","true"],"777":["struct-tablef5faa1799e254bacbc1ac05fda0d95c0_row7b72e416461144d1b4d456c91b99d751","true"],"778":["list","indent6"],"779":["struct-prop-table-col_width_percentage_60","true"],"780":["struct-tablef5faa1799e254bacbc1ac05fda0d95c0_row2949e1246d384d17bee936e45cb999c9","true"],"781":["struct-prop-table-col_width_percentage_65","true"],"782":["struct-tablef5faa1799e254bacbc1ac05fda0d95c0_row3bac688c93944389acdb3ae8f6347820","true"],"783":["author","15074776444"],"784":["struct-table35583148c8fe48d4a511e226aff867d5_col8d17432813a447818bacc6a7e408a9f8","true"],"785":["struct-table35583148c8fe48d4a511e226aff867d5_col0e8f62d8e4374e0fb7729ffcdd9bce39","true"],"786":["author","15068678473"],"787":["list","checked1"],"788":["author","15072893651"],"789":["struct-tableb396897250f54a479486db08fe8084d3_col09ee18ac1ea1449e98be5faa611eeef4","true"],"790":["struct-tableb396897250f54a479486db08fe8084d3_row1add157917a04c3182a737870fb4adec","true"],"791":["struct-tableb396897250f54a479486db08fe8084d3_colc6434a46daf440deaf40745111411dad","true"],"792":["struct-tableb396897250f54a479486db08fe8084d3_col35c1b6746a7049a3963cd1783c5b7caa","true"],"793":["struct-tableb396897250f54a479486db08fe8084d3_row5955e78d6cc64ff892a429ac65a78565","true"],"794":["struct-tableb396897250f54a479486db08fe8084d3_row2048709eac984f66a85fa922234d19d2","true"],"795":["struct-tableb396897250f54a479486db08fe8084d3_row765f04ddd88742c39927998fac005b5f","true"],"796":["author","15081618633"],"797":["link-MTYxMzQ0NDk5MDgyMS1odHRwczovL3d3dy5nZWVrc2ZvcmdlZWtzLm9yZy9tZXRob2RzLWluLWphdmEv","true"],"798":["struct-tableda2670e9dbfc4981b3924e8d41258c0a_col917193c580ed41c8a48efaefeebc8418","true"],"799":["struct-tableda2670e9dbfc4981b3924e8d41258c0a_row6f556a1a84f9489182443b6cecdc5737","true"],"800":["struct-tableda2670e9dbfc4981b3924e8d41258c0a_coldcc257be9cf247708d03eda7e5fff62c","true"],"801":["struct-tableda2670e9dbfc4981b3924e8d41258c0a_col4fa5ec63758b4fb294e24f92de3faef4","true"],"802":["struct-tableda2670e9dbfc4981b3924e8d41258c0a_row2fbe08edb70d49d2a407d7af91a14b74","true"],"803":["struct-tableda2670e9dbfc4981b3924e8d41258c0a_row56eeac04506d43918501caf7dc0075f4","true"],"804":["struct-tableda2670e9dbfc4981b3924e8d41258c0a_rowe993299ecefc49afbda59917dac07dd7","true"],"805":["struct-table5e7d559ca8af486b88f0330cd749bd10_col7844ba86609a4d9e8de393657173e792","true"],"806":["struct-table5e7d559ca8af486b88f0330cd749bd10_roweea2aa039d4f4be8a61a6b6f203a7286","true"],"807":["font-color-25265e","true"],"808":["struct-table5e7d559ca8af486b88f0330cd749bd10_col91ad0a1ffe4b4caba9f0792805532cac","true"],"809":["struct-table5e7d559ca8af486b88f0330cd749bd10_cole1f066cb16bd4f78991db947433ab21b","true"],"810":["struct-table5e7d559ca8af486b88f0330cd749bd10_rowa2f75c78306b4f358de9aa986764f6b6","true"],"811":["font-color-212529","true"],"812":["struct-table5e7d559ca8af486b88f0330cd749bd10_row8814a83e78f3458eb71fb51063d416d3","true"],"813":["struct-table5e7d559ca8af486b88f0330cd749bd10_rowf5215145dc644d9ba12af2ce75e8d2ce","true"],"814":["struct-table5e7d559ca8af486b88f0330cd749bd10_row08461e49c2934d80980e980b36a8c073","true"],"815":["font-color-3a3a3a","true"],"816":["struct-table5e7d559ca8af486b88f0330cd749bd10_row0f4ae6b5f52141c1b8c41106b8288dc4","true"],"817":["struct-table5e7d559ca8af486b88f0330cd749bd10_row92381b144a874b08aa4ef25196b41b6a","true"],"818":["struct-table5e7d559ca8af486b88f0330cd749bd10_row28448515a54e427c8bf354448ba86149","true"],"819":["struct-table5e7d559ca8af486b88f0330cd749bd10_row1d41460ffc11449297713e00d73ed2ea","true"],"820":["struct-table5e7d559ca8af486b88f0330cd749bd10_row67b2111dd7c94f97b9736cef67871cb4","true"],"821":["image-6bfea04875a84da28a1d4bf46c520879-JTdCJTIyYm94U2hhcmVkTGluayUyMiUzQSUyMmh0dHBzJTNBJTJGJTJGYXBwLmJveC5jb20lMkZzJTJGM2d0dGZ3ZGgwcjFuZTJyOWtjMHV6bTAwem43eDFlMzQlMjIlMkMlMjJib3hGaWxlSWQlMjIlM0ElMjI3NzY4MDkwODY3OTklMjIlMkMlMjJmaWxlTmFtZSUyMiUzQSUyMjFfRmtReldxcUlNbEFIWl94TnJFUEtlQS5wbmclMjIlN0Q=","true"],"822":["struct-prop-table-col_width_percentage_51",""],"823":["struct-tableb1399df177554715b428ccd9de7b055a_colf81c8ae3dd5344d7ba2896ea8c0c9c36","true"],"824":["struct-tableb1399df177554715b428ccd9de7b055a_row8bfc898285534f1dbdd9e715d555dfda","true"],"825":["struct-tableb1399df177554715b428ccd9de7b055a_col8ef79d5776cc4135acc62daffc97ecb2","true"],"826":["struct-tableb1399df177554715b428ccd9de7b055a_rowe016d9e0b3f04ad2a3b8ecda256d147c","true"],"827":["struct-tableb1399df177554715b428ccd9de7b055a_row049405fc82cc4b7abe572f8ad11c61ac","true"],"828":["font-color-595959","true"],"829":["struct-tableb1399df177554715b428ccd9de7b055a_roweec667afaeef4d538a0a3d3e2e99a172","true"],"830":["struct-tableb1399df177554715b428ccd9de7b055a_row7d27537df6bb46458148ab4423e1979f","true"],"831":["struct-tableb1399df177554715b428ccd9de7b055a_rowd65d749a7c80482b8d42fec1004bed72","true"],"832":["struct-tableb1399df177554715b428ccd9de7b055a_col55503fdfaea14d83919f1870f6b558ba","true"],"833":["struct-tableb1399df177554715b428ccd9de7b055a_colaf336b9bc1e64cfb96a65e7858fab5bf","true"],"834":["struct-tableb1399df177554715b428ccd9de7b055a_col637cc6be17834eb4aed3a83bcf3cd1b4","true"],"835":["struct-tableb1399df177554715b428ccd9de7b055a_col893a64fe96dc4cbf913539231fdfef61","true"],"836":["struct-table0163e7b2615d4e4a81b7907af4f566d4_cola556a5aa34544d07a8e7d14d044cf43d","true"],"837":["struct-table0163e7b2615d4e4a81b7907af4f566d4_rowedf2fe62b94741dc99ef66883a989713","true"],"838":["struct-table0163e7b2615d4e4a81b7907af4f566d4_col2ad55246b78a4d72ada9cdfd7ef03417","true"],"839":["struct-table0163e7b2615d4e4a81b7907af4f566d4_col3bc29194885948a6992d8cc386d4ed32","true"],"840":["struct-table0163e7b2615d4e4a81b7907af4f566d4_row638f679f39274e6fb2a5b8fe2c3ab60d","true"],"841":["struct-table0163e7b2615d4e4a81b7907af4f566d4_row62c5a007b1c6418db8590e452a4b695e","true"],"842":["struct-table0163e7b2615d4e4a81b7907af4f566d4_row5d4e54857697489d867b86d43e5cd124","true"],"843":["struct-tableb52b6717f86f426280e3c5d81ad80746_col53db4deeab8c49e3a96bd41fad4969b7","true"],"844":["struct-tableb52b6717f86f426280e3c5d81ad80746_row923bfeba0e6b425285d889bc4c00bb23","true"],"845":["struct-tableb52b6717f86f426280e3c5d81ad80746_col81acfb604e4e4d21a9957846d9663de0","true"],"846":["struct-table6cfc6bd603fe412780937f2e0d16d48a_col44c193f545e940ccb6b8feb5d104b337","true"],"847":["struct-table6cfc6bd603fe412780937f2e0d16d48a_row79e71894da364990bab412a5425fffdc","true"],"848":["struct-table6cfc6bd603fe412780937f2e0d16d48a_col753fc1e1342a48d5916a7500cd6f2dc2","true"],"849":["struct-table3bf610d21c8a42799ee393d1b63a3e90_col148a7e9280744a34a09e4fbba7147a06","true"],"850":["struct-table3bf610d21c8a42799ee393d1b63a3e90_row7527af2aa17e48f6a12dbf2996f0cf74","true"],"851":["struct-table3bf610d21c8a42799ee393d1b63a3e90_col8c56abd0a7be43be8f9fe6bf656794de","true"],"852":["struct-table3bf610d21c8a42799ee393d1b63a3e90_col276b68afb6d84e99974fc21f0f0cb0ab","true"],"853":["struct-table3bf610d21c8a42799ee393d1b63a3e90_rowcd486521262844ab98250f2cfb5bf882","true"],"854":["struct-table3bf610d21c8a42799ee393d1b63a3e90_row4b2e3858a8354e1297e971b1ac9616d1","true"],"855":["struct-table3bf610d21c8a42799ee393d1b63a3e90_rowb049e6d51e4544c2ba0ebcff5c3169a8","true"],"856":["struct-table241f1b7e61264474a8194f00087b1ec0_col452f452d0d8b4c5ea4bc73f2c8725bb2","true"],"857":["struct-table241f1b7e61264474a8194f00087b1ec0_row69b5ba66c21f460eb6f125fbf847bc1e","true"],"858":["struct-table241f1b7e61264474a8194f00087b1ec0_colff227e14e94e4c89a857b453c151d153","true"],"859":["struct-table241f1b7e61264474a8194f00087b1ec0_col110316cf2a214e9683607d7b66850a52","true"],"860":["struct-table241f1b7e61264474a8194f00087b1ec0_row48f85ed280084a9fa5985203d19cdfe9","true"],"861":["struct-table241f1b7e61264474a8194f00087b1ec0_row7849824ef3c14ff78cad3e1bd45c86e5","true"],"862":["struct-table241f1b7e61264474a8194f00087b1ec0_row588bf98883d94b5c93fb98dea19c938d","true"],"863":["font-color-080808","true"],"864":["struct-table3bf610d21c8a42799ee393d1b63a3e90_coled87cc3daf11412bb3f19b51503fa70b","true"],"865":["author","15071375008"],"866":["struct-table3bf610d21c8a42799ee393d1b63a3e90_col8792f0dd0e5f47bda1fcdd6b1cef95db","true"],"867":["struct-table3bf610d21c8a42799ee393d1b63a3e90_row71c5a48dc81048509d320df7b1b3d736","true"],"868":["struct-prop-table-col_width_percentage_30","true"],"869":["struct-prop-table-col_width_percentage_30",""],"870":["struct-table3bf610d21c8a42799ee393d1b63a3e90_row53be8d2c895e4ccd8d26c27cd4c049cd","true"],"871":["struct-prop-table-col_width_percentage_52","true"],"872":["struct-prop-table-col_width_percentage_31",""],"873":["struct-table68431867d5c247e69f23a1dd74ce74ce_col1c663914b8e24077aa2fcce9fe2ff1d8","true"],"874":["struct-table68431867d5c247e69f23a1dd74ce74ce_rowe67124a22b404e239cf175ba13f09b50","true"],"875":["struct-table68431867d5c247e69f23a1dd74ce74ce_colbf486ecefe934faf82a84695e00ff9b7","true"],"876":["struct-table68431867d5c247e69f23a1dd74ce74ce_cole4f774f06646477aa67e6ba34574c839","true"],"877":["struct-table68431867d5c247e69f23a1dd74ce74ce_row5b7a25f8591340e4984d2f160cbcb99d","true"],"878":["struct-table68431867d5c247e69f23a1dd74ce74ce_row430c13f199ca4b42984f1403e65b8b80","true"],"879":["struct-table68431867d5c247e69f23a1dd74ce74ce_rowb5b37ebadd4d48ccbe738d7557b9f6bb","true"],"880":["struct-prop-table-col_width_percentage_64",""],"881":["struct-table8b7124e8fffe48cfb0704b9309bcda2d_col109f974251e747f4bf3840906bdea901","true"],"882":["struct-table8b7124e8fffe48cfb0704b9309bcda2d_rowdd556fa3638e4805805ebb79add0b3dd","true"],"883":["struct-table8b7124e8fffe48cfb0704b9309bcda2d_col1a9a24e8bf92440c97cbc40e00cc08b7","true"],"884":["struct-table8b7124e8fffe48cfb0704b9309bcda2d_col4031d331870a48e1b5ca6f2926f8c6c4","true"],"885":["struct-table8b7124e8fffe48cfb0704b9309bcda2d_row4cbd7192b3a945c5804bf009babd2bbc","true"],"886":["struct-table8b7124e8fffe48cfb0704b9309bcda2d_row380897964b5d41b3b7b22866163babaa","true"],"887":["struct-table8b7124e8fffe48cfb0704b9309bcda2d_row25e948dba6ef446cb8c622bdfdb363b3","true"],"888":["struct-tablef2cce62c459c49afa807856afb3f854a_col2a8266a76f594d9ea13c3ea1dfbce51b","true"],"889":["struct-tablef2cce62c459c49afa807856afb3f854a_row3af8ee26b72246639fe8bf283f08267a","true"],"890":["struct-tablef2cce62c459c49afa807856afb3f854a_cold6c1801269f24e31b3462524bc0bd896","true"],"891":["struct-tablef2cce62c459c49afa807856afb3f854a_colba45ff78f3884bb3aecd37b47a2c1d27","true"],"892":["struct-tablef2cce62c459c49afa807856afb3f854a_row215e39d2f34a41f1909eaa36a014b691","true"],"893":["struct-tablef2cce62c459c49afa807856afb3f854a_row05ae6f5db7994e0282728448147e0fd7","true"],"894":["struct-tablef2cce62c459c49afa807856afb3f854a_rowe162369b41ba4cefb81859e3aabdb222","true"],"895":["struct-table68431867d5c247e69f23a1dd74ce74ce_row954cd2034e0f414cb525cd2905547c9e","true"],"896":["struct-tablec04be10fb5724ef3a98f00621a54dd7a_cole284518c27b0426e99e456641718c19d","true"],"897":["struct-tablec04be10fb5724ef3a98f00621a54dd7a_roweaad263532624b5e8385834817d75952","true"],"898":["struct-tablec04be10fb5724ef3a98f00621a54dd7a_col95389dc2101d423f9e3135f48cb44b6a","true"],"899":["struct-tablec04be10fb5724ef3a98f00621a54dd7a_coldbd0d1222b1548bb87c7a6249de2041f","true"],"900":["struct-tablec04be10fb5724ef3a98f00621a54dd7a_rowb73454a4fb1d4f199573beec60701dce","true"],"901":["struct-tablec04be10fb5724ef3a98f00621a54dd7a_rowea8675cde9b348198583a2cf68fcaa28","true"],"902":["struct-tablec04be10fb5724ef3a98f00621a54dd7a_row0a32446c043a45bdb12a52c2c1005448","true"],"903":["struct-prop-table-col_width_percentage_50","true"],"904":["struct-prop-table-col_width_percentage_50",""],"905":["struct-tablec04be10fb5724ef3a98f00621a54dd7a_col486a3f09919f4cad9ff821665491f40a","true"],"906":["struct-table91041db9cb084ce492d1d3576c6806d1_cole24ab9e268844c44a508379ad8173e69","true"],"907":["struct-table91041db9cb084ce492d1d3576c6806d1_row9d59dc78fe264209ad3ffe30c6c8e7ef","true"],"908":["struct-table91041db9cb084ce492d1d3576c6806d1_colf4044f19095e4bcc8fda26ead159f52c","true"],"909":["struct-table91041db9cb084ce492d1d3576c6806d1_col0c9602ff4d7f49ed9b03810d27b3ce05","true"],"910":["struct-table91041db9cb084ce492d1d3576c6806d1_rowa81f19c3280a4395a531eddff022eec4","true"],"911":["struct-table91041db9cb084ce492d1d3576c6806d1_row5ae7e87158dc46739a8a46db2c05e25c","true"],"912":["struct-table91041db9cb084ce492d1d3576c6806d1_row6a37c025ee344c5cb4e8449dbf74b6c2","true"],"913":["image-ece95a40d0274b93b3c54151992183ec-JTdCJTIyZXh0ZXJuYWxVcmwlMjIlM0ElMjJodHRwcyUzQSUyRiUyRnN0YXRpYy5qYXZhdHBvaW50LmNvbSUyRmltYWdlcyUyRmNvcmUlMkZpbnRlcmZhY2VyZWxhdGlvbi5qcGclMjIlN0Q=","true"],"914":["link-MTYxNDEyMTMzNDA3NC1odHRwczovL3d3dy5qYXZhdHBvaW50LmNvbS9hYnN0cmFjdC1jbGFzcy1pbi1qYXZh","true"],"915":["link-MTYxNDEyMTMzNDA4NC1odHRwczovL3d3dy5qYXZhdHBvaW50LmNvbS9pbmhlcml0YW5jZS1pbi1qYXZh","true"],"916":["struct-table4e4be7b33df34703b9479966d353d692_col2b1cec30bfd94dbab88976a546beab95","true"],"917":["struct-table4e4be7b33df34703b9479966d353d692_rowdd4bb614fba4429baa3c96618670316d","true"],"918":["struct-table4e4be7b33df34703b9479966d353d692_col66dbc4934a754ef38cc71cfa1e103f25","true"],"919":["struct-table4e4be7b33df34703b9479966d353d692_col261abf3b30ea4d3abb20e92fe62128ff","true"],"920":["struct-table4e4be7b33df34703b9479966d353d692_rowadc9aa2b50f34ee59b96547f2b20fde5","true"],"921":["struct-table4e4be7b33df34703b9479966d353d692_row9f57ba6f8dac40aeb509068925b7551e","true"],"922":["struct-table4e4be7b33df34703b9479966d353d692_row2767ad4d159248d6ab1ed96666a87092","true"],"923":["struct-table4e4be7b33df34703b9479966d353d692_row97b37c1836ba437cb29c4f934fd76ac1","true"],"924":["struct-table4e4be7b33df34703b9479966d353d692_row122f4a07bf384b62b784ab418a867396","true"],"925":["struct-table91041db9cb084ce492d1d3576c6806d1_row6e13501f404b4a9aac851daa2e59deec","true"],"926":["struct-table91041db9cb084ce492d1d3576c6806d1_row980c280c71814484b9c2151b22bce74a","true"],"927":["struct-table91041db9cb084ce492d1d3576c6806d1_cole663df1cb01841ddbafd55ac81a51769","true"],"928":["struct-table91041db9cb084ce492d1d3576c6806d1_row4ad44233174048669ef4d94ead9781cf","true"],"929":["struct-table91041db9cb084ce492d1d3576c6806d1_row72c3a20333df44b090618fbd77ab9d35","true"],"930":["struct-table91041db9cb084ce492d1d3576c6806d1_col15c881ff50fa4782a22e90536cbfd9ac","true"],"931":["struct-table91041db9cb084ce492d1d3576c6806d1_col0303f2bd440c40d7babdcb4dd47120f9","true"],"932":["struct-table91041db9cb084ce492d1d3576c6806d1_col39ee6d5c19204458bfe18f346a3a7d53","true"],"933":["struct-table91041db9cb084ce492d1d3576c6806d1_rowa7140bdbe60a4d06b797d4fefa6fc482","true"],"934":["struct-table91041db9cb084ce492d1d3576c6806d1_row1b2f8fee732d468c9d2c5b863f4b9ba7","true"],"935":["struct-table91041db9cb084ce492d1d3576c6806d1_row30b0dafc7108487d8e817403d4cd45c5","true"],"936":["image-7a0e211010a742d9b41e48bb271f05a9-JTdCJTIyZXh0ZXJuYWxVcmwlMjIlM0ElMjJodHRwcyUzQSUyRiUyRnd3dy5mdXNpb24tcmVhY3Rvci5jb20lMkZ3cC1jb250ZW50JTJGdXBsb2FkcyUyRjIwMjAlMkYwOSUyRm9vcC0xLnBuZyUyMiU3RA==","true"],"937":["image-b7dd6e74bc104fff8a51f2d90a96b9f4-JTdCJTIycGxhY2Vob2xkZXJUeXBlJTIyJTNBJTIycHJvZ3Jlc3MlMjIlMkMlMjJmaWxlTmFtZSUyMiUzQSUyMkV4ZWNwdGlvbiUyMGhhbmRsaW5nLkpQRyUyMiUyQyUyMmZpbGVTaXplJTIyJTNBMzM1NTclMkMlMjJ1cGxvYWRlclVzZXJJZCUyMiUzQSUyMjE1MDcxMzc1MDA4JTIyJTdE","true"],"938":["image-8803e9639a774714aed092e6c5b42c60-JTdCJTIyYm94U2hhcmVkTGluayUyMiUzQSUyMmh0dHBzJTNBJTJGJTJGbmF2ZWVuYXV0b21hdGlvbmxhYnMuYm94LmNvbSUyRnMlMkZrcjAwc3ZlN3pjbjY4ZmQwaWJxZDZ5amhvamo0Z2draCUyMiUyQyUyMmJveEZpbGVJZCUyMiUzQSUyMjc4MDAyMjIwMzA5NCUyMiUyQyUyMmZpbGVOYW1lJTIyJTNBJTIyRXhlY3B0aW9uJTIwaGFuZGxpbmcuSlBHJTIyJTdE","true"],"939":["image-b7dd6e74bc104fff8a51f2d90a96b9f4-JTdCJTIycGxhY2Vob2xkZXJUeXBlJTIyJTNBJTIycHJvZ3Jlc3MlMjIlMkMlMjJmaWxlTmFtZSUyMiUzQSUyMkV4ZWNwdGlvbiUyMGhhbmRsaW5nLkpQRyUyMiUyQyUyMmZpbGVTaXplJTIyJTNBMzM1NTclMkMlMjJ1cGxvYWRlclVzZXJJZCUyMiUzQSUyMjE1MDcxMzc1MDA4JTIyJTdE",""],"940":["struct-table67c86bb365214e93ab363dcbf0c343da_cole3a597604a0941bb907a44668a8e502d","true"],"941":["struct-table67c86bb365214e93ab363dcbf0c343da_rowd8fd7a403b204dcfb21a7523243b384d","true"],"942":["struct-table67c86bb365214e93ab363dcbf0c343da_colcee020d118364359b570cc3d5b0e86cb","true"],"943":["struct-table67c86bb365214e93ab363dcbf0c343da_col55520fdb83a547738ad8e9980cc4779b","true"],"944":["struct-table67c86bb365214e93ab363dcbf0c343da_rowfd8d92e2ce5848a89c173433a773b5ac","true"],"945":["struct-table67c86bb365214e93ab363dcbf0c343da_row2e3777f9b1cf4315a93d9ec5c7bc82d8","true"],"946":["struct-table67c86bb365214e93ab363dcbf0c343da_rowc9d7942ed1b04bd0bbc5c73b8dabd727","true"],"947":["author","15069462724"],"948":["struct-tableb58df79a53f747e4901cfb5d5f97ff4c_colad2e19328dd94f2f9b830bdf2f1b966e","true"],"949":["struct-tableb58df79a53f747e4901cfb5d5f97ff4c_row46e9419618ed4060a42b1e920e6465b9","true"],"950":["struct-tableb58df79a53f747e4901cfb5d5f97ff4c_cola57c2b6bf50b465fab64ccb8f6e41b0b","true"],"951":["struct-tableb58df79a53f747e4901cfb5d5f97ff4c_colf48b1495eee14a608eee8c4445f33864","true"],"952":["struct-tableb58df79a53f747e4901cfb5d5f97ff4c_rowc026bb68e2734b2693dce6cfd1c0c10b","true"],"953":["struct-tableb58df79a53f747e4901cfb5d5f97ff4c_row8dac1f2534bb49319f794a7fcb67fa5f","true"],"954":["struct-tableb58df79a53f747e4901cfb5d5f97ff4c_row1c03c1bfa5414b0fa88a6242220ca720","true"],"955":["struct-table588be9ee2a39479c97830df78c25660a_cole46aa036c9774f47b40b9c461305d21f","true"],"956":["struct-table588be9ee2a39479c97830df78c25660a_row4b93afb69aa44503b2604ac3812fe059","true"],"957":["struct-table588be9ee2a39479c97830df78c25660a_col78efa0c9a3d3430984b545fcf2863aa2","true"],"958":["struct-table588be9ee2a39479c97830df78c25660a_col8849864e70bf4dbba864f8c862e50d3b","true"],"959":["struct-table588be9ee2a39479c97830df78c25660a_rowe6e39707679f40a6850055864862c88e","true"],"960":["struct-table588be9ee2a39479c97830df78c25660a_rowc051d9ecaacb4c8bbcb023cb6f1732f9","true"],"961":["struct-table588be9ee2a39479c97830df78c25660a_rowc902f645ce064bdc91c2b6f64838ad52","true"],"962":["font-color-c7254e","true"],"963":["font-color-3d3d4e","true"],"964":["font-color-dc143c","true"],"965":["font-color-222426","true"],"966":["struct-table5c901e7118a1459ea7b1c90c3c78e6ee_col54494b13e94744358fba67f26b06584f","true"],"967":["struct-table5c901e7118a1459ea7b1c90c3c78e6ee_row79b44dfeee034aeda842fa622fa0b68f","true"],"968":["struct-table5c901e7118a1459ea7b1c90c3c78e6ee_col08347468276c45a685a26231b7c57372","true"],"969":["struct-table5c901e7118a1459ea7b1c90c3c78e6ee_col905945a12ae14e9fb8d86bb08071de78","true"],"970":["struct-table5c901e7118a1459ea7b1c90c3c78e6ee_row2ed5848daf8a41b6b9caa21f31e248c9","true"],"971":["struct-table5c901e7118a1459ea7b1c90c3c78e6ee_rowc9e047631e1e4b9498d52aa89190c5cc","true"],"972":["struct-table5c901e7118a1459ea7b1c90c3c78e6ee_row38c3420f132e4b4196ba21f906662b7c","true"],"973":["link-MTYxNDIyMzUzNDYyMC1odHRwczovL2RvY3Mub3JhY2xlLmNvbS9qYXZhc2UvNy9kb2NzL2FwaS9qYXZhL2xhbmcvSW5kZXhPdXRPZkJvdW5kc0V4Y2VwdGlvbi5odG1s","true"],"974":["struct-table588be9ee2a39479c97830df78c25660a_rowc561db4c2b714c1d92c728568672f98d","true"],"975":["struct-table9854694d2f2e46b3a721bf73b59b59e7_col9796f21bd50f479ba0a16db4fff923fc","true"],"976":["struct-table9854694d2f2e46b3a721bf73b59b59e7_row6b5c865de0024a738d0209063c50a8c8","true"],"977":["struct-table9854694d2f2e46b3a721bf73b59b59e7_col2fa46b8c55a24350b1a029e3934a2d53","true"],"978":["struct-table9854694d2f2e46b3a721bf73b59b59e7_colf717b6c4dd9b4c2fabab3a177b597bd6","true"],"979":["struct-table9854694d2f2e46b3a721bf73b59b59e7_row683202dbf346452aa86fd1a3229a14b6","true"],"980":["struct-table9854694d2f2e46b3a721bf73b59b59e7_row4cd8cfa8a84c4068890eec102d14b8b6","true"],"981":["struct-table9854694d2f2e46b3a721bf73b59b59e7_rowd59c973a4a4049d5b307c3138e0a80d8","true"],"982":["annotation-f24f210041cd40e2b0d569a34624049f",""]},"nextNum":983},"chatHead":-1,"publicStatus":false,"passwordHash":null,"savedRevisions":[]}